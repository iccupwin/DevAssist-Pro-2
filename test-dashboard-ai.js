// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Dashboard AI —Å—Ç–∞—Ç—É—Å–∞
const fetch = require('node-fetch');

async function testDashboardAI() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Dashboard AI —Å—Ç–∞—Ç—É—Å–∞...\n');
    
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º providers endpoint
        console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/llm/providers...');
        const providersResponse = await fetch('http://localhost:8000/api/llm/providers');
        const providersData = await providersResponse.json();
        
        console.log('‚úÖ Providers –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:');
        console.log('- OpenAI:', providersData.providers?.openai?.status);
        console.log('- Anthropic:', providersData.providers?.anthropic?.status);
        console.log('- Google:', providersData.providers?.google?.status);
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/llm/health...');
        const healthResponse = await fetch('http://localhost:8000/api/llm/health');
        const healthData = await healthResponse.json();
        
        console.log('‚úÖ Health –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:');
        console.log('- –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:', healthData.overall_status);
        console.log('- OpenAI configured:', healthData.providers?.openai?.configured);
        console.log('- OpenAI status:', healthData.providers?.openai?.status);
        console.log('- Anthropic configured:', healthData.providers?.anthropic?.configured);
        console.log('- Anthropic status:', healthData.providers?.anthropic?.status);
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É frontend
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É frontend...');
        
        // –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É frontend
        const status = { openai: false, anthropic: false };
        
        // OpenAI —Å—Ç–∞—Ç—É—Å
        if (providersData.providers?.openai) {
            const isHealthy = healthData?.providers?.openai?.configured === true && 
                             healthData?.providers?.openai?.status === 'healthy';
            status.openai = isHealthy;
            console.log('- OpenAI isHealthy:', isHealthy);
        }
        
        // Anthropic —Å—Ç–∞—Ç—É—Å
        if (providersData.providers?.anthropic) {
            const isHealthy = healthData?.providers?.anthropic?.configured === true && 
                             healthData?.providers?.anthropic?.status === 'healthy';
            status.anthropic = isHealthy;
            console.log('- Anthropic isHealthy:', isHealthy);
        }
        
        console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:');
        console.log('- OpenAI —Å—Ç–∞—Ç—É—Å –≤ Dashboard:', status.openai ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        console.log('- Anthropic —Å—Ç–∞—Ç—É—Å –≤ Dashboard:', status.anthropic ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        if (status.openai && status.anthropic) {
            console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ.');
        } else {
            console.log('\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏–ª–∏ –ª–æ–≥–∏–∫—É.');
        }
        
        return status.openai && status.anthropic;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        return false;
    }
}

testDashboardAI().then(success => {
    console.log(success ? '\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' : '\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
    process.exit(success ? 0 : 1);
});