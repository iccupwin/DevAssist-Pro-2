#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –ö–ü –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ‚Üí AI –∞–Ω–∞–ª–∏–∑ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */

const fs = require('fs');
const FormData = require('form-data');
const fetch = require('node-fetch');

const BACKEND_URL = 'http://localhost:8000';
const FRONTEND_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
const TEST_TZ = `–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏

–¶–ï–õ–¨: –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏

–§–£–ù–ö–¶–ò–ò:
1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
3. –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á –∏ –ø–æ–¥–∑–∞–¥–∞—á
4. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–µ–¥–ª–∞–π–Ω—ã
5. –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- Frontend: React, TypeScript
- Backend: Python/Django –∏–ª–∏ Node.js
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL
- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: Docker

–ë–Æ–î–ñ–ï–¢: –¥–æ 2,000,000 —Ä—É–±–ª–µ–π
–°–†–û–ö–ò: –Ω–µ –±–æ–ª–µ–µ 4 –º–µ—Å—è—Ü–µ–≤
–ö–û–ú–ê–ù–î–ê: –º–∏–Ω–∏–º—É–º 5 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤`;

const TEST_KP = `–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
–û–û–û "–¢–µ—Ö–†–µ—à–µ–Ω–∏—è"

–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ "ProjectFlow"

–û –ö–û–ú–ü–ê–ù–ò–ò:
5 –ª–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: 30+ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–ö–û–ú–ê–ù–î–ê:
- –ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π  
- 2 Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (React)
- 2 Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Python)
- DevOps –∏–Ω–∂–µ–Ω–µ—Ä
- QA –∏–Ω–∂–µ–Ω–µ—Ä

–¢–ï–•–ù–û–õ–û–ì–ò–ò:
- Frontend: React 18, TypeScript, Material-UI
- Backend: Python Django, Django REST Framework
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL 14
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è: Docker, Docker Compose
- CI/CD: GitLab

–≠–¢–ê–ü–´:
1. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–∏–∑–∞–π–Ω (3 –Ω–µ–¥–µ–ª–∏)
2. Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (6 –Ω–µ–¥–µ–ª—å)
3. Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (8 –Ω–µ–¥–µ–ª—å)
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (3 –Ω–µ–¥–µ–ª–∏)

–°–¢–û–ò–ú–û–°–¢–¨: 1,800,000 —Ä—É–±–ª–µ–π
–°–†–û–ö–ò: 20 –Ω–µ–¥–µ–ª—å
–ì–ê–†–ê–ù–¢–ò–Ø: 12 –º–µ—Å—è—Ü–µ–≤`;

class KPAnalyzerTester {
  constructor() {
    this.results = {
      backend_health: false,
      frontend_health: false,
      file_upload: false,
      ai_analysis: false,
      real_ai_confirmed: false,
      full_cycle: false
    };
  }

  log(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = {
      'info': 'üìù',
      'success': '‚úÖ', 
      'error': '‚ùå',
      'warning': '‚ö†Ô∏è'
    }[type] || 'üìù';
    
    console.log(`${prefix} ${timestamp} ${message}`);
  }

  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async checkBackendHealth() {
    try {
      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è backend...', 'info');
      const response = await fetch(`${BACKEND_URL}/health`);
      
      if (response.ok) {
        const data = await response.json();
        this.log(`Backend –∑–¥–æ—Ä–æ–≤: ${data.service}`, 'success');
        this.results.backend_health = true;
        return true;
      } else {
        this.log(`Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`, 'error');
        return false;
      }
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: ${error.message}`, 'error');
      return false;
    }
  }

  async checkFrontendHealth() {
    try {
      this.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è frontend...', 'info');
      const response = await fetch(FRONTEND_URL);
      
      if (response.ok) {
        this.log('Frontend –¥–æ—Å—Ç—É–ø–µ–Ω', 'success');
        this.results.frontend_health = true;
        return true;
      } else {
        this.log(`Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`, 'error');
        return false;
      }
    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: ${error.message}`, 'error');
      return false;
    }
  }

  async testFileUpload() {
    try {
      this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...', 'info');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      fs.writeFileSync('/tmp/test_tz_auto.txt', TEST_TZ);
      fs.writeFileSync('/tmp/test_kp_auto.txt', TEST_KP);

      // –ó–∞–≥—Ä—É–∑–∫–∞ –¢–ó
      const tzForm = new FormData();
      tzForm.append('file', fs.createReadStream('/tmp/test_tz_auto.txt'));
      tzForm.append('document_type', 'tz');

      const tzResponse = await fetch(`${BACKEND_URL}/api/documents/upload`, {
        method: 'POST',
        body: tzForm
      });

      if (!tzResponse.ok) {
        throw new Error(`TZ upload failed: ${tzResponse.status}`);
      }

      const tzResult = await tzResponse.json();
      this.log(`–¢–ó –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ID ${tzResult.data.document_id}`, 'success');

      // –ó–∞–≥—Ä—É–∑–∫–∞ –ö–ü
      const kpForm = new FormData();
      kpForm.append('file', fs.createReadStream('/tmp/test_kp_auto.txt'));
      kpForm.append('document_type', 'kp');

      const kpResponse = await fetch(`${BACKEND_URL}/api/documents/upload`, {
        method: 'POST',
        body: kpForm
      });

      if (!kpResponse.ok) {
        throw new Error(`KP upload failed: ${kpResponse.status}`);
      }

      const kpResult = await kpResponse.json();
      this.log(`–ö–ü –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ID ${kpResult.data.document_id}`, 'success');
      
      this.results.file_upload = true;
      return { tzId: tzResult.data.document_id, kpId: kpResult.data.document_id };

    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`, 'error');
      return null;
    } finally {
      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      try {
        fs.unlinkSync('/tmp/test_tz_auto.txt');
        fs.unlinkSync('/tmp/test_kp_auto.txt');
      } catch (e) {
        // Ignore cleanup errors
      }
    }
  }

  async testAIAnalysis() {
    try {
      this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...', 'info');
      
      const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–ü –∏ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É:
      
–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
${TEST_KP}

–ò–∑–≤–ª–µ–∫–∏: –∫–æ–º–ø–∞–Ω–∏—é, –∫–æ–º–∞–Ω–¥—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Å—Ä–æ–∫–∏. –û—Ç–≤–µ—Ç—å JSON:
{"company": "...", "team_size": N, "price": "...", "timeline": "..."}`;

      const response = await fetch(`${BACKEND_URL}/api/llm/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: prompt,
          model: 'claude-3-5-sonnet-20240620',
          max_tokens: 200,
          temperature: 0.1
        })
      });

      if (!response.ok) {
        throw new Error(`AI analysis failed: ${response.status}`);
      }

      const result = await response.json();
      this.log('AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      this.log(`–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.tokens_used}`, 'info');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const isRealAI = !result.content.includes('–û–û–û "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –†–µ—à–µ–Ω–∏—è"') && 
                      !result.content.includes('React, TypeScript, Node.js, PostgreSQL');
      
      if (isRealAI) {
        this.log('‚ú® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π AI API!', 'success');
        this.results.real_ai_confirmed = true;
      } else {
        this.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ', 'warning');
      }

      this.results.ai_analysis = true;
      return result;

    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`, 'error');
      return null;
    }
  }

  async testFullCycle() {
    try {
      this.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–Ω–∞–ª–∏–∑–∞...', 'info');
      
      // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
      const fullPrompt = `–ü—Ä–æ–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ü vs –¢–ó:

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
${TEST_TZ}

–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
${TEST_KP}

–î–∞–π –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (0-100%) –∏ –∏—Ç–æ–≥–æ–≤—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
–§–æ—Ä–º–∞—Ç: JSON —Å –ø–æ–ª—è–º–∏ budget_fit, timeline_fit, tech_fit, overall_score, decision.`;

      const response = await fetch(`${BACKEND_URL}/api/llm/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt: fullPrompt,
          model: 'claude-3-5-sonnet-20240620',
          max_tokens: 400,
          temperature: 0.2
        })
      });

      if (!response.ok) {
        throw new Error(`Full cycle analysis failed: ${response.status}`);
      }

      const result = await response.json();
      this.log('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
      this.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.content.substring(0, 100)}...`, 'info');
      
      this.results.full_cycle = true;
      return result;

    } catch (error) {
      this.log(`–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: ${error.message}`, 'error');
      return null;
    }
  }

  async runAllTests() {
    this.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ö–ü –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞', 'info');
    this.log('='.repeat(60), 'info');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
    const backendOk = await this.checkBackendHealth();
    if (!backendOk) {
      this.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'error');
      return this.results;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend  
    const frontendOk = await this.checkFrontendHealth();
    if (!frontendOk) {
      this.log('‚ö†Ô∏è Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ UI —Ç–µ—Å—Ç–æ–≤', 'warning');
    }

    // 3. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    const uploadResult = await this.testFileUpload();
    if (!uploadResult) {
      this.log('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'error');
    }

    await this.sleep(2000);

    // 4. –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞
    const aiResult = await this.testAIAnalysis();
    if (!aiResult) {
      this.log('‚ùå AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'error');
    }

    await this.sleep(2000);

    // 5. –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    const fullCycleResult = await this.testFullCycle();
    if (!fullCycleResult) {
      this.log('‚ùå –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'error');
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    this.log('='.repeat(60), 'info');
    this.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'info');
    this.log('='.repeat(60), 'info');
    
    Object.entries(this.results).forEach(([test, passed]) => {
      const status = passed ? '‚úÖ PASSED' : '‚ùå FAILED';
      const testName = test.replace(/_/g, ' ').toUpperCase();
      this.log(`${testName}: ${status}`, passed ? 'success' : 'error');
    });

    const passedTests = Object.values(this.results).filter(Boolean).length;
    const totalTests = Object.keys(this.results).length;
    
    this.log('='.repeat(60), 'info');
    this.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`, 
      passedTests === totalTests ? 'success' : 'warning');
    
    if (this.results.real_ai_confirmed) {
      this.log('üí∞ –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω—ã–π AI API –∞–∫—Ç–∏–≤–µ–Ω - –¥–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è!', 'warning');
    }

    return this.results;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  const tester = new KPAnalyzerTester();
  tester.runAllTests()
    .then(results => {
      const success = Object.values(results).every(Boolean);
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

module.exports = KPAnalyzerTester;