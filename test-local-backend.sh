#!/bin/bash

echo "üß™ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND"
echo "================================="
echo ""

cd backend

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose.monolith.yml down --remove-orphans 2>/dev/null || true

echo ""
echo "üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π docker-compose –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
cat > docker-compose.test.yml << 'EOF'
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_password
    ports:
      - "5432:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile.monolith
    ports:
      - "8000:8000"
    environment:
      POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      REDIS_URL: redis://:redis_password@redis:6379/0
      ALLOWED_ORIGINS: http://46.149.71.162:3000,http://46.149.71.162,http://localhost:3000,http://localhost:3001
      ADMIN_PASSWORD: admin123
      DEBUG: false
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  test_postgres_data:
  test_redis_data:
EOF

echo "üìã –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
echo "   POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro"
echo "   ALLOWED_ORIGINS: http://46.149.71.162:3000,http://46.149.71.162,http://localhost:3000,http://localhost:3001"
echo "   ADMIN_PASSWORD: admin123"

echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend..."
docker compose -f docker-compose.test.yml up -d --build

echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose.test.yml ps

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."

# Health Check
echo "üîç Health Check:"
HEALTH_RESPONSE=$(curl -s --max-time 10 "http://localhost:8000/health" 2>/dev/null || echo "TIMEOUT")
if echo "$HEALTH_RESPONSE" | grep -q "status"; then
    echo "   ‚úÖ Health Check: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
    HEALTH_OK=true
else
    echo "   ‚ùå Health Check: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
    HEALTH_OK=false
fi

echo ""
if [ "$HEALTH_OK" = true ]; then
    # CORS Preflight Test
    echo "üåê CORS Preflight Test:"
    CORS_RESPONSE=$(curl -s -i -X OPTIONS \
        -H "Origin: http://46.149.71.162:3000" \
        -H "Access-Control-Request-Method: POST" \
        -H "Access-Control-Request-Headers: Content-Type" \
        "http://localhost:8000/api/auth/login" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$CORS_RESPONSE" | grep -q "Access-Control-Allow-Origin"; then
        echo "   ‚úÖ CORS Preflight: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "   Origin header: $(echo "$CORS_RESPONSE" | grep "Access-Control-Allow-Origin")"
        CORS_OK=true
    else
        echo "   ‚ùå CORS Preflight: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"
        echo "   Headers: $(echo "$CORS_RESPONSE" | head -10)"
        CORS_OK=false
    fi
    
    echo ""
    # Authentication Test
    echo "üîê Authentication Test:"
    AUTH_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Origin: http://46.149.71.162:3000" \
        -d '{"email":"admin@devassist.pro","password":"admin123"}' \
        "http://localhost:8000/api/auth/login" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$AUTH_RESPONSE" | grep -q '"success":true' && echo "$AUTH_RESPONSE" | grep -q '"token":'; then
        echo "   ‚úÖ Authentication: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "   Token: $(echo "$AUTH_RESPONSE" | grep -o '"token":"[^"]*"' | head -c 30)..."
        AUTH_OK=true
    else
        echo "   ‚ùå Authentication: –ø—Ä–æ–±–ª–µ–º–∞"
        echo "   –û—Ç–≤–µ—Ç: $AUTH_RESPONSE"
        AUTH_OK=false
    fi
    
    echo ""
    # Registration Test
    echo "üë§ Registration Test:"
    REG_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Origin: http://46.149.71.162:3000" \
        -d '{"email":"test@example.com","password":"testpass123","full_name":"Test User","company":"Test Co"}' \
        "http://localhost:8000/api/auth/register" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$REG_RESPONSE" | grep -q '"success":true'; then
        echo "   ‚úÖ Registration: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        REG_OK=true
    else
        echo "   ‚ùå Registration: –ø—Ä–æ–±–ª–µ–º–∞"
        echo "   –û—Ç–≤–µ—Ç: $REG_RESPONSE"
        REG_OK=false
    fi
    
else
    CORS_OK=false
    AUTH_OK=false
    REG_OK=false
fi

echo ""
echo "üìã –õ–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
if [ "$HEALTH_OK" != true ]; then
    echo "Backend logs:"
    docker compose -f docker-compose.test.yml logs app | tail -20
fi

echo ""
echo "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –õ–û–ö–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:"
echo "==================================="

if [ "$HEALTH_OK" = true ] && [ "$CORS_OK" = true ] && [ "$AUTH_OK" = true ]; then
    echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!"
    echo ""
    echo "‚úÖ Health Check: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ CORS: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
    echo "‚úÖ Authentication: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    if [ "$REG_OK" = true ]; then
        echo "‚úÖ Registration: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    echo ""
    echo "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞!"
    TESTS_PASSED=true
    
elif [ "$HEALTH_OK" = true ]; then
    echo "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•"
    echo ""
    echo "‚úÖ Health Check: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    if [ "$CORS_OK" != true ]; then
        echo "‚ùå CORS: —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    fi
    if [ "$AUTH_OK" != true ]; then
        echo "‚ùå Authentication: —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    fi
    TESTS_PASSED=false
    
else
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò!"
    echo ""
    echo "‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    TESTS_PASSED=false
fi

echo ""
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose.test.yml down -v
rm docker-compose.test.yml

echo ""
if [ "$TESTS_PASSED" = true ]; then
    echo "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ - –≥–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"
else
    echo "‚ùå –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∫—Ä–∏–ø—Ç–∞"
fi

cd ..