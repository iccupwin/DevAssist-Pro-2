# Multi-stage production Dockerfile for React Frontend
FROM node:20-alpine as builder

# Установка системных зависимостей
RUN apk add --no-cache git

# Установка рабочей директории
WORKDIR /app

# Копирование package files
COPY frontend/package*.json ./

# Установка зависимостей (используем npm install для исправления lock файла)
RUN npm install --omit=dev && npm cache clean --force

# Копирование исходного кода
COPY frontend/ .

# Сборка production версии
RUN npm run build

# Production stage с Nginx
FROM nginx:alpine

# Создание пользователя без root привилегий
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -G appuser

# Копирование собранного приложения
COPY --from=builder /app/build /usr/share/nginx/html

# Копирование кастомной конфигурации Nginx
COPY nginx.frontend.conf /etc/nginx/nginx.conf

# Создание директории для логов и установка прав
RUN mkdir -p /var/log/nginx && \
    touch /var/log/nginx/access.log /var/log/nginx/error.log && \
    chown -R appuser:appuser /var/log/nginx /var/cache/nginx /var/run && \
    chmod -R 755 /var/log/nginx

# Создание директории для pid файла
RUN mkdir -p /var/run/nginx && \
    chown -R appuser:appuser /var/run/nginx

# Переключение на непривилегированного пользователя
USER appuser

# Expose порт
EXPOSE 80

# Healthcheck для проверки работоспособности
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Запуск Nginx
CMD ["nginx", "-g", "daemon off;"]