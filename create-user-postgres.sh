#!/bin/bash

# DevAssist Pro - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL
# –°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

echo -e "${BLUE}üêò DevAssist Pro - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PostgreSQL${NC}"
echo ""

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
EMAIL="admin@devassist.pro"
PASSWORD="admin123456"
FULL_NAME="System Administrator"

print_info "–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
print_info "  Email: $EMAIL"
print_info "  –ò–º—è: $FULL_NAME"
echo ""

# 1. –ù–∞—Ö–æ–¥–∏–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
print_info "1. –ò—â–µ–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
PG_CONTAINER=$(docker ps --format "{{.Names}}" | grep -E "(postgres|db)" | head -1)

if [ -z "$PG_CONTAINER" ]; then
    print_error "‚úó PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

print_success "‚úì –ù–∞–π–¥–µ–Ω PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $PG_CONTAINER"
echo ""

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
print_info "2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_CONNECTED=false
DB_USER=""
DB_NAME=""

# –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
users=("devassist_user" "devassist" "postgres")
databases=("devassist_pro" "devassist" "postgres")

for user in "${users[@]}"; do
    for db in "${databases[@]}"; do
        if docker exec -i "$PG_CONTAINER" psql -U "$user" -d "$db" -c "SELECT 1;" >/dev/null 2>&1; then
            print_success "‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å=$user, –±–∞–∑–∞=$db"
            DB_USER="$user"
            DB_NAME="$db"
            DB_CONNECTED=true
            break 2
        fi
    done
done

if [ "$DB_CONNECTED" = false ]; then
    print_error "‚úó –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: docker compose restart"
    exit 1
fi

echo ""

# 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
print_info "3. –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users..."

CREATE_TABLE_SQL="
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    hashed_password VARCHAR(255) NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    is_active BOOLEAN DEFAULT true,
    is_superuser BOOLEAN DEFAULT false,
    is_verified BOOLEAN DEFAULT true,
    company VARCHAR(255),
    position VARCHAR(255),
    phone VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_is_superuser ON users(is_superuser);
"

if docker exec -i "$PG_CONTAINER" psql -U "$DB_USER" -d "$DB_NAME" -c "$CREATE_TABLE_SQL" >/dev/null 2>&1; then
    print_success "‚úì –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞"
else
    print_error "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É users"
    exit 1
fi

echo ""

# 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
print_info "4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è..."

# –ò—Å–ø–æ–ª—å–∑—É–µ–º bcrypt —á–µ—Ä–µ–∑ Python –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
BACKEND_CONTAINER="devassist_app_monolith"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
HASH_SCRIPT="
import sys
try:
    from passlib.context import CryptContext
    pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
    hashed = pwd_context.hash('$PASSWORD')
    print(hashed)
except ImportError:
    # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—é
    import hashlib
    import base64
    password = '$PASSWORD'
    salt = 'devassist_salt_2024'
    hashed = hashlib.pbkdf2_hmac('sha256', password.encode(), salt.encode(), 100000)
    print('pbkdf2_sha256\$100000\$devassist_salt_2024\$' + base64.b64encode(hashed).decode())
"

password_hash=$(docker exec -i "$BACKEND_CONTAINER" python3 -c "$HASH_SCRIPT" 2>/dev/null || echo "")

if [ -z "$password_hash" ]; then
    # –ü—Ä–æ—Å—Ç–æ–π fallback —Ö–µ—à
    password_hash='$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewAlzYIsGhL6VK5u'
    print_warning "‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ö–µ—à –ø–∞—Ä–æ–ª—è"
else
    print_success "‚úì –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω"
fi

echo ""

# 5. –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
print_info "5. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."

INSERT_USER_SQL="
INSERT INTO users (
    email, 
    hashed_password, 
    full_name, 
    is_active, 
    is_superuser, 
    is_verified,
    company,
    position,
    created_at,
    updated_at
) VALUES (
    '$EMAIL',
    '$password_hash',
    '$FULL_NAME',
    true,
    true,
    true,
    'DevAssist Pro',
    'System Administrator',
    NOW(),
    NOW()
) ON CONFLICT (email) DO UPDATE SET
    hashed_password = EXCLUDED.hashed_password,
    is_superuser = true,
    is_active = true,
    is_verified = true,
    full_name = EXCLUDED.full_name,
    company = EXCLUDED.company,
    position = EXCLUDED.position,
    updated_at = NOW();
"

if docker exec -i "$PG_CONTAINER" psql -U "$DB_USER" -d "$DB_NAME" -c "$INSERT_USER_SQL" >/dev/null 2>&1; then
    print_success "‚úì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
else
    print_error "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    docker exec -i "$PG_CONTAINER" psql -U "$DB_USER" -d "$DB_NAME" -c "$INSERT_USER_SQL"
    exit 1
fi

echo ""

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print_info "6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..."

CHECK_SQL="SELECT id, email, full_name, is_active, is_superuser, is_verified FROM users WHERE email = '$EMAIL';"

result=$(docker exec -i "$PG_CONTAINER" psql -U "$DB_USER" -d "$DB_NAME" -t -c "$CHECK_SQL" 2>/dev/null)

if [ -n "$result" ]; then
    print_success "‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"
    echo "$result"
else
    print_error "‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"
    exit 1
fi

echo ""

# 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
print_info "7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API..."

# –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
login_data="username=$EMAIL&password=$PASSWORD"

auth_response=$(curl -s -w "%{http_code}" -o /tmp/auth_test.txt \
    -X POST "http://localhost:8000/api/auth/login" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "$login_data" 2>/dev/null)

auth_code="${auth_response: -3}"

if [ "$auth_code" = "200" ]; then
    print_success "‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    auth_result=$(cat /tmp/auth_test.txt 2>/dev/null)
    if echo "$auth_result" | grep -q "access_token"; then
        print_success "‚úì –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
    fi
elif [ "$auth_code" = "422" ]; then
    print_info "‚ö† –û—à–∏–±–∫–∞ 422 - –ø–æ–ø—Ä–æ–±—É–µ–º JSON —Ñ–æ—Ä–º–∞—Ç"
    
    # –ü—Ä–æ–±—É–µ–º JSON —Ñ–æ—Ä–º–∞—Ç
    json_response=$(curl -s -w "%{http_code}" -o /tmp/auth_test2.txt \
        -X POST "http://localhost:8000/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\": \"$EMAIL\", \"password\": \"$PASSWORD\"}" 2>/dev/null)
    
    json_code="${json_response: -3}"
    
    if [ "$json_code" = "200" ]; then
        print_success "‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"
    else
        print_warning "‚ö† –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥—ã: $auth_code, $json_code)"
        auth_result=$(cat /tmp/auth_test.txt 2>/dev/null)
        auth_result2=$(cat /tmp/auth_test2.txt 2>/dev/null)
        echo "–û—Ç–≤–µ—Ç 1: $auth_result"
        echo "–û—Ç–≤–µ—Ç 2: $auth_result2"
    fi
else
    print_warning "‚ö† –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥: $auth_code"
    auth_result=$(cat /tmp/auth_test.txt 2>/dev/null)
    echo "–û—Ç–≤–µ—Ç API: $auth_result"
fi

rm -f /tmp/auth_test.txt /tmp/auth_test2.txt

echo ""

# 8. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print_success "üéâ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –°–û–ó–î–ê–ù –í –ë–ê–ó–ï –î–ê–ù–ù–´–•!"
echo ""
print_info "üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
print_info "   üåê URL: http://46.149.71.162/auth/login"
print_info "   üìß Email: $EMAIL"
print_info "   üîë –ü–∞—Ä–æ–ª—å: $PASSWORD"
echo ""
print_info "üîç –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:"
print_info "   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://46.149.71.162/auth/login"
print_info "   2. –í–≤–µ–¥–∏—Ç–µ email: $EMAIL"
print_info "   3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: $PASSWORD"
print_info "   4. –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ /admin –∏–ª–∏ /dashboard"
echo ""
print_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û:"
print_warning "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth/login –¥–ª—è –≤—Ö–æ–¥–∞, –ù–ï /admin"
print_warning "   ‚Ä¢ –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
print_warning "   ‚Ä¢ –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞"

echo ""
print_info "üîß –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è:"
print_info "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker compose restart"
print_info "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs"
print_info "   ‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: ./create-user-postgres.sh"