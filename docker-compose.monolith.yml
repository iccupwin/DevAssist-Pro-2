version: '3.8'

# Production-ready monolith deployment for Ubuntu 22.04
# Single command deployment: docker-compose -f docker-compose.monolith.yml up -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_prod
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devassist_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - devassist_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist_user -d devassist_pro"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password} --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - devassist_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend API Gateway (Combined Services)
  api-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devassist_backend_prod
    environment:
      - DATABASE_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password}@postgres:5432/devassist_pro
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CORS_ORIGINS=http://46.149.71.162,http://localhost
      - ENVIRONMENT=production
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
    volumes:
      - backend_uploads:/app/uploads
      - backend_reports:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devassist_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=http://46.149.71.162/api
        - REACT_APP_WS_URL=ws://46.149.71.162/ws
        - NODE_ENV=production
        - GENERATE_SOURCEMAP=false
    container_name: devassist_frontend_prod
    depends_on:
      - api-gateway
    networks:
      - devassist_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: devassist_nginx_prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      frontend:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
    networks:
      - devassist_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  devassist_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_reports:
    driver: local
  nginx_logs:
    driver: local