#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ DevAssist Pro –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. 10-–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞
2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é frontend-backend
3. Claude API —Ä–∞–±–æ—Ç—É
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON –æ—Ç–≤–µ—Ç—ã
"""

import requests
import json
import time
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://localhost:8000"
TEST_KP_CONTENT = """
–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –û–û–û "–¢–µ—Ö–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏"

–ü—Ä–µ–¥–º–µ—Ç: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ:
- –§—Ä–æ–Ω—Ç–µ–Ω–¥: React 18, TypeScript, Tailwind CSS
- –ë–µ–∫–µ–Ω–¥: Python 3.11, FastAPI, PostgreSQL
- –î–µ–ø–ª–æ–π–º–µ–Ω—Ç: Docker, Nginx, AWS

–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞:
- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ (5 –ª–µ—Ç –æ–ø—ã—Ç–∞)
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏–π (7 –ª–µ—Ç –æ–ø—ã—Ç–∞)
- 3 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ React (–æ—Ç 3 –ª–µ—Ç –æ–ø—ã—Ç–∞)
- 2 Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (–æ—Ç 4 –ª–µ—Ç –æ–ø—ã—Ç–∞)
- QA –∏–Ω–∂–µ–Ω–µ—Ä (3 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞)

–°—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏:
- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 2,800,000 —Ä—É–±–ª–µ–π —Å –ù–î–°
- –°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: 6 –º–µ—Å—è—Ü–µ–≤
- –ú–æ–¥–µ–ª—å –æ–ø–ª–∞—Ç—ã: 30% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, 70% –ø–æ —ç—Ç–∞–ø–∞–º

–≠—Ç–∞–ø—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
1. –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (6 –Ω–µ–¥–µ–ª—å) - 420,000 —Ä—É–±.
2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP (16 –Ω–µ–¥–µ–ª—å) - 1,680,000 —Ä—É–±.
3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞ (4 –Ω–µ–¥–µ–ª–∏) - 560,000 —Ä—É–±.
4. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ (2 –Ω–µ–¥–µ–ª–∏) - 140,000 —Ä—É–±.

–ì–∞—Ä–∞–Ω—Ç–∏–∏:
- –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: 12 –º–µ—Å—è—Ü–µ–≤
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 6 –º–µ—Å—è—Ü–µ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
- SLA: –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ 4 —á–∞—Å–∞, –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è 24 —á–∞—Å–∞

–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:
- Agile/Scrum –ø–æ–¥—Ö–æ–¥
- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
- –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
- Code review –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

TEST_TZ_CONTENT = """
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º:
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: React –∏–ª–∏ Vue.js
- –ù–∞–¥–µ–∂–Ω—ã–π –±–µ–∫–µ–Ω–¥: Python –∏–ª–∏ Node.js
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: TypeScript –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
- –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞
- –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ:
- –û–ø—ã—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç 3 –ª–µ—Ç
- –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

–ë—é–¥–∂–µ—Ç: –¥–æ 3,000,000 —Ä—É–±–ª–µ–π
–°—Ä–æ–∫: –Ω–µ –±–æ–ª–µ–µ 7 –º–µ—Å—è—Ü–µ–≤

–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ–¥–∞
- –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏ –º–∏–Ω–∏–º—É–º 80%
"""

def test_health_check():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend...")
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Backend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_basic_analysis():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ /api/llm/analyze"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    data = {
        "prompt": TEST_KP_CONTENT,
        "model": "claude-3-5-sonnet-20241022",
        "max_tokens": 2000,
        "temperature": 0.05
    }
    
    try:
        response = requests.post(f"{BACKEND_URL}/api/llm/analyze", 
                               json=data, timeout=120)
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
            print(f"   üìã –ú–æ–¥–µ–ª—å: {result.get('model', 'N/A')}")
            print(f"   üìù –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(str(result.get('content', '')))}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            content = result.get('content', '')
            if 'company_name' in content and 'compliance_score' in content:
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
                return True
            else:
                print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
        else:
            print(f"‚ùå –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def test_detailed_analysis():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ 10-–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    data = {
        "kp_content": TEST_KP_CONTENT,
        "tz_content": TEST_TZ_CONTENT,
        "model": "claude-3-5-sonnet-20241022",
        "max_tokens": 4000,
        "temperature": 0.1
    }
    
    try:
        start_time = time.time()
        response = requests.post(f"{BACKEND_URL}/api/llm/analyze-detailed", 
                               json=data, timeout=180)
        
        request_time = time.time() - start_time
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {request_time:.2f}s")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
            print(f"   üìã ID –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_id', 'N/A')}")
            print(f"   ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_used', 'N/A')}")
            print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 'N/A')}s")
            print(f"   üîÑ Fallback —Ä–µ–∂–∏–º: {result.get('fallback_mode', False)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            detailed = result.get('detailed_analysis', {})
            if detailed:
                print("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö 10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
                required_sections = [
                    "budget_compliance", "timeline_compliance", "technical_compliance",
                    "team_expertise", "functional_coverage", "security_quality",
                    "methodology_processes", "scalability_support", 
                    "communication_reporting", "additional_value"
                ]
                
                found_sections = [s for s in required_sections if s in detailed]
                missing_sections = [s for s in required_sections if s not in detailed]
                
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: {len(found_sections)}/10")
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ: {found_sections[:3]}..." if found_sections else "   ‚ùå –°–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                if missing_sections:
                    print(f"   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {missing_sections}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä
                overall_score = detailed.get('overall_score')
                if overall_score:
                    print(f"   üìà –û–±—â–∏–π —Å–∫–æ—Ä: {overall_score}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥—ã
                if 'executive_summary' in detailed:
                    summary = detailed['executive_summary'][:100]
                    print(f"   üìã –†–µ–∑—é–º–µ: {summary}...")
                
                return len(found_sections) >= 8  # –ú–∏–Ω–∏–º—É–º 8 –∏–∑ 10 —Å–µ–∫—Ü–∏–π
            else:
                print("‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
                
        else:
            print(f"‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—É—Å–ø–µ—à–µ–Ω: {response.status_code}")
            error_text = response.text
            print(f"   üìÑ –û—Ç–≤–µ—Ç: {error_text[:300]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏
            if "Claude API" in error_text:
                print("‚ÑπÔ∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å Claude API")
            elif "timeout" in error_text.lower():
                print("‚ÑπÔ∏è –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞")
            
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö endpoints"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints...")
    
    endpoints = [
        "/api/llm/providers",
        "/health"
    ]
    
    results = []
    for endpoint in endpoints:
        try:
            response = requests.get(f"{BACKEND_URL}{endpoint}", timeout=10)
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            print(f"   {status} {endpoint}: {response.status_code}")
            results.append(response.status_code == 200)
        except Exception as e:
            print(f"   ‚ùå {endpoint}: {e}")
            results.append(False)
    
    return all(results)

def validate_json_structure(data, required_fields):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON"""
    missing = [field for field in required_fields if field not in data]
    return len(missing) == 0, missing

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ DevAssist Pro")
    print("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend", test_health_check),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints", test_api_endpoints),
        ("–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", test_basic_analysis),
        ("–î–µ—Ç–∞–ª—å–Ω—ã–π 10-–∫—Ä–∏—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", test_detailed_analysis)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
            print(f"   {status}")
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")
        print("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)