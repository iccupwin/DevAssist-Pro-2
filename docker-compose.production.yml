# =============================================================================
# DevAssist Pro - Production Docker Compose
# Single container deployment with PostgreSQL and Redis as external services
# =============================================================================

version: '3.8'

services:
  # Main application container (Frontend + Backend + Nginx)
  devassist-pro:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: devassist-pro
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      - ENVIRONMENT=production
      - NODE_ENV=production
      - PYTHONPATH=/app/backend
    env_file:
      - .env.production
    volumes:
      # Data persistence
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      # Optional: External config override
      - ./config/production:/app/config:ro
    networks:
      - devassist-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-devassist_pro}
      POSTGRES_USER: ${POSTGRES_USER:-devassist}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - devassist-network
    ports:
      - "5432:5432"  # Remove in production if not needed externally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devassist}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
    volumes:
      - redis_data:/data
    networks:
      - devassist-network
    ports:
      - "6379:6379"  # Remove in production if not needed externally
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Monitoring with Prometheus (comment out if not needed)
  prometheus:
    image: prom/prometheus:latest
    container_name: devassist-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - devassist-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization (comment out if not needed)
  grafana:
    image: grafana/grafana:latest
    container_name: devassist-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - devassist-network
    profiles:
      - monitoring

# Networks
networks:
  devassist-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local