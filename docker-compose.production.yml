version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_prod
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - devassist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_prod
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - devassist-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend FastAPI Application
  app:
    build:
      context: ./backend
      dockerfile: Dockerfile.monolith
    container_name: devassist_app_prod
    environment:
      # Database Configuration
      POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      
      # Redis Configuration
      REDIS_URL: redis://:redis_password@redis:6379/0
      
      # Application Settings
      DEBUG: false
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      
      # CORS Settings for production
      ALLOWED_ORIGINS: http://46.149.71.162,https://46.149.71.162
      
      # File Upload Settings
      MAX_FILE_SIZE: 50MB
      SUPPORTED_FORMATS: pdf,docx,txt
      
      # AI Provider API Keys
      ANTHROPIC_API_KEY: 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
      OPENAI_API_KEY: ${OPENAI_API_KEY:-dummy_key}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-dummy_key}
      USE_REAL_API: true
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8000
      
    volumes:
      - app_data:/app/data
    networks:
      - devassist-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: devassist_frontend_prod
    environment:
      - REACT_APP_API_URL=http://46.149.71.162/api
      - REACT_APP_WS_URL=ws://46.149.71.162/ws
      - NODE_ENV=production
    volumes:
      - frontend_build:/usr/share/nginx/html:ro
    networks:
      - devassist-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: devassist_nginx_prod
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - frontend_build:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    networks:
      - devassist-network
    depends_on:
      frontend:
        condition: service_healthy
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  devassist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  frontend_build:
    driver: local
  nginx_logs:
    driver: local