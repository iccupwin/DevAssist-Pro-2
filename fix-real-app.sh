#!/bin/bash

# Fix Real App - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ DevAssist Pro
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ DevAssist Pro"

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose.production.yml down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.final.yml down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.simple.yml down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.simple-final.yml down --remove-orphans 2>/dev/null || true

# 2. –û—á–∏—Å—Ç–∫–∞ Docker
log "–û—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -f
docker builder prune -f

# 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ frontend
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cp frontend/nginx.production.conf frontend/nginx.frontend.conf

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend Dockerfile
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ backend Dockerfile..."
if [ ! -f "backend/Dockerfile.monolith" ]; then
    warning "–°–æ–∑–¥–∞–Ω–∏–µ Dockerfile.monolith –¥–ª—è backend..."
    cat > backend/Dockerfile.monolith << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    curl \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ requirements
COPY requirements*.txt ./

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
RUN mkdir -p /app/data /app/uploads /app/logs

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞
EXPOSE 8000

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]
EOF
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ main.py backend..."
if [ ! -f "backend/main.py" ]; then
    warning "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ main.py..."
    cat > backend/main.py << 'EOF'
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import os
import uvicorn

app = FastAPI(
    title="DevAssist Pro Backend",
    description="AI-powered portal for real estate developers",
    version="1.0.0"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
origins = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "DevAssist Pro Backend API", "status": "running"}

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "devassist-pro-backend",
        "version": "1.0.0"
    }

@app.get("/api/health")
async def api_health():
    return await health_check()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt..."
if [ ! -f "backend/requirements.txt" ]; then
    warning "–°–æ–∑–¥–∞–Ω–∏–µ requirements.txt..."
    cat > backend/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-dotenv==1.0.0
sqlalchemy==2.0.23
alembic==1.12.1
psycopg2-binary==2.9.7
redis==5.0.1
httpx==0.25.2
pydantic==2.5.0
pydantic-settings==2.0.3
anthropic==0.8.1
openai==1.3.7
aiofiles==23.2.1
pandas==2.1.3
openpyxl==3.1.2
PyPDF2==3.0.1
python-docx==1.1.0
Pillow==10.1.0
jinja2==3.1.2
EOF
fi

# 7. –°–±–æ—Ä–∫–∞ backend —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
log "–°–±–æ—Ä–∫–∞ backend..."
if ! docker compose -f docker-compose.real.yml build app; then
    error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ backend"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏
    warning "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ —Å–±–æ—Ä–∫–∏ backend..."
    docker compose -f docker-compose.real.yml build app --no-cache 2>&1 | tail -20
    exit 1
fi

# 8. –°–±–æ—Ä–∫–∞ frontend —Å –Ω–∞—Å—Ç–æ—è—â–∏–º React
log "–°–±–æ—Ä–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ React frontend..."
if ! docker compose -f docker-compose.real.yml build frontend; then
    error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏
    warning "–ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ —Å–±–æ—Ä–∫–∏ frontend..."
    docker compose -f docker-compose.real.yml build frontend --no-cache 2>&1 | tail -20
    exit 1
fi

# 9. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if ! docker compose -f docker-compose.real.yml up -d; then
    error "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    docker compose -f docker-compose.real.yml logs --tail=20
    exit 1
fi

# 10. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
log "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (90 —Å–µ–∫—É–Ω–¥)..."
for i in {1..18}; do
    echo -n "‚ñà"
    sleep 5
done
echo

# 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f docker-compose.real.yml ps

# 12. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π..."

# Backend
info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ backend..."
BACKEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/api/health || echo "000")
if [ "$BACKEND_CODE" = "200" ]; then
    log "‚úÖ Backend –º–æ–Ω–æ–ª–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $BACKEND_CODE)"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ backend
    BACKEND_INFO=$(curl -s http://46.149.71.162/api/health 2>/dev/null || echo '{"error":"no response"}')
    info "Backend –æ—Ç–≤–µ—Ç: $BACKEND_INFO"
else
    warning "‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $BACKEND_CODE)"
fi

# Frontend
info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
FRONTEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/ || echo "000")
if [ "$FRONTEND_CODE" = "200" ]; then
    log "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $FRONTEND_CODE)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π React –∞ –Ω–µ –∑–∞–≥–ª—É—à–∫–∞
    CONTENT=$(curl -s http://46.149.71.162/ | head -20)
    if echo "$CONTENT" | grep -q "DevAssist Pro" && echo "$CONTENT" | grep -q "root"; then
        log "‚úÖ –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!"
    else
        warning "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ –≤–º–µ—Å—Ç–æ React"
    fi
else
    warning "‚ö†Ô∏è Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $FRONTEND_CODE)"
fi

# 13. –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
if [ "$BACKEND_CODE" != "200" ] || [ "$FRONTEND_CODE" != "200" ]; then
    warning "üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º..."
    
    echo
    info "=== Backend –ª–æ–≥–∏ ==="
    docker compose -f docker-compose.real.yml logs app --tail=15
    
    echo
    info "=== Frontend –ª–æ–≥–∏ ==="
    docker compose -f docker-compose.real.yml logs frontend --tail=15
    
    echo
    info "=== PostgreSQL –ª–æ–≥–∏ ==="
    docker compose -f docker-compose.real.yml logs postgres --tail=5
fi

# 14. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo
log "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ DevAssist Pro:"
echo
info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
info "   üñ•Ô∏è  React Frontend: HTTP $FRONTEND_CODE"
info "   ‚öôÔ∏è  FastAPI Backend: HTTP $BACKEND_CODE"
echo
info "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
info "   üîó –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:  http://46.149.71.162/"
info "   üîó Backend API:       http://46.149.71.162/api/health"
info "   üîó –ö–æ—Ä–Ω–µ–≤–æ–π API:      http://46.149.71.162/health"
echo

if [ "$BACKEND_CODE" = "200" ] && [ "$FRONTEND_CODE" = "200" ]; then
    log "üéä –£–°–ü–ï–•! –ù–∞—Å—Ç–æ—è—â–∏–π DevAssist Pro –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    log "üöÄ React frontend + FastAPI backend monolith –≥–æ—Ç–æ–≤—ã!"
    echo
    info "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:"
    info "   - –û—Ç–∫—Ä—ã—Ç—å http://46.149.71.162/ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º"
    info "   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —á–µ—Ä–µ–∑ http://46.149.71.162/api/"
    info "   - –ó–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ö–ü"
else
    warning "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º"
    info "üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    info "   docker compose -f docker-compose.real.yml logs app"
    info "   docker compose -f docker-compose.real.yml logs frontend"
fi

echo
info "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º:"
info "   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker compose -f docker-compose.real.yml down"
info "   üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker compose -f docker-compose.real.yml restart"
info "   üìä –°—Ç–∞—Ç—É—Å:    docker compose -f docker-compose.real.yml ps"