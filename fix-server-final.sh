#!/bin/bash

echo "üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–ê"
echo "================================"
echo ""
echo "üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ:"
echo "   ‚úÖ CORS –¥–ª—è IP 46.149.71.162:3000"
echo "   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"  
echo "   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
echo "   ‚úÖ Health checks –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "backend/docker-compose.monolith.yml" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

echo "üõë –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
cd backend
docker compose -f docker-compose.monolith.yml down --remove-orphans 2>/dev/null || true
docker stop $(docker ps -q) 2>/dev/null || true

echo ""
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞..."
docker system prune -f
docker container prune -f

echo ""
echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ docker-compose.monolith.yml..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
echo "üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
echo "   POSTGRES_URL: $(grep 'POSTGRES_URL:' docker-compose.monolith.yml | cut -d: -f2-)"
echo "   ALLOWED_ORIGINS: $(grep 'ALLOWED_ORIGINS:' docker-compose.monolith.yml | cut -d: -f2-)"
echo "   ADMIN_PASSWORD: $(grep 'ADMIN_PASSWORD:' docker-compose.monolith.yml | cut -d: -f2-)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º POSTGRES_URL
if grep -q "POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro" docker-compose.monolith.yml; then
    echo "   ‚úÖ POSTGRES_URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ POSTGRES_URL..."
    sed -i 's|POSTGRES_URL: .*|POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro|' docker-compose.monolith.yml
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º CORS –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
if grep -q "http://46.149.71.162:3000" docker-compose.monolith.yml; then
    echo "   ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"
else
    echo "   üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞..."
    sed -i 's|ALLOWED_ORIGINS: .*|ALLOWED_ORIGINS: http://46.149.71.162:3000,http://46.149.71.162,http://localhost:3000,http://localhost:3001|' docker-compose.monolith.yml
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º ADMIN_PASSWORD
if grep -q "ADMIN_PASSWORD: admin123" docker-compose.monolith.yml; then
    echo "   ‚úÖ ADMIN_PASSWORD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    echo "   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ADMIN_PASSWORD..."
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å # Authentication –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ—ë
    sed -i '/# Authentication/a\      ADMIN_PASSWORD: admin123' docker-compose.monolith.yml
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health checks
if grep -q "condition: service_healthy" docker-compose.monolith.yml; then
    echo "   ‚úÖ Health checks —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
else
    echo "   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ health checks..."
    # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∑–∞–º–µ–Ω–∞, —Å–¥–µ–ª–∞–µ–º –µ—ë –±–µ–∑–æ–ø–∞—Å–Ω–æ
    cp docker-compose.monolith.yml docker-compose.monolith.yml.backup
    
    # –î–æ–±–∞–≤–ª—è–µ–º health checks –∫ PostgreSQL
    sed -i '/- "5432:5432"/a\    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U devassist"]\n      interval: 30s\n      timeout: 10s\n      retries: 3' docker-compose.monolith.yml
    
    # –î–æ–±–∞–≤–ª—è–µ–º health checks –∫ Redis  
    sed -i '/- "6379:6379"/a\    healthcheck:\n      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]\n      interval: 30s\n      timeout: 10s\n      retries: 3' docker-compose.monolith.yml
    
    # –û–±–Ω–æ–≤–ª—è–µ–º depends_on –≤ app —Å–µ—Ä–≤–∏—Å–µ
    sed -i 's|depends_on:|depends_on:\n      postgres:\n        condition: service_healthy\n      redis:\n        condition: service_healthy|' docker-compose.monolith.yml
    sed -i '/postgres:/,+1d' docker-compose.monolith.yml  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É postgres:
    sed -i '/redis:/,+1d' docker-compose.monolith.yml     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É redis:
fi

echo ""
echo "üìã –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
grep -A 2 -B 1 "POSTGRES_URL\|ALLOWED_ORIGINS\|ADMIN_PASSWORD" docker-compose.monolith.yml

echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ backend..."

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—ç—Ç–∞–ø–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
echo "   üóÑÔ∏è  –ó–∞–ø—É—Å–∫ PostgreSQL..."
docker compose -f docker-compose.monolith.yml up -d postgres
sleep 15

echo "   üî¥ –ó–∞–ø—É—Å–∫ Redis..."
docker compose -f docker-compose.monolith.yml up -d redis  
sleep 10

echo "   üêç –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Backend..."
docker compose -f docker-compose.monolith.yml up -d --build app
sleep 45

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose -f docker-compose.monolith.yml ps

echo ""
echo "üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
echo "üóÑÔ∏è  PostgreSQL:"
PG_CONTAINER=$(docker ps -q --filter "name=postgres")
if [ -n "$PG_CONTAINER" ] && docker exec $PG_CONTAINER pg_isready -U devassist 2>/dev/null; then
    echo "   ‚úÖ PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    PG_OK=true
else
    echo "   ‚ùå PostgreSQL: –ø—Ä–æ–±–ª–µ–º–∞"
    PG_OK=false
fi

echo "üî¥ Redis:"
REDIS_CONTAINER=$(docker ps -q --filter "name=redis")
if [ -n "$REDIS_CONTAINER" ] && docker exec $REDIS_CONTAINER redis-cli --raw incr ping 2>/dev/null; then
    echo "   ‚úÖ Redis: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    REDIS_OK=true
else
    echo "   ‚ùå Redis: –ø—Ä–æ–±–ª–µ–º–∞"
    REDIS_OK=false
fi

echo "üêç Backend Application:"
APP_CONTAINER=$(docker ps -q --filter "name=app")
if [ -n "$APP_CONTAINER" ]; then
    echo "   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –∑–∞–ø—É—â–µ–Ω ($APP_CONTAINER)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    APP_LOGS=$(docker logs $APP_CONTAINER 2>&1 | tail -10)
    if echo "$APP_LOGS" | grep -q "Application startup complete"; then
        echo "   ‚úÖ Backend: –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        APP_STARTED=true
    elif echo "$APP_LOGS" | grep -q "Could not parse SQLAlchemy URL\|–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê"; then
        echo "   ‚ùå Backend: –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"
        echo "   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏: $(echo "$APP_LOGS" | tail -3)"
        APP_STARTED=false
    else
        echo "   ‚è≥ Backend: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        APP_STARTED=unknown
    fi
else
    echo "   ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    APP_STARTED=false
fi

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ backend –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
if [ "$APP_STARTED" = "unknown" ]; then
    echo ""
    echo "‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend (30 —Å–µ–∫)..."
    sleep 30
fi

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Endpoints..."

# Health Check
HEALTH_RESPONSE=$(curl -s --max-time 10 "http://localhost:8000/health" 2>/dev/null || echo "TIMEOUT")
if echo "$HEALTH_RESPONSE" | grep -q "status.*healthy"; then
    echo "   ‚úÖ Health Check: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "      $(echo "$HEALTH_RESPONSE" | cut -c1-60)..."
    HEALTH_OK=true
else
    echo "   ‚ùå Health Check: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    echo "      –û—Ç–≤–µ—Ç: $HEALTH_RESPONSE"
    HEALTH_OK=false
fi

if [ "$HEALTH_OK" = true ]; then
    # CORS Test
    echo "üåê CORS Test:"
    CORS_RESPONSE=$(curl -s -i -X OPTIONS \
        -H "Origin: http://46.149.71.162:3000" \
        -H "Access-Control-Request-Method: POST" \
        -H "Access-Control-Request-Headers: Content-Type" \
        "http://localhost:8000/api/auth/login" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$CORS_RESPONSE" | grep -qi "access-control-allow-origin.*46.149.71.162"; then
        echo "   ‚úÖ CORS: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        CORS_OK=true
    else
        echo "   ‚ùå CORS: –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"
        echo "      Headers: $(echo "$CORS_RESPONSE" | grep -i "access-control" | head -2)"
        CORS_OK=false
    fi
    
    # Authentication Test
    echo "üîê Authentication Test:"
    AUTH_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Origin: http://46.149.71.162:3000" \
        -d '{"email":"admin@devassist.pro","password":"admin123"}' \
        "http://localhost:8000/api/auth/login" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$AUTH_RESPONSE" | grep -q '"success":true' && echo "$AUTH_RESPONSE" | grep -q '"token":'; then
        echo "   ‚úÖ Authentication: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "      –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin@devassist.pro"
        echo "      –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: $(echo "$AUTH_RESPONSE" | grep -o '"token":"[^"]*"' | head -c 25)..."
        AUTH_OK=true
    else
        echo "   ‚ùå Authentication: –ø—Ä–æ–±–ª–µ–º–∞"
        echo "      –û—Ç–≤–µ—Ç: $(echo "$AUTH_RESPONSE" | head -c 100)..."
        AUTH_OK=false
    fi
    
    # External Access Test
    echo "üåç External Access Test:"
    EXT_RESPONSE=$(curl -s --max-time 10 "http://46.149.71.162:8000/health" 2>/dev/null || echo "TIMEOUT")
    if echo "$EXT_RESPONSE" | grep -q "status.*healthy"; then
        echo "   ‚úÖ –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        EXT_OK=true
    else
        echo "   ‚ùå –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        EXT_OK=false
    fi
    
else
    CORS_OK=false
    AUTH_OK=false
    EXT_OK=false
fi

echo ""
echo "üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "====================="

if [ "$PG_OK" = true ] && [ "$REDIS_OK" = true ] && [ "$HEALTH_OK" = true ] && [ "$CORS_OK" = true ] && [ "$AUTH_OK" = true ] && [ "$EXT_OK" = true ]; then
    echo "üéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•! –í–°–ï –†–ê–ë–û–¢–ê–ï–¢!"
    echo ""
    echo "‚úÖ PostgreSQL: –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ Backend: –∑–∞–ø—É—â–µ–Ω –∏ –∑–¥–æ—Ä–æ–≤"
    echo "‚úÖ CORS: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è frontend"
    echo "‚úÖ Authentication: –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: –¥–æ—Å—Ç—É–ø–µ–Ω"
    echo ""
    echo "üåê –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:"
    echo "   Frontend:     http://46.149.71.162:3000"
    echo "   Backend API:  http://46.149.71.162:8000"
    echo "   API Docs:     http://46.149.71.162:8000/docs"
    echo "   Health Check: http://46.149.71.162:8000/health"
    echo ""
    echo "üë§ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
    echo "   Email:    admin@devassist.pro"
    echo "   Password: admin123"
    echo ""
    echo "üéä FRONTEND –¢–ï–ü–ï–†–¨ –°–ú–û–ñ–ï–¢:"
    echo "   ‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo "   ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo "   ‚Ä¢ –î–µ–ª–∞—Ç—å –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ CORS –æ—à–∏–±–æ–∫"
    echo "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
elif [ "$HEALTH_OK" = true ]; then
    echo "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
    echo ""
    echo "‚úÖ Backend API: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    if [ "$CORS_OK" != true ]; then
        echo "‚ùå CORS: —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
    if [ "$AUTH_OK" != true ]; then
        echo "‚ùå Authentication: –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º"
    fi
    if [ "$EXT_OK" != true ]; then
        echo "‚ùå –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    fi
    
else
    echo "‚ùå –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´!"
    echo ""
    if [ "$PG_OK" != true ]; then
        echo "‚ùå PostgreSQL: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    if [ "$REDIS_OK" != true ]; then
        echo "‚ùå Redis: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"  
    fi
    if [ "$HEALTH_OK" != true ]; then
        echo "‚ùå Backend: –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    echo ""
    echo "üîß –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º:"
    echo "   docker compose -f docker-compose.monolith.yml logs"
    echo "   docker compose -f docker-compose.monolith.yml logs app | tail -30"
    echo "   docker compose -f docker-compose.monolith.yml ps"
fi

echo ""
echo "üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–ï–†–û–ú:"
echo "   –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: docker compose -f docker-compose.monolith.yml logs"
echo "   –õ–æ–≥–∏ backend:       docker compose -f docker-compose.monolith.yml logs app"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:         docker compose -f docker-compose.monolith.yml restart"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:          docker compose -f docker-compose.monolith.yml down"
echo "   –°—Ç–∞—Ç—É—Å:             docker compose -f docker-compose.monolith.yml ps"

cd ..