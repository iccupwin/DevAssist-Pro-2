#!/bin/bash

# DevAssist Pro - Quick Deploy –±–µ–∑ frontend build
# –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å frontend build –∏—Å–ø–æ–ª—å–∑—É—è development –≤–µ—Ä—Å–∏—é

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[QUICK]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ docker-compose –±–µ–∑ frontend build
create_simple_compose() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    cat > docker-compose.simple.yml << 'EOF'
# DevAssist Pro - Simplified deployment –±–µ–∑ frontend build

services:
  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_simple
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # –ö–µ—à Redis
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_simple
    command: redis-server --requirepass redis_password
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.monolith
    container_name: devassist_backend_simple
    ports:
      - "8000:8000"
    environment:
      POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      REDIS_URL: redis://:redis_password@redis:6379/0
      DEBUG: false
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8080
      MAX_FILE_SIZE: 100MB
      SUPPORTED_FORMATS: pdf,docx,txt
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-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}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_api_key_here}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-your_google_api_key_here}
      USE_REAL_API: true
      HOST: 0.0.0.0
      PORT: 8000
    volumes:
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

networks:
  devassist_network:
    driver: bridge
EOF

    log_success "–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ backend
deploy_backend_only() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ backend —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose -f docker-compose.simple.yml down --remove-orphans 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.simple.yml up -d
    
    log_success "Backend —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ frontend –≤ development —Ä–µ–∂–∏–º–µ
start_frontend_dev() {
    log_info "–ó–∞–ø—É—Å–∫ frontend –≤ development —Ä–µ–∂–∏–º–µ..."
    
    cd frontend
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
    if [ ! -f "package.json" ]; then
        log_error "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ frontend!"
        cd ..
        return 1
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –µ—Å–ª–∏ node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if [ ! -d "node_modules" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend..."
        npm install
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è frontend
    cat > .env << 'EOF'
REACT_APP_API_URL=http://localhost:8000
REACT_APP_WS_URL=ws://localhost:8000
REACT_APP_ENVIRONMENT=development
REACT_APP_USE_REAL_API=true
EOF

    log_info "Frontend –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://localhost:3000"
    log_info "Backend API –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:8000"
    log_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: cd frontend && npm start"
    
    cd ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    echo ""
    echo "=== Backend —Å–µ—Ä–≤–∏—Å—ã ==="
    docker-compose -f docker-compose.simple.yml ps
    
    echo ""
    echo "=== Health checks ==="
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if docker exec devassist_postgres_simple pg_isready -U devassist > /dev/null 2>&1; then
        log_success "PostgreSQL: –≥–æ—Ç–æ–≤"
    else
        log_error "PostgreSQL: –Ω–µ –≥–æ—Ç–æ–≤"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker exec devassist_redis_simple redis-cli --no-auth-warning -a redis_password ping > /dev/null 2>&1; then
        log_success "Redis: –≥–æ—Ç–æ–≤"
    else
        log_error "Redis: –Ω–µ –≥–æ—Ç–æ–≤"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend API
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        log_success "Backend API: –≥–æ—Ç–æ–≤"
    else
        log_error "Backend API: –Ω–µ –≥–æ—Ç–æ–≤"
    fi
    
    echo ""
    echo "=== –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã ==="
    echo "üöÄ Backend API: http://localhost:8000"
    echo "üìñ API Docs: http://localhost:8000/docs"
    echo "üîç Health: http://localhost:8000/health"
    echo ""
    echo "–î–ª—è –∑–∞–ø—É—Å–∫–∞ frontend:"
    echo "cd frontend && npm start"
    echo "Frontend –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:3000"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose -f docker-compose.simple.yml down
    log_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
show_logs() {
    docker-compose -f docker-compose.simple.yml logs -f
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$1" in
        "deploy")
            create_simple_compose
            deploy_backend_only
            start_frontend_dev
            check_status
            ;;
        "status")
            check_status
            ;;
        "stop")
            stop_services
            ;;
        "logs")
            show_logs
            ;;
        "frontend")
            start_frontend_dev
            ;;
        *)
            echo "DevAssist Pro - Quick Deploy Script"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {–∫–æ–º–∞–Ω–¥–∞}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  deploy    - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (backend + –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è frontend)"
            echo "  status    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
            echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  frontend  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å frontend –¥–ª—è development"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞:"
            echo "  $0 deploy"
            echo "  cd frontend && npm start  # –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"
            echo ""
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"