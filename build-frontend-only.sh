#!/bin/bash

# Build Frontend Only - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ frontend —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ frontend —Ç–æ–ª—å–∫–æ"

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏..."
MEMORY_KB=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
MEMORY_MB=$((MEMORY_KB / 1024))
log "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: ${MEMORY_MB} MB"

if [ "$MEMORY_MB" -lt 1500 ]; then
    warning "‚ö†Ô∏è –ú–∞–ª–æ –ø–∞–º—è—Ç–∏ ($MEMORY_MB MB). –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏..."
    MEMORY_LIMIT=512
else
    log "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–±–æ—Ä–∫–∏"
    MEMORY_LIMIT=1024
fi

# 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏..."
docker compose -f docker-compose.production.yml down --remove-orphans || true

# 3. –û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞
log "–û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
docker system prune -f
docker builder prune -f

# 4. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ Dockerfile –¥–ª—è –Ω–∏–∑–∫–æ–π –ø–∞–º—è—Ç–∏
log "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Dockerfile..."
cat > frontend/Dockerfile.lowmem << EOF
# Low Memory Dockerfile for DevAssist Pro Frontend
FROM node:18-alpine AS builder

WORKDIR /app

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –¥–ª—è Node.js
ENV NODE_OPTIONS="--max-old-space-size=${MEMORY_LIMIT}"
ENV CI=true

# –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ package files
COPY package*.json ./

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
RUN npm ci --silent --production=false --no-audit --no-fund

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
COPY . .

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è production
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_API_URL=http://46.149.71.162/api
ENV REACT_APP_WS_URL=ws://46.149.71.162/ws

# –°–±–æ—Ä–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
RUN npm run build

# Production stage
FROM nginx:1.25-alpine AS production
COPY nginx.frontend.conf /etc/nginx/conf.d/default.conf
COPY --from=builder /app/build /usr/share/nginx/html
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html
EXPOSE 80
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ || exit 1
CMD ["nginx", "-g", "daemon off;"]
EOF

# 5. –°–±–æ—Ä–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
log "–°–±–æ—Ä–∫–∞ frontend —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏ ($MEMORY_LIMIT MB)..."
cd frontend

if docker build -f Dockerfile.lowmem -t devassist-frontend-lowmem .; then
    log "‚úÖ Frontend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
    
    # 6. –ó–∞–º–µ–Ω–∞ –≤ docker-compose –≤—Ä–µ–º–µ–Ω–Ω–æ
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ docker-compose –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞..."
    cd ..
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π docker-compose
    cp docker-compose.production.yml docker-compose.production.yml.backup
    
    sed 's|build:|#build:|g; s|context: ./frontend|#context: ./frontend|g; s|dockerfile: Dockerfile.prod|#dockerfile: Dockerfile.prod|g' docker-compose.production.yml > docker-compose.temp.yml
    sed 's|nginx:|nginx:\n    image: devassist-frontend-lowmem|g' docker-compose.temp.yml > docker-compose.production.yml.new
    
    # 7. –ó–∞–ø—É—Å–∫ —Å –Ω–æ–≤—ã–º –æ–±—Ä–∞–∑–æ–º
    log "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker compose -f docker-compose.production.yml.new up -d
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞
    sleep 30
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞..."
    docker compose -f docker-compose.production.yml.new ps
    
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/ || echo "000")
    if [ "$HTTP_CODE" = "200" ]; then
        log "‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $HTTP_CODE)"
        log "üåê DevAssist Pro: http://46.149.71.162/"
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π docker-compose
        mv docker-compose.production.yml.backup docker-compose.production.yml
        rm -f docker-compose.production.yml.new docker-compose.temp.yml
        
        log "‚ú® Frontend —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"
    else
        error "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $HTTP_CODE)"
        mv docker-compose.production.yml.backup docker-compose.production.yml
        exit 1
    fi
    
else
    error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend"
    cd ..
    exit 1
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
rm -f frontend/Dockerfile.lowmem

log "üéâ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"