#!/bin/bash
# ===========================================
# DevAssist Pro - Fullstack Testing Script
# ===========================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

success() {
    echo -e "${GREEN}[PASS]${NC} $1"
}

error() {
    echo -e "${RED}[FAIL]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
check_url() {
    local url=$1
    local description=$2
    local expected_status=${3:-200}
    
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º $description: $url"
    
    if response=$(curl -s -w "HTTPSTATUS:%{http_code}" "$url"); then
        http_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
        response_body=$(echo "$response" | sed 's/HTTPSTATUS:[0-9]*$//')
        
        if [ "$http_code" -eq "$expected_status" ]; then
            success "$description —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $http_code)"
            return 0
        else
            error "$description –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: HTTP $http_code"
            return 1
        fi
    else
        error "$description –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoint
check_api() {
    local endpoint=$1
    local description=$2
    
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º API: $endpoint"
    
    if response=$(curl -s -f "http://localhost:80$endpoint"); then
        success "API $description —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "Response: $(echo "$response" | head -c 100)..."
        return 0
    else
        error "API $description –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

log "üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DevAssist Pro Fullstack..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞
if ! docker-compose -f docker-compose.fullstack.yml ps | grep -q "Up"; then
    error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./start-fullstack.sh"
    exit 1
fi

# –°—á–µ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
total_tests=0
passed_tests=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
test_result() {
    total_tests=$((total_tests + 1))
    if [ $1 -eq 0 ]; then
        passed_tests=$((passed_tests + 1))
    fi
}

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend ==="

# Frontend –ø—Ä–æ–≤–µ—Ä–∫–∏
check_url "http://localhost:80" "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Frontend"
test_result $?

check_url "http://localhost:80/manifest.json" "PWA Manifest"
test_result $?

check_url "http://localhost:80/static/css" "CSS Assets" 404  # –û–∂–∏–¥–∞–µ–º 404 —Ç.–∫. —Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
test_result $?

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Health Checks ==="

# Health checks
check_url "http://localhost:80/health" "System Health Check"
test_result $?

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API ==="

# API –ø—Ä–æ–≤–µ—Ä–∫–∏
check_api "/api/docs" "API Documentation"
test_result $?

check_api "/api/health" "Backend Health"
test_result $?

check_api "/api/llm/providers" "AI Providers Status"
test_result $?

check_api "/api/analytics/dashboard" "Analytics Dashboard"
test_result $?

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Database ==="

# Database –ø—Ä–æ–≤–µ—Ä–∫–∏
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL..."
if docker-compose -f docker-compose.fullstack.yml exec -T postgres pg_isready -U devassist -d devassist_pro > /dev/null 2>&1; then
    success "PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    test_result 0
else
    error "PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    test_result 1
fi

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis ==="

# Redis –ø—Ä–æ–≤–µ—Ä–∫–∏
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis..."
if docker-compose -f docker-compose.fullstack.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
    success "Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    test_result 0
else
    error "Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    test_result 1
fi

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker Containers ==="

# Container health checks
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
containers=$(docker-compose -f docker-compose.fullstack.yml ps --services)

for container in $containers; do
    status=$(docker-compose -f docker-compose.fullstack.yml ps "$container" | tail -n +2 | awk '{print $3}')
    if [[ "$status" == *"Up"* ]]; then
        success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container: $status"
        test_result 0
    else
        error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container: $status"
        test_result 1
    fi
done

echo ""
log "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ File Upload ==="

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
test_file="/tmp/test_upload.txt"
echo "–¢–µ—Å—Ç–æ–≤–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤" > "$test_file"

log "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞..."
if response=$(curl -s -X POST -F "file=@$test_file" "http://localhost:80/api/kp-analyzer/full-analysis"); then
    if echo "$response" | grep -q '"success":true'; then
        success "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        test_result 0
    else
        warning "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É"
        echo "Response: $(echo "$response" | head -c 200)..."
        test_result 1
    fi
else
    error "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    test_result 1
fi

# –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
rm -f "$test_file"

echo ""
log "=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ==="

echo ""
if [ $passed_tests -eq $total_tests ]; then
    success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ($passed_tests/$total_tests)"
    echo ""
    echo "‚úÖ DevAssist Pro Fullstack —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    echo ""
    echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
    echo "   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:    http://localhost:80"
    echo "   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:    http://localhost:80/api/docs"
    echo "   ‚Ä¢ Health Check:        http://localhost:80/health"
    exit 0
else
    failed_tests=$((total_tests - passed_tests))
    error "‚ö†Ô∏è  –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏: $passed_tests/$total_tests –ø—Ä–æ–π–¥–µ–Ω–æ, $failed_tests –ø—Ä–æ–≤–∞–ª–µ–Ω–æ"
    echo ""
    warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   docker-compose -f docker-compose.fullstack.yml logs -f"
    echo ""
    exit 1
fi