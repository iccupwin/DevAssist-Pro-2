#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã - –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –£–õ–£–ß–®–ï–ù–ò–ô
"""
import asyncio
import sys
import tempfile
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º backend –∫ path
sys.path.append(str(Path(__file__).parent / "backend"))

async def test_enhanced_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ DevAssist Pro")
    print("=" * 60)
    
    all_tests_passed = True
    test_results = {}
    
    # ===== 1. –¢–ï–°–¢ AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò =====
    print("\n1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò...")
    try:
        from backend.services.documents.core.enhanced_ai_analyzer import enhanced_analyzer
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            test_content = """
            –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
            –û–û–û "–¢–µ—Å—Ç–°—Ç—Ä–æ–π"
            
            –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 15,500,000 —Ä—É–±–ª–µ–π
            –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 45 –Ω–µ–¥–µ–ª—å
            
            –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç:
            1. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 800,000 —Ä—É–±. (4 –Ω–µ–¥–µ–ª–∏)
            2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - 1,200,000 —Ä—É–±. (8 –Ω–µ–¥–µ–ª—å)
            3. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - 10,000,000 —Ä—É–±. (25 –Ω–µ–¥–µ–ª—å)
            4. –û—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - 2,500,000 —Ä—É–±. (6 –Ω–µ–¥–µ–ª—å)
            5. –°–¥–∞—á–∞ –æ–±—ä–µ–∫—Ç–∞ - 1,000,000 —Ä—É–±. (2 –Ω–µ–¥–µ–ª–∏)
            
            –ì–∞—Ä–∞–Ω—Ç–∏—è: 36 –º–µ—Å—è—Ü–µ–≤ –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç
            –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: 25% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, 75% –ø–æ—ç—Ç–∞–ø–Ω–æ
            
            –ö–æ–º–ø–∞–Ω–∏—è –∏–º–µ–µ—Ç –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ISO 9001 –∏ ISO 14001.
            –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: –±–æ–ª–µ–µ 15 –ª–µ—Ç, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –±–æ–ª–µ–µ 200 –ø—Ä–æ–µ–∫—Ç–æ–≤.
            """
            f.write(test_content)
            test_file_path = f.name
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
        result = await enhanced_analyzer.analyze_document_enhanced(Path(test_file_path), "kp")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert result["status"] == "completed"
        assert "overall_score" in result
        assert "business_analysis" in result
        assert "recommendations" in result
        assert result["overall_score"] > 0
        
        print(f"   ‚úÖ AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   üìä –û–±—â–∏–π –±–∞–ª–ª: {result['overall_score']}/100")
        print(f"   üéØ –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result.get('risk_level', 'unknown')}")
        print(f"   ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π AI: {result.get('using_real_ai', False)}")
        
        test_results["ai_integration"] = "‚úÖ PASSED"
        
        # –û—á–∏—Å—Ç–∫–∞
        Path(test_file_path).unlink()
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        test_results["ai_integration"] = f"‚ùå FAILED: {str(e)}"
        all_tests_passed = False
    
    # ===== 2. –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¶–ò–ò =====
    print("\n2Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –í–ê–õ–ò–î–ê–¶–ò–ò...")
    try:
        from backend.core.validation import file_validator, validate_request_data
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ "—Ñ–∞–π–ª–∞" (–º–æ–∫ –æ–±—ä–µ–∫—Ç–∞)
        class MockFile:
            def __init__(self, filename, content_type, size, content):
                self.filename = filename
                self.content_type = content_type
                self.size = size
                self._content = content
                self._position = 0
            
            async def seek(self, position):
                self._position = position
            
            async def read(self, size=None):
                if size is None:
                    return self._content[self._position:]
                else:
                    return self._content[self._position:self._position + size]
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞
        valid_file = MockFile("test.pdf", "application/pdf", 10240, b"%PDF-1.4\ntest content")
        is_valid, errors = await file_validator.validate_upload_file(valid_file)
        assert is_valid, f"Valid file rejected: {errors}"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        invalid_file = MockFile("test.exe", "application/x-executable", 5000, b"MZ executable")
        is_valid, errors = await file_validator.validate_upload_file(invalid_file)
        assert not is_valid, "Invalid file accepted"
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        valid_request = {"document_id": "test123", "analysis_type": "standard"}
        validation_errors = validate_request_data(valid_request, "kp_analysis")
        assert len(validation_errors) == 0, f"Valid request rejected: {validation_errors}"
        
        print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        test_results["validation"] = "‚úÖ PASSED"
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
        test_results["validation"] = f"‚ùå FAILED: {str(e)}"
        all_tests_passed = False
    
    # ===== 3. –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò =====
    print("\n3Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò...")
    try:
        from backend.core.security import PasswordValidator, JWTManager, RateLimiter
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
        is_valid, errors = PasswordValidator.validate_password("Test123!")
        assert is_valid, f"Valid password rejected: {errors}"
        
        is_valid, errors = PasswordValidator.validate_password("123")
        assert not is_valid, "Weak password accepted"
        
        # –¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
        password = "TestPassword123!"
        hashed = PasswordValidator.hash_password(password)
        assert PasswordValidator.verify_password(password, hashed), "Password verification failed"
        
        # –¢–µ—Å—Ç JWT —Ç–æ–∫–µ–Ω–æ–≤
        user_data = {"user_id": 1, "username": "testuser", "role": "user"}
        token = JWTManager.create_access_token(user_data)
        assert token, "JWT token creation failed"
        
        decoded = JWTManager.verify_token(token)
        assert decoded["user_id"] == 1, "JWT token verification failed"
        
        # –¢–µ—Å—Ç rate limiting
        rate_limiter = RateLimiter()
        test_ip = "192.168.1.100"
        
        # –ü–µ—Ä–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        for i in range(5):
            assert rate_limiter.is_allowed(test_ip), f"Request {i} blocked incorrectly"
        
        print(f"   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   ‚úÖ JWT —Ç–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è")  
        print(f"   ‚úÖ Rate limiting —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        
        test_results["security"] = "‚úÖ PASSED"
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {str(e)}")
        test_results["security"] = f"‚ùå FAILED: {str(e)}"
        all_tests_passed = False
    
    # ===== 4. –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====
    print("\n4Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê...")
    try:
        from backend.core.monitoring import SystemMonitor, PerformanceTracker, HealthChecker
        
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        system_monitor = SystemMonitor()
        system_metrics = system_monitor.get_system_metrics()
        
        assert system_metrics.cpu_percent >= 0, "Invalid CPU metrics"
        assert system_metrics.memory_percent >= 0, "Invalid memory metrics" 
        assert system_metrics.uptime_seconds >= 0, "Invalid uptime metrics"
        
        # –¢–µ—Å—Ç —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_tracker = PerformanceTracker()
        test_request_id = "test_123"
        
        performance_tracker.start_request(test_request_id, "test_endpoint")
        performance_tracker.end_request(test_request_id, "test_endpoint", 0.5, 200)
        
        avg_time = performance_tracker.get_average_response_time("test_endpoint")
        assert avg_time > 0, "Performance tracking failed"
        
        # –¢–µ—Å—Ç health checker
        health_checker = HealthChecker()
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î –≤ —Ç–µ—Å—Ç–µ
        
        print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è")
        print(f"   ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
        print(f"   ‚úÖ Health checker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        test_results["monitoring"] = "‚úÖ PASSED"
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")
        test_results["monitoring"] = f"‚ùå FAILED: {str(e)}"
        all_tests_passed = False
    
    # ===== 5. –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò =====
    print("\n5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–©–ï–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò...")
    try:
        from backend.core.enhanced_app import system_readiness_check
        
        readiness_report = await system_readiness_check()
        
        assert "systems" in readiness_report
        assert "readiness_percentage" in readiness_report
        assert readiness_report["readiness_percentage"] > 0
        
        print(f"   ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {readiness_report['readiness_percentage']}%")
        print(f"   üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º: {len(readiness_report['systems'])}")
        
        test_results["integration"] = "‚úÖ PASSED"
        
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        test_results["integration"] = f"‚ùå FAILED: {str(e)}"
        all_tests_passed = False
    
    # ===== –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ =====
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    for test_name, result in test_results.items():
        print(f"{test_name.upper():<20} {result}")
    
    print(f"\n–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if all_tests_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã")
        print("‚úÖ MVP –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò")
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        failed_tests = [name for name, result in test_results.items() if "‚ùå" in result]
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(failed_tests)}")
    
    return all_tests_passed, test_results

if __name__ == "__main__":
    try:
        success, results = asyncio.run(test_enhanced_system())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)