#!/bin/bash
# DevAssist Pro Complete Test Runner
# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if ! command -v docker &> /dev/null; then
        log_warning "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if ! pg_isready -h localhost -p 5432 2>/dev/null; then
        log_warning "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã."
    fi
    
    log_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "backend/requirements.txt" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        cd ..
        log_success "Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    # Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ -f "frontend/package.json" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        cd frontend
        npm install
        npm install --save-dev @playwright/test
        cd ..
        log_success "Node.js –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
run_database_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ -f "backend/database_test.py" ]; then
        cd backend
        python database_test.py
        if [ $? -eq 0 ]; then
            log_success "–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
        else
            log_error "–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            return 1
        fi
        cd ..
    else
        log_warning "–¢–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç–æ–≤
run_backend_tests() {
    log_info "–ó–∞–ø—É—Å–∫ backend —Ç–µ—Å—Ç–æ–≤..."
    
    cd backend
    
    # Unit —Ç–µ—Å—Ç—ã
    if [ -d "tests/unit" ]; then
        log_info "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
        python -m pytest tests/unit/ -v
        if [ $? -ne 0 ]; then
            log_error "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            cd ..
            return 1
        fi
    fi
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    if [ -d "tests/integration" ]; then
        log_info "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
        python -m pytest tests/integration/ -v
        if [ $? -ne 0 ]; then
            log_error "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            cd ..
            return 1
        fi
    fi
    
    # E2E —Ç–µ—Å—Ç—ã
    if [ -d "tests/e2e" ]; then
        log_info "–ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤..."
        python -m pytest tests/e2e/ -v
        if [ $? -ne 0 ]; then
            log_error "E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            cd ..
            return 1
        fi
    fi
    
    cd ..
    log_success "Backend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç–æ–≤
run_frontend_tests() {
    log_info "–ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç–æ–≤..."
    
    cd frontend
    
    # TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript..."
    npm run type-check
    if [ $? -ne 0 ]; then
        log_error "TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å"
        cd ..
        return 1
    fi
    
    # ESLint
    log_info "–ó–∞–ø—É—Å–∫ ESLint..."
    npm run lint
    if [ $? -ne 0 ]; then
        log_error "ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å"
        cd ..
        return 1
    fi
    
    # Unit —Ç–µ—Å—Ç—ã React
    if [ -f "package.json" ] && grep -q "test" package.json; then
        log_info "–ó–∞–ø—É—Å–∫ React unit —Ç–µ—Å—Ç–æ–≤..."
        npm test -- --coverage --watchAll=false
        if [ $? -ne 0 ]; then
            log_error "React unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            cd ..
            return 1
        fi
    fi
    
    # Playwright E2E —Ç–µ—Å—Ç—ã
    if [ -d "tests/e2e" ]; then
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Playwright –±—Ä–∞—É–∑–µ—Ä–æ–≤..."
        npx playwright install
        
        log_info "–ó–∞–ø—É—Å–∫ Playwright E2E —Ç–µ—Å—Ç–æ–≤..."
        npx playwright test
        if [ $? -ne 0 ]; then
            log_error "Playwright E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å"
            cd ..
            return 1
        fi
    fi
    
    cd ..
    log_success "Frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
run_performance_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    # Backend performance —Ç–µ—Å—Ç—ã
    if [ -f "backend/tests/performance/test_performance.py" ]; then
        cd backend
        python -m pytest tests/performance/ -v
        cd ..
    fi
    
    # Frontend performance —Ç–µ—Å—Ç—ã —Å Lighthouse
    if command -v lighthouse &> /dev/null; then
        log_info "–ó–∞–ø—É—Å–∫ Lighthouse –∞—É–¥–∏—Ç–∞..."
        lighthouse http://localhost:3000 --only-categories=performance --chrome-flags="--headless" --output=json --output-path=./lighthouse-report.json
        if [ $? -eq 0 ]; then
            log_success "Lighthouse –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
        else
            log_warning "Lighthouse –∞—É–¥–∏—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è"
        fi
    fi
    
    log_success "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤
run_security_tests() {
    log_info "–ó–∞–ø—É—Å–∫ security —Ç–µ—Å—Ç–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    if [ -f "frontend/package.json" ]; then
        cd frontend
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
        npm audit --audit-level=high
        cd ..
    fi
    
    if [ -f "backend/requirements.txt" ]; then
        cd backend
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º safety –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        pip install safety
        safety check
        cd ..
    fi
    
    log_success "Security —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
generate_coverage_report() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞..."
    
    # Backend coverage
    if [ -d "backend" ]; then
        cd backend
        if command -v coverage &> /dev/null; then
            coverage report
            coverage html
            log_info "Backend coverage –æ—Ç—á–µ—Ç: backend/htmlcov/index.html"
        fi
        cd ..
    fi
    
    # Frontend coverage
    if [ -d "frontend/coverage" ]; then
        log_info "Frontend coverage –æ—Ç—á–µ—Ç: frontend/coverage/lcov-report/index.html"
    fi
    
    log_success "–û—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    find . -name "*.pyc" -delete
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if [ -f "backend/test.db" ]; then
        rm backend/test.db
    fi
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üß™ DevAssist Pro Complete Test Suite"
    echo "===================================="
    echo ""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    RUN_ALL=true
    RUN_DATABASE=false
    RUN_BACKEND=false
    RUN_FRONTEND=false
    RUN_PERFORMANCE=false
    RUN_SECURITY=false
    SKIP_INSTALL=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --database)
                RUN_ALL=false
                RUN_DATABASE=true
                shift
                ;;
            --backend)
                RUN_ALL=false
                RUN_BACKEND=true
                shift
                ;;
            --frontend)
                RUN_ALL=false
                RUN_FRONTEND=true
                shift
                ;;
            --performance)
                RUN_ALL=false
                RUN_PERFORMANCE=true
                shift
                ;;
            --security)
                RUN_ALL=false
                RUN_SECURITY=true
                shift
                ;;
            --skip-install)
                SKIP_INSTALL=true
                shift
                ;;
            --help)
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
                echo ""
                echo "–û–ø—Ü–∏–∏:"
                echo "  --database      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                echo "  --backend       –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ backend —Ç–µ—Å—Ç—ã"
                echo "  --frontend      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ frontend —Ç–µ—Å—Ç—ã"
                echo "  --performance   –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
                echo "  --security      –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ security —Ç–µ—Å—Ç—ã"
                echo "  --skip-install  –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
                echo "  --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
                echo ""
                echo "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤—Å–µ —Ç–µ—Å—Ç—ã"
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                exit 1
                ;;
        esac
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    check_environment
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if [ "$SKIP_INSTALL" = false ]; then
        install_dependencies
    fi
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    TOTAL_TESTS=0
    PASSED_TESTS=0
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    if [ "$RUN_ALL" = true ] || [ "$RUN_DATABASE" = true ]; then
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
        if run_database_tests; then
            PASSED_TESTS=$((PASSED_TESTS + 1))
        fi
    fi
    
    if [ "$RUN_ALL" = true ] || [ "$RUN_BACKEND" = true ]; then
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
        if run_backend_tests; then
            PASSED_TESTS=$((PASSED_TESTS + 1))
        fi
    fi
    
    if [ "$RUN_ALL" = true ] || [ "$RUN_FRONTEND" = true ]; then
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
        if run_frontend_tests; then
            PASSED_TESTS=$((PASSED_TESTS + 1))
        fi
    fi
    
    if [ "$RUN_ALL" = true ] || [ "$RUN_PERFORMANCE" = true ]; then
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
        if run_performance_tests; then
            PASSED_TESTS=$((PASSED_TESTS + 1))
        fi
    fi
    
    if [ "$RUN_ALL" = true ] || [ "$RUN_SECURITY" = true ]; then
        TOTAL_TESTS=$((TOTAL_TESTS + 1))
        if run_security_tests; then
            PASSED_TESTS=$((PASSED_TESTS + 1))
        fi
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
    if [ "$RUN_ALL" = true ]; then
        generate_coverage_report
    fi
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    echo ""
    echo "======================================"
    echo "üéØ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "======================================"
    echo "–í—Å–µ–≥–æ –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
    echo "–ü—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: $PASSED_TESTS"
    echo "–ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: $((TOTAL_TESTS - PASSED_TESTS))"
    
    if [ $PASSED_TESTS -eq $TOTAL_TESTS ]; then
        log_success "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
        exit 0
    else
        log_error "‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
main "$@"