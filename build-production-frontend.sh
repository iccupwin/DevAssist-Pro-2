#!/bin/bash

echo "üè≠ PRODUCTION BUILD –í–ê–®–ï–ì–û FRONTEND (–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï)"
echo "=================================================="
echo ""
echo "‚ùå –ß–ï–ö-–õ–ò–°–¢ –ù–ï–£–î–ê–ß DEV SERVER:"
echo "   1. ‚ùå Docker dev server (–∑–∞–≤–∏—Å–∞–µ—Ç)"
echo "   2. ‚ùå Docker production build (–∑–∞–≤–∏—Å–∞–µ—Ç)"
echo "   3. ‚ùå npm ci --only=production (–æ—à–∏–±–∫–∏)"
echo "   4. ‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–µ dev —Å–µ—Ä–≤–µ—Ä—ã (–∫—Ä–∞—à–∏)"
echo "   5. ‚ùå Node.js upgrade (–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)"
echo "   6. ‚ùå Dev server —Å fork-ts-checker (–∫—Ä–∞—à–∏)"
echo ""
echo "‚úÖ –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï: Production build + nginx"
echo ""

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö frontend –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
sudo lsof -ti:3000 | xargs sudo kill -9 2>/dev/null || true
docker stop devassist-static-frontend 2>/dev/null || true
docker rm devassist-static-frontend 2>/dev/null || true
if [ -f "frontend.pid" ]; then
    kill $(cat frontend.pid) 2>/dev/null || true
    rm -f frontend.pid
fi

cd frontend

echo ""
echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ production build..."
echo "   Node: $(node --version)"
echo "   NPM: $(npm --version)"

# –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π .env –¥–ª—è production
cat > .env.production << 'EOF'
REACT_APP_API_URL=http://46.149.71.162:8000
REACT_APP_WS_URL=ws://46.149.71.162:8000
GENERATE_SOURCEMAP=false
IMAGE_INLINE_SIZE_LIMIT=0
INLINE_RUNTIME_CHUNK=false
EOF

echo "   ‚úÖ .env.production —Å–æ–∑–¥–∞–Ω"

echo ""
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ]; then
    echo "   ‚ö†Ô∏è –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm ci --legacy-peer-deps --quiet
else
    echo "   ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ"
fi

echo ""
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö build —Ñ–∞–π–ª–æ–≤..."
rm -rf build/
rm -rf .cache/

echo ""
echo "üè≠ –ó–ê–ü–£–°–ö PRODUCTION BUILD"
echo "========================="

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
export NODE_ENV=production
export NODE_OPTIONS="--max-old-space-size=3072"
export DISABLE_ESLINT_PLUGIN=true
export TSC_COMPILE_ON_ERROR=true
export CI=false

echo "   üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 –º–∏–Ω—É—Ç)..."

# –ó–∞–ø—É—Å–∫–∞–µ–º build —Å —Ç–∞–π–º–∞—É—Ç–æ–º
timeout 1200 npm run build > ../build-production.log 2>&1

BUILD_EXIT_CODE=$?

if [ $BUILD_EXIT_CODE -eq 0 ]; then
    echo "   ‚úÖ Production build –£–°–ü–ï–®–ù–û –∑–∞–≤–µ—Ä—à–µ–Ω!"
    BUILD_SUCCESS=true
elif [ $BUILD_EXIT_CODE -eq 124 ]; then
    echo "   ‚ùå Build –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (20 –º–∏–Ω—É—Ç)"
    BUILD_SUCCESS=false
else
    echo "   ‚ùå Build –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π"
    BUILD_SUCCESS=false
fi

echo ""
echo "üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã build:"
tail -20 ../build-production.log | grep -E "(Compiled|Failed|Error|Warning|Successfully|File sizes)" || echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª–Ω—ã–π –ª–æ–≥: build-production.log"

if [ "$BUILD_SUCCESS" = true ] && [ -d "build" ]; then
    echo ""
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ build:"
    echo "   –†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ build: $(du -sh build | cut -f1)"
    echo "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $(find build -type f | wc -l)"
    
    echo ""
    echo "üê≥ –ó–∞–ø—É—Å–∫ production frontend —á–µ—Ä–µ–∑ nginx..."
    
    # –°–æ–∑–¥–∞–µ–º nginx –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è production
    cat > nginx.production.conf << 'EOF'
server {
    listen 3000;
    server_name localhost;
    
    root /usr/share/nginx/html;
    index index.html index.htm;
    
    # Gzip —Å–∂–∞—Ç–∏–µ
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json;
    
    # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # React Router –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Health check
    location /health {
        return 200 '{"status":"healthy","service":"frontend","version":"production"}';
        add_header Content-Type application/json;
    }
}
EOF
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º nginx —Å production build
    docker run -d \
        --name devassist-frontend-production \
        -p 3000:3000 \
        -v "$(pwd)/build:/usr/share/nginx/html:ro" \
        -v "$(pwd)/nginx.production.conf:/etc/nginx/conf.d/default.conf:ro" \
        --restart unless-stopped \
        --memory="256m" \
        nginx:alpine
    
    echo "   ‚úÖ Production frontend –∑–∞–ø—É—â–µ–Ω –≤ Docker"
    
    echo ""
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (15 —Å–µ–∫—É–Ω–¥)..."
    sleep 15
    
    echo ""
    echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRODUCTION FRONTEND"
    echo "================================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if docker ps --filter "name=devassist-frontend-production" --format "{{.Names}}" | grep -q "devassist-frontend-production"; then
        echo "   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        # Health check
        HEALTH=$(curl -s --max-time 5 "http://localhost:3000/health" 2>/dev/null || echo "TIMEOUT")
        if echo "$HEALTH" | grep -q "healthy"; then
            echo "   ‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç"
        fi
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        sleep 5
        MAIN_TEST=$(curl -s --max-time 10 "http://localhost:3000" 2>/dev/null || echo "TIMEOUT")
        if echo "$MAIN_TEST" | grep -qi "html\|<div\|<title\|devassist"; then
            echo "   ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω"
            
            EXT_TEST=$(curl -s --max-time 10 "http://46.149.71.162:3000" 2>/dev/null || echo "TIMEOUT")
            if echo "$EXT_TEST" | grep -qi "html\|<div\|<title\|devassist"; then
                echo "   ‚úÖ –í–Ω–µ—à–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
                echo ""
                echo "üéâüéâüéâ PRODUCTION FRONTEND –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–ê–ï–¢! üéâüéâüéâ"
                echo ""
                echo "üåê –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê:"
                echo ""
                echo "   üñ•Ô∏è  Frontend:     http://46.149.71.162:3000"
                echo "   ‚öôÔ∏è  Backend:      http://46.149.71.162:8000"
                echo "   üìñ API Docs:     http://46.149.71.162:8000/docs"
                echo "   ü©∫ Frontend Health: http://46.149.71.162:3000/health"
                echo ""
                echo "üë§ –î–ê–ù–ù–´–ï –î–õ–Ø –í–•–û–î–ê:"
                echo "   üìß Email:    admin@devassist.pro"
                echo "   üîë Password: admin123"
                echo ""
                echo "üöÄ –û–°–û–ë–ï–ù–ù–û–°–¢–ò PRODUCTION VERSION:"
                echo "   ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–π - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç"
                echo "   ‚úÖ –ë—ã—Å—Ç—Ä—ã–π - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
                echo "   ‚úÖ –õ–µ–≥–∫–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 256MB –ø–∞–º—è—Ç–∏"
                echo "   ‚úÖ –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π - –≤–µ—Å—å –≤–∞—à –∫–æ–¥"
                echo "   ‚úÖ Production-ready - –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"
                echo ""
                echo "üéä –í–ê–® DEVASSIST PRO –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
            else
                echo "   ‚ùå –í–Ω–µ—à–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            fi
        else
            echo "   ‚ùå –õ–æ–∫–∞–ª—å–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            echo "   –û—Ç–≤–µ—Ç: $(echo "$MAIN_TEST" | head -c 100)..."
        fi
    else
        echo "   ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
        docker logs devassist-frontend-production 2>/dev/null || echo "   –ù–µ—Ç –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    fi
    
else
    echo ""
    echo "‚ùå PRODUCTION BUILD –ù–ï –£–î–ê–õ–°–Ø"
    echo ""
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ build:"
    grep -E "(Error|error|FATAL|Failed)" ../build-production.log | tail -10 || echo "   –ù–µ—Ç —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–µ"
    echo ""
    echo "üí° –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–®–ï–ù–ò–Ø:"
    echo "   ‚Ä¢ –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç - —É–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç–µ –∫–æ–¥"
    echo "   ‚Ä¢ –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ - –∏—Å–ø—Ä–∞–≤—å—Ç–µ TypeScript"  
    echo "   ‚Ä¢ –ï—Å–ª–∏ memory - –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–µ—Ä–∞"
fi

cd ..

echo ""
echo "üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï PRODUCTION FRONTEND:"
echo "   –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:   docker ps | grep frontend-production"
echo "   –õ–æ–≥–∏:        docker logs devassist-frontend-production"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:  docker restart devassist-frontend-production"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:   docker stop devassist-frontend-production"
echo "   Build –ª–æ–≥:   tail -100 build-production.log"

echo ""
echo "‚úÖ Production build –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"