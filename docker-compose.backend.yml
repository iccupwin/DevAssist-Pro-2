version: '3.8'

# DevAssist Pro Backend Only
# Только backend сервисы

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_backend
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devassist_secure_password_2024}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist_user -d devassist_pro"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - backend_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_backend
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_password_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - backend_network

  # Backend Application (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.monolith
    container_name: devassist_backend_app
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      POSTGRES_URL: postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      DATABASE_URL: postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
      
      # Application Configuration
      ENVIRONMENT: production
      DEBUG: false
      LOG_LEVEL: INFO
      HOST: 0.0.0.0
      PORT: 8000
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_minimum_32_characters_long}
      SECRET_KEY: ${JWT_SECRET:-your_jwt_secret_key_minimum_32_characters_long}
      
      # CORS Configuration
      ALLOWED_ORIGINS: http://46.149.71.162,http://localhost,https://46.149.71.162
      CORS_ORIGINS: http://46.149.71.162,http://localhost,https://46.149.71.162
      
      # File Upload Configuration
      MAX_FILE_SIZE: 50MB
      SUPPORTED_FORMATS: pdf,docx,doc,txt,xlsx
      UPLOAD_DIR: /app/data/uploads
      
      # AI Provider Configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      USE_REAL_API: true
      
      # Admin Configuration
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin_secure_password_2024}
      
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - backend_network

volumes:
  postgres_data:
    driver: local
    name: devassist_backend_postgres_data
  redis_data:
    driver: local
    name: devassist_backend_redis_data
  app_data:
    driver: local
    name: devassist_backend_app_data
  app_logs:
    driver: local
    name: devassist_backend_app_logs

networks:
  backend_network:
    driver: bridge
    name: devassist_backend_network