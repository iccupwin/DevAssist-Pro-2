version: '3.8'

# DevAssist Pro - Microservices Architecture
# Includes Admin Service for user management

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_micro
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devassist_secure_password_2024}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist_user -d devassist_pro"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_micro
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_secure_password_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # API Gateway
  api-gateway:
    build:
      context: ./backend
      dockerfile: api_gateway/Dockerfile
    container_name: devassist_gateway_micro
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8001
      - LLM_SERVICE_URL=http://llm-service:8002
      - DOCUMENTS_SERVICE_URL=http://documents-service:8003
      - ANALYTICS_SERVICE_URL=http://analytics-service:8004
      - REPORTS_SERVICE_URL=http://reports-service:8005
      - DASHBOARD_SERVICE_URL=http://dashboard-service:8006
      - ADMIN_SERVICE_URL=http://admin-service:8007
    ports:
      - "8000:8000"
    depends_on:
      - auth-service
      - llm-service
      - admin-service
    networks:
      - devassist_network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: ./backend/services/auth
      dockerfile: Dockerfile
    container_name: devassist_auth_micro
    environment:
      - POSTGRES_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_minimum_32_characters_long}
    ports:
      - "8001:8001"
    depends_on:
      - postgres
      - redis
    networks:
      - devassist_network
    restart: unless-stopped

  # LLM Service
  llm-service:
    build:
      context: ./backend/services/llm
      dockerfile: Dockerfile
    container_name: devassist_llm_micro
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    ports:
      - "8002:8002"
    depends_on:
      - redis
    networks:
      - devassist_network
    restart: unless-stopped

  # Documents Service
  documents-service:
    build:
      context: ./backend/services/documents
      dockerfile: Dockerfile
    container_name: devassist_docs_micro
    environment:
      - POSTGRES_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      - UPLOAD_DIR=/app/data/uploads
    ports:
      - "8003:8003"
    volumes:
      - app_data:/app/data
    depends_on:
      - postgres
    networks:
      - devassist_network
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: ./backend/services/analytics
      dockerfile: Dockerfile
    container_name: devassist_analytics_micro
    environment:
      - POSTGRES_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
    ports:
      - "8004:8004"
    depends_on:
      - postgres
      - redis
    networks:
      - devassist_network
    restart: unless-stopped

  # Reports Service
  reports-service:
    build:
      context: ./backend/services/reports
      dockerfile: Dockerfile
    container_name: devassist_reports_micro
    environment:
      - POSTGRES_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
    ports:
      - "8005:8005"
    depends_on:
      - postgres
    networks:
      - devassist_network
    restart: unless-stopped

  # Dashboard Service
  dashboard-service:
    build:
      context: ./backend/services/dashboard
      dockerfile: Dockerfile
    container_name: devassist_dashboard_micro
    environment:
      - POSTGRES_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
    ports:
      - "8006:8006"
    depends_on:
      - postgres
      - redis
    networks:
      - devassist_network
    restart: unless-stopped

  # Admin Service (NEW)
  admin-service:
    build:
      context: ./backend/services/admin
      dockerfile: Dockerfile
    container_name: devassist_admin_micro
    environment:
      - POSTGRES_URL=postgresql://devassist_user:${POSTGRES_PASSWORD:-devassist_secure_password_2024}@postgres:5432/devassist_pro
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_minimum_32_characters_long}
    ports:
      - "8007:8007"
    depends_on:
      - postgres
      - redis
    networks:
      - devassist_network
    restart: unless-stopped

  # Frontend React + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: devassist_frontend_micro
    ports:
      - "80:80"
    depends_on:
      - api-gateway
    networks:
      - devassist_network
    restart: unless-stopped

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local

# Networks
networks:
  devassist_network:
    driver: bridge