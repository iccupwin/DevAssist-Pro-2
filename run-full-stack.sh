#!/bin/bash

# Full Stack Run - –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ frontend –∏ backend –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üöÄ –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫ DevAssist Pro - Frontend + Backend"

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
MEMORY_KB=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
MEMORY_MB=$((MEMORY_KB / 1024))
DISK_SPACE=$(df / | awk 'NR==2{print $4}')
DISK_GB=$((DISK_SPACE / 1024 / 1024))

log "üíæ –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: ${MEMORY_MB} MB"
log "üíø –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${DISK_GB} GB"

if [ "$MEMORY_MB" -lt 1000 ]; then
    warning "‚ö†Ô∏è –ú–∞–ª–æ –ø–∞–º—è—Ç–∏! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Å–ª–∞–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞..."
    USE_MINIMAL=true
else
    log "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–±–æ—Ä–∫–∏"
    USE_MINIMAL=false
fi

# 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose -f docker-compose.production.yml down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.final.yml down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.simple.yml down --remove-orphans 2>/dev/null || true

# 3. –û—á–∏—Å—Ç–∫–∞ Docker –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞
log "–û—á–∏—Å—Ç–∫–∞ Docker –∫—ç—à–∞..."
docker system prune -f
docker builder prune -f

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ package.json –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏
if [ "$USE_MINIMAL" = true ]; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ package.json..."
    cp frontend/package.json frontend/package.json.backup
    
    cat > frontend/package.json.minimal << 'EOF'
{
  "name": "devassist-pro-frontend",
  "version": "1.0.0",
  "scripts": {
    "build": "react-scripts build"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-scripts": "5.0.1",
    "react-router-dom": "^6.8.0",
    "tailwindcss": "^3.2.7",
    "typescript": "^4.9.5"
  },
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.5.6"
  },
  "browserslist": {
    "production": [">0.2%", "not dead", "not op_mini all"],
    "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
  }
}
EOF
    cp frontend/package.json.minimal frontend/package.json
fi

# 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–µ–π—à–µ–≥–æ nginx –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è frontend
log "–°–æ–∑–¥–∞–Ω–∏–µ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > frontend/nginx.frontend.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Handle React Router
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy to backend
    location /api/ {
        proxy_pass http://app:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check
    location /health {
        return 200 'OK';
        add_header Content-Type text/plain;
    }
}
EOF

# 6. –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—ç—Ç–∞–ø–Ω–æ
log "–°–±–æ—Ä–∫–∞ backend..."
if ! docker compose -f docker-compose.final.yml build app; then
    error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ backend"
    exit 1
fi

log "–°–±–æ—Ä–∫–∞ frontend..."
if ! docker compose -f docker-compose.final.yml build frontend; then
    warning "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é..."
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π Dockerfile
    cat > frontend/Dockerfile.simple << 'EOF'
FROM nginx:alpine
COPY nginx.frontend.conf /etc/nginx/conf.d/default.conf
RUN echo '<!DOCTYPE html><html><head><title>DevAssist Pro</title><meta charset="utf-8"><style>body{font-family:Arial,sans-serif;text-align:center;padding:50px;background:#f5f5f5;}h1{color:#333;}</style></head><body><h1>üöÄ DevAssist Pro</h1><p>Frontend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!</p><p>Backend API: <a href="/api/health">/api/health</a></p><script>fetch("/api/health").then(r=>r.json()).then(d=>console.log("Backend:",d)).catch(e=>console.log("Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:",e))</script></body></html>' > /usr/share/nginx/html/index.html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF
    
    # –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ frontend
    sed 's/dockerfile: Dockerfile.minimal/dockerfile: Dockerfile.simple/g' docker-compose.final.yml > docker-compose.simple-final.yml
    
    if ! docker compose -f docker-compose.simple-final.yml build frontend; then
        error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–π frontend"
        exit 1
    fi
    
    USE_SIMPLE_COMPOSE=true
else
    USE_SIMPLE_COMPOSE=false
fi

# 7. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [ "$USE_SIMPLE_COMPOSE" = true ]; then
    COMPOSE_FILE="docker-compose.simple-final.yml"
else
    COMPOSE_FILE="docker-compose.final.yml"
fi

if docker compose -f "$COMPOSE_FILE" up -d; then
    log "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
else
    error "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
    exit 1
fi

# 8. –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
log "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫)..."
for i in {1..12}; do
    echo -n "."
    sleep 5
done
echo

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f "$COMPOSE_FILE" ps

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# Backend health check
info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ backend..."
BACKEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/api/health || echo "000")
if [ "$BACKEND_CODE" = "200" ]; then
    log "‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $BACKEND_CODE)"
else
    warning "‚ö†Ô∏è Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $BACKEND_CODE)"
fi

# Frontend health check
info "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..."
FRONTEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/ || echo "000")
if [ "$FRONTEND_CODE" = "200" ]; then
    log "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $FRONTEND_CODE)"
else
    warning "‚ö†Ô∏è Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP $FRONTEND_CODE)"
fi

# 11. –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
if [ "$BACKEND_CODE" != "200" ] || [ "$FRONTEND_CODE" != "200" ]; then
    warning "üìã –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
    echo
    info "=== Backend –ª–æ–≥–∏ ==="
    docker compose -f "$COMPOSE_FILE" logs app --tail=10
    echo
    info "=== Frontend –ª–æ–≥–∏ ==="
    docker compose -f "$COMPOSE_FILE" logs frontend --tail=10
fi

# 12. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ "$USE_MINIMAL" = true ] && [ -f "frontend/package.json.backup" ]; then
    log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ package.json..."
    mv frontend/package.json.backup frontend/package.json
fi

# 13. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo
log "üéâ –ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo
info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
info "   üñ•Ô∏è  Frontend: HTTP $FRONTEND_CODE"
info "   ‚öôÔ∏è  Backend:  HTTP $BACKEND_CODE"
echo
info "üåê –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
info "   üîó –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç:     http://46.149.71.162/"
info "   üîó Backend API:       http://46.149.71.162/api/health"
info "   üîó –ü—Ä–æ–∫—Å–∏ (–ø–æ—Ä—Ç 8080): http://46.149.71.162:8080/"
echo

if [ "$BACKEND_CODE" = "200" ] && [ "$FRONTEND_CODE" = "200" ]; then
    log "üéä –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! Frontend –∏ Backend –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
    info "üöÄ DevAssist Pro –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
else
    warning "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"
    info "üí° –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: docker compose -f $COMPOSE_FILE logs"
fi

echo
info "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:"
info "   ‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker compose -f $COMPOSE_FILE down"
info "   üìä –°—Ç–∞—Ç—É—Å:    docker compose -f $COMPOSE_FILE ps"
info "   üìù –õ–æ–≥–∏:      docker compose -f $COMPOSE_FILE logs"