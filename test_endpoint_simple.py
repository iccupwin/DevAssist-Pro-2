#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint /api/llm/analyze
üî• –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ê–ù–ê–õ–ò–ó–ê –ö–ü
"""

import requests
import json
import time
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
ENDPOINT = "/api/llm/analyze"

def load_test_document():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ö–ü"""
    test_file = Path(__file__).parent / "test_kp_simple.txt"
    if not test_file.exists():
        raise FileNotFoundError(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
    
    with open(test_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    return content

def test_analyze_endpoint():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ endpoint –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        document_content = load_test_document()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        payload = {
            "prompt": document_content,
            "model": "claude-3-haiku-20240307",
            "max_tokens": 1500,
            "temperature": 0.1
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ {API_BASE_URL}{ENDPOINT}")
        print(f"üìä –†–∞–∑–º–µ—Ä payload: {len(json.dumps(payload))} –±–∞–π—Ç")
        
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å timeout
        response = requests.post(
            f"{API_BASE_URL}{ENDPOINT}",
            json=payload,
            timeout=120  # 2 –º–∏–Ω—É—Ç—ã timeout
        )
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            print("‚úÖ –£–°–ü–ï–®–ù–´–ô –û–¢–í–ï–¢!")
            print("-" * 40)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            required_fields = ['content', 'model', 'processing_time']
            missing_fields = [field for field in required_fields if field not in result]
            
            if missing_fields:
                print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
            else:
                print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model', 'N/A')}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 'N/A')}")
            print(f"üîÑ Fallback —Ä–µ–∂–∏–º: {result.get('fallback_mode', False)}")
            print(f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_quality', 'N/A')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞
            if 'content' in result:
                content = result['content']
                print(f"üìÑ –†–∞–∑–º–µ—Ä content: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ content
                try:
                    if isinstance(content, str):
                        parsed_content = json.loads(content)
                        print("‚úÖ Content —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –∫–∞–∫ JSON")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        analysis_fields = ['company_name', 'compliance_score', 'overall_assessment']
                        for field in analysis_fields:
                            if field in parsed_content:
                                print(f"  üìå {field}: {parsed_content[field]}")
                    else:
                        print("‚ÑπÔ∏è  Content –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π JSON")
                        
                except json.JSONDecodeError as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON content: {e}")
                    print(f"  –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}...")
            
            if result.get('fallback_mode'):
                print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ä–µ–∂–∏–º")
                if 'warning' in result:
                    print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result['warning']}")
            else:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π Claude API")
                
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê: {response.status_code}")
            try:
                error_data = response.json()
                print(f"  –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                print(f"  –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}...")
    
    except requests.exceptions.Timeout:
        print("‚è∞ TIMEOUT: –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (120 —Å–µ–∫—É–Ω–¥)")
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ü–û-–ü–†–ï–ñ–ù–ï–ú–£ –ó–ê–í–ò–°–ê–ï–¢!")
        
    except requests.exceptions.ConnectionError:
        print("üîå –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        
    except Exception as e:
        print(f"üí• –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print(f"  –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")

def test_health_endpoint():
    """–¢–µ—Å—Ç health endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {e}")
        return False

if __name__ == "__main__":
    print("üî• –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 60)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    if test_health_endpoint():
        print("\n" + "="*60)
        test_analyze_endpoint()
    else:
        print("\n‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π: python3 app.py")
    
    print("\n" + "="*60)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")