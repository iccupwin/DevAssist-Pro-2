#!/bin/bash
# ===========================================
# DevAssist Pro - Fullstack Startup Script
# ===========================================

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log "üöÄ Starting DevAssist Pro Fullstack Application..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f ".env" ]; then
    warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if [ -f ".env.fullstack.example" ]; then
        log "–ö–æ–ø–∏—Ä—É–µ–º .env.fullstack.example –≤ .env..."
        cp .env.fullstack.example .env
        warning "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."
        log "–û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ANTHROPIC_API_KEY –¥–ª—è —Ä–∞–±–æ—Ç—ã AI —Ñ—É–Ω–∫—Ü–∏–π."
    else
        error ".env.fullstack.example —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å .env —Ñ–∞–π–ª."
        exit 1
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ANTHROPIC_API_KEY
if ! grep -q "ANTHROPIC_API_KEY=sk-ant-" .env; then
    warning "ANTHROPIC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ."
    warning "AI —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —ç—Ç–æ–≥–æ –∫–ª—é—á–∞."
fi

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
log "–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
mkdir -p data/{postgres,redis,app,logs}
mkdir -p data/app/{uploads,reports,cache}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    sudo chown -R 1000:1000 data/
    chmod -R 755 data/
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
log "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.fullstack.yml down --remove-orphans 2>/dev/null || true

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if [ "$1" = "--clean" ]; then
    log "–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã..."
    docker-compose -f docker-compose.fullstack.yml down --volumes --remove-orphans
    docker system prune -f
fi

# –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
log "–°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑—ã..."
if [ "$1" = "--rebuild" ] || [ "$1" = "--clean" ]; then
    docker-compose -f docker-compose.fullstack.yml build --no-cache
else
    docker-compose -f docker-compose.fullstack.yml build
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
log "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
docker-compose -f docker-compose.fullstack.yml up -d

# –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."

check_service() {
    local service_name=$1
    local url=$2
    local max_attempts=30
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -f -s "$url" > /dev/null 2>&1; then
            success "$service_name –≥–æ—Ç–æ–≤!"
            return 0
        fi
        log "–û–∂–∏–¥–∞–µ–º $service_name (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts)..."
        sleep 2
        ((attempt++))
    done

    error "$service_name –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    return 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
check_service "Fullstack Application" "http://localhost:80/health"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker-compose -f docker-compose.fullstack.yml ps

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
log "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–Ω–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):"
echo ""
success "üéâ DevAssist Pro Fullstack Application —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
echo ""
echo "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
echo "   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:    http://localhost:80"
echo "   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:    http://localhost:80/api/docs"
echo "   ‚Ä¢ Health Check:        http://localhost:80/health"
echo ""
echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "   ‚Ä¢ –õ–æ–≥–∏:                docker-compose -f docker-compose.fullstack.yml logs -f"
echo "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞:           docker-compose -f docker-compose.fullstack.yml down"
echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:          docker-compose -f docker-compose.fullstack.yml restart"
echo ""
echo "üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: ./data/"
echo ""

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
if [ "$2" = "--logs" ] || [ "$1" = "--logs" ]; then
    docker-compose -f docker-compose.fullstack.yml logs -f
fi