#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ö–ü –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã:
1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
2. API /api/llm/analyze –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ
3. –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–æ–∫
"""
import asyncio
import json
import time
import aiohttp
import aiofiles
from pathlib import Path

BASE_URL = "http://localhost:8000"

async def test_text_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüîß –¢–ï–°–¢ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_content = """
–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï

–ö–æ–º–ø–∞–Ω–∏—è: –¢–µ—Å—Ç–¢–µ—Ö
–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, React, PostgreSQL
–°—Ç–æ–∏–º–æ—Å—Ç—å: 1,500,000 —Ä—É–±–ª–µ–π
–°—Ä–æ–∫–∏: 3 –º–µ—Å—è—Ü–∞
–ö–æ–º–∞–Ω–¥–∞: 5 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï:
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
- Responsive –¥–∏–∑–∞–π–Ω

–£–°–õ–û–í–ò–Ø –†–ê–ë–û–¢–´:
- Agile –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
- –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥–µ–º–æ
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 6 –º–µ—Å—è—Ü–µ–≤
"""
    
    test_file = Path("test_kp.txt")
    async with aiofiles.open(test_file, 'w', encoding='utf-8') as f:
        await f.write(test_content)
    
    try:
        async with aiohttp.ClientSession() as session:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            data = aiohttp.FormData()
            data.add_field('file', open(test_file, 'rb'), filename='test_kp.txt')
            
            async with session.post(f"{BASE_URL}/api/documents/upload", data=data) as response:
                if response.status == 200:
                    result = await response.json()
                    if result.get('success'):
                        document_id = result['data']['document_id']
                        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {document_id}")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç)
                        async with session.post(f"{BASE_URL}/api/documents/{document_id}/analyze") as analyze_response:
                            if analyze_response.status == 200:
                                analyze_result = await analyze_response.json()
                                if analyze_result.get('success'):
                                    extracted_text = analyze_result['data'].get('extracted_text', '')
                                    print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                                    
                                    if '–¢–µ—Å—Ç–¢–µ—Ö' in extracted_text and '1,500,000' in extracted_text:
                                        print("‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
                                        return True
                                    else:
                                        print("‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                                        print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {extracted_text[:200]}...")
                                        return False
                                else:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analyze_result}")
                                    return False
                            else:
                                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {analyze_response.status}")
                                return False
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {response.status}")
                    return False
    
    finally:
        if test_file.exists():
            test_file.unlink()

async def test_llm_analysis_speed():
    """–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ AI –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüöÄ –¢–ï–°–¢ 2: –°–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ AI –∞–Ω–∞–ª–∏–∑–∞")
    
    test_prompt = """
–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "–ò–Ω–Ω–æ–≤–∞–¢–µ—Ö"

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Vue.js, Node.js, MongoDB
–°—Ç–æ–∏–º–æ—Å—Ç—å: 2,800,000 —Ä—É–±–ª–µ–π
–°—Ä–æ–∫–∏: 4 –º–µ—Å—è—Ü–∞
–ö–æ–º–∞–Ω–¥–∞: 8 —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –û–ø—ã—Ç –±–æ–ª–µ–µ 5 –ª–µ—Ç
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 12 –º–µ—Å—è—Ü–µ–≤

–†–∏—Å–∫–∏:
- –°–∂–∞—Ç—ã–µ —Å—Ä–æ–∫–∏
- –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
"""
    
    start_time = time.time()
    
    async with aiohttp.ClientSession() as session:
        async with session.post(
            f"{BASE_URL}/api/llm/analyze",
            json={
                "prompt": test_prompt,
                "model": "claude-3-5-sonnet-20241022",
                "max_tokens": 1200,
                "temperature": 0.05
            }
        ) as response:
            
            processing_time = time.time() - start_time
            
            if response.status == 200:
                result = await response.json()
                
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.1f} —Å–µ–∫—É–Ω–¥")
                
                if processing_time <= 45:
                    print(f"‚úÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –Ω–æ—Ä–º–µ: {processing_time:.1f}—Å <= 45—Å")
                else:
                    print(f"‚ö†Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–æ—Ä–º—É: {processing_time:.1f}—Å > 45—Å")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                content = result.get('content', '')
                if content and not content.startswith('–û—à–∏–±–∫–∞'):
                    print("‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        if content.strip().startswith('{'):
                            parsed = json.loads(content)
                            if parsed.get('company_name') and parsed.get('compliance_score') is not None:
                                score = parsed.get('compliance_score', 0)
                                print(f"‚úÖ JSON –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, compliance_score: {score}%")
                                
                                if score > 0:
                                    print("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                                    return True
                                else:
                                    print("‚ö†Ô∏è –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó = 0%, –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                                    return True
                            else:
                                print("‚ö†Ô∏è JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–ø–æ–ª–Ω–∞—è, –Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è")
                                return True
                        else:
                            print("‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (–Ω–µ JSON)")
                            return True
                    except json.JSONDecodeError:
                        print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ")
                        return True
                else:
                    print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {content[:100]}...")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                error_text = await response.text()
                print(f"–û—à–∏–±–∫–∞: {error_text}")
                return False

async def test_full_kp_analysis_flow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü"""
    print("\nüéØ –¢–ï–°–¢ 3: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ö–ü
    kp_content = """
–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
–ö–æ–º–ø–∞–Ω–∏—è –ü—Ä–æ—Ñ–î–µ–≤ –°–æ–ª—é—à–Ω—Å

–ü–†–û–ï–ö–¢: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï:
- Frontend: React 18, TypeScript
- Backend: Python FastAPI
- Database: PostgreSQL 15
- Infrastructure: Docker, Nginx

–ö–û–ú–ê–ù–î–ê:
- Project Manager - 1
- Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ - 2  
- Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ - 2
- DevOps –∏–Ω–∂–µ–Ω–µ—Ä - 1
- QA –∏–Ω–∂–µ–Ω–µ—Ä - 1

–°–¢–û–ò–ú–û–°–¢–¨: 3,200,000 —Ä—É–±–ª–µ–π

–°–†–û–ö–ò: 5 –º–µ—Å—è—Ü–µ–≤

–≠–¢–ê–ü–´:
1. –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 3 –Ω–µ–¥–µ–ª–∏
2. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ MVP - 8 –Ω–µ–¥–µ–ª—å  
3. –î–æ—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 6 –Ω–µ–¥–µ–ª—å
4. –í–Ω–µ–¥—Ä–µ–Ω–∏–µ - 2 –Ω–µ–¥–µ–ª–∏

–ì–ê–†–ê–ù–¢–ò–ò:
- 12 –º–µ—Å—è—Ü–µ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ - 4 —á–∞—Å–∞
- –û–±—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫–∞–∑—á–∏–∫–∞

–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
- 7 –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö
- –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è Agile
- –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
    
    test_file = Path("test_full_kp.txt")
    async with aiofiles.open(test_file, 'w', encoding='utf-8') as f:
        await f.write(kp_content)
    
    try:
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            data = aiohttp.FormData()
            data.add_field('file', open(test_file, 'rb'), filename='test_full_kp.txt')
            
            async with session.post(f"{BASE_URL}/api/documents/upload", data=data) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status}")
                    return False
                
                result = await response.json()
                document_id = result['data']['document_id']
                print(f"üìÑ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {document_id}")
            
            # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            async with session.post(f"{BASE_URL}/api/documents/{document_id}/analyze") as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {response.status}")
                    return False
                
                result = await response.json()
                extracted_text = result['data']['extracted_text']
                print(f"üìù –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
            async with session.post(
                f"{BASE_URL}/api/llm/analyze",
                json={
                    "prompt": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω–∏ JSON:\n{extracted_text}",
                    "model": "claude-3-5-sonnet-20241022",
                    "max_tokens": 1200,
                    "temperature": 0.03
                }
            ) as response:
                
                total_time = time.time() - start_time
                
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {response.status}")
                    return False
                
                result = await response.json()
                content = result.get('content', '')
                
                print(f"ü§ñ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                success_indicators = []
                
                if total_time <= 45:
                    success_indicators.append(f"‚úÖ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {total_time:.1f}—Å")
                else:
                    success_indicators.append(f"‚ö†Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {total_time:.1f}—Å (>45—Å)")
                
                if content and '–ü—Ä–æ—Ñ–î–µ–≤' in content:
                    success_indicators.append("‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                
                if '3,200,000' in content or '3200000' in content:
                    success_indicators.append("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∞")
                
                if 'React' in content and 'FastAPI' in content:
                    success_indicators.append("‚úÖ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
                
                if '–º–µ—Å—è—Ü' in content or '5' in content:
                    success_indicators.append("‚úÖ –°—Ä–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
                
                if not content.startswith('–û—à–∏–±–∫–∞'):
                    success_indicators.append("‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ")
                
                print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
                for indicator in success_indicators:
                    print(f"  {indicator}")
                
                if len(success_indicators) >= 4:
                    print("\nüéâ –ü–û–õ–ù–´–ô –ü–û–¢–û–ö –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
                    return True
                else:
                    print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å")
                    print(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: {content[:200]}...")
                    return False
    
    finally:
        if test_file.exists():
            test_file.unlink()

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 50)
    
    tests = [
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞", test_text_extraction),
        ("–°–∫–æ—Ä–æ—Å—Ç—å AI –∞–Ω–∞–ª–∏–∑–∞", test_llm_analysis_speed), 
        ("–ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞", test_full_kp_analysis_flow)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò–¢–û–ì: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –£–°–¢–†–ê–ù–ï–ù–´!")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏—Ç:")
        print("  ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF/DOCX")
        print("  ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (–Ω–µ 0%)")
        print("  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("  ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (15-45 —Å–µ–∫—É–Ω–¥)")
        print("  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫ '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è'")
    else:
        print("\n‚ö†Ô∏è –û–°–¢–ê–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–´, –¢–†–ï–ë–£–Æ–©–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –†–ê–ë–û–¢–´")

if __name__ == "__main__":
    asyncio.run(main())