# =============================================================================
# DevAssist Pro - Production Dockerfile
# Combines FastAPI backend + React frontend in a single optimized container
# =============================================================================

# Stage 1: Frontend Build
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files and install dependencies
COPY frontend/package*.json ./

# Install dependencies using npm install (handles version conflicts better)
RUN npm install --production=false

# Copy frontend source and build
COPY frontend/ .

# Disable ESLint for production build
ENV ESLINT_NO_DEV_ERRORS=true
ENV GENERATE_SOURCEMAP=false

RUN npm run build

# Verify build output
RUN ls -la build/ && echo "âœ… Frontend build completed"

# =============================================================================

# Stage 2: Backend Dependencies
FROM python:3.11-slim AS backend-deps

WORKDIR /app/backend

# Install system dependencies for Python packages
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

# =============================================================================

# Stage 3: Production Runtime
FROM python:3.11-slim AS production

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    postgresql-client \
    curl \
    supervisor \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash appuser

# Copy Python packages from builder stage
COPY --from=backend-deps /usr/local/lib/python3.11/site-packages/ /usr/local/lib/python3.11/site-packages/
COPY --from=backend-deps /usr/local/bin/ /usr/local/bin/

# Copy backend application
COPY backend/ ./backend/
RUN chown -R appuser:appuser ./backend/

# Copy frontend build
COPY --from=frontend-builder /app/frontend/build ./frontend/build
RUN chown -R appuser:appuser ./frontend/

# Copy configuration files
COPY nginx.production.conf /etc/nginx/nginx.conf
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY start-production.sh ./start-production.sh
RUN chmod +x ./start-production.sh

# Create necessary directories and set permissions
RUN mkdir -p /var/log/nginx /var/log/supervisor /app/logs /app/data \
    && chown -R appuser:appuser /var/log/nginx /var/log/supervisor /app/logs /app/data \
    && chmod 755 /var/log/nginx /var/log/supervisor

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/api/health || exit 1

# Expose port
EXPOSE 80

# Switch to non-root user
USER appuser

# Environment variables
ENV ENVIRONMENT=production
ENV PYTHONPATH=/app/backend
ENV NODE_ENV=production

# Start the application
CMD ["./start-production.sh"]