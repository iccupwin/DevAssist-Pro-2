#!/usr/bin/env python3
"""
Final Test - Claude API Integration 
"""
import requests
import json
import time

def test_claude_api():
    print('=== FINAL CLAUDE API INTEGRATION TEST ===')
    print('Testing if KP Analyzer uses real Claude API...\n')

    # Comprehensive commercial proposal
    kp_text = '''
–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –æ—Ç –û–û–û "–°—Ç—Ä–æ–π–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏"

–û–ë–™–ï–ö–¢: –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞ "–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫ XXI"

–û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
- –°—Ç–æ–∏–º–æ—Å—Ç—å: 450 –º–ª–Ω —Ä—É–±–ª–µ–π
- –°—Ä–æ–∫: 30 –º–µ—Å—è—Ü–µ–≤  
- –ü–ª–æ—â–∞–¥—å: 25,000 –∫–≤.–º
- –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: 15 —ç—Ç–∞–∂–µ–π

–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨:
- –û–û–û "–°—Ç—Ä–æ–π–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏"  
- –û–ø—ã—Ç: 22 –≥–æ–¥–∞
- –ü—Ä–æ–µ–∫—Ç—ã: 80+ –æ–±—ä–µ–∫—Ç–æ–≤
- –ü–µ—Ä—Å–æ–Ω–∞–ª: 800 —á–µ–ª–æ–≤–µ–∫
- –õ–∏—Ü–µ–Ω–∑–∏–∏: –°–†–û-–°-098-25032015

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –†–ï–®–ï–ù–ò–ï:
- –§—É–Ω–¥–∞–º–µ–Ω—Ç: –º–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –ø–ª–∏—Ç–∞ 1.2–º
- –ö–∞—Ä–∫–∞—Å: –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∂/–±
- –§–∞—Å–∞–¥: –Ω–∞–≤–µ—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
- –ö—Ä–æ–≤–ª—è: —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä—É–µ–º–∞—è

–ì–ê–†–ê–ù–¢–ò–ò:
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: 7 –ª–µ—Ç
- –ò–Ω–∂–µ–Ω–µ—Ä–∏—è: 3 –≥–æ–¥–∞
- –û—Ç–¥–µ–ª–∫–∞: 2 –≥–æ–¥–∞
- –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 500 –º–ª–Ω —Ä—É–±

–ì–†–ê–§–ò–ö:
1. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 6 –º–µ—Å
2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: 2 –º–µ—Å
3. –ù—É–ª–µ–≤–æ–π —Ü–∏–∫–ª: 8 –º–µ—Å  
4. –ù–∞–¥–∑–µ–º–Ω–∞—è —á–∞—Å—Ç—å: 12 –º–µ—Å
5. –ò–Ω–∂–µ–Ω–µ—Ä–∏—è: 2 –º–µ—Å

–û–ü–õ–ê–¢–ê:
- –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 20% (90 –º–ª–Ω)
- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ: –µ–∂–µ–º–µ—Å—è—á–Ω–æ
- –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π: –ø—Ä–∏ —Å–¥–∞—á–µ

–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:  
- 25 –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤
- 150 –µ–¥–∏–Ω–∏—Ü —Ç–µ—Ö–Ω–∏–∫–∏
- ISO 9001 –∫–∞—á–µ—Å—Ç–≤–æ
- BIM-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
- BREEAM –∏ LEED —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
'''

    data = {
        'prompt': kp_text,
        'model': 'claude-3-haiku-20240307',
        'max_tokens': 1000,
        'temperature': 0.1
    }

    print(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(kp_text)} —Å–∏–º–≤–æ–ª–æ–≤ –≤ Claude API...')
    print('–û–∂–∏–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –ò–ò –∞–Ω–∞–ª–∏–∑–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥)...\n')

    start_time = time.time()

    try:
        response = requests.post('http://localhost:8000/api/llm/analyze', 
                               json=data, timeout=60)
        end_time = time.time()
        duration = end_time - start_time
        
        print(f'–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥')
        print(f'HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}\n')
        
        if response.status_code == 200:
            result = response.json()
            
            model_used = result.get('model', 'unknown')
            fallback_mode = result.get('fallback_mode', 'unknown')
            tokens_used = result.get('tokens_used', 0)
            
            print(f'–ú–æ–¥–µ–ª—å: {model_used}')
            print(f'Fallback: {fallback_mode}')
            print(f'–¢–æ–∫–µ–Ω—ã: {tokens_used}')
            
            content = result.get('content', '')
            
            if content.startswith('{'):
                try:
                    analysis = json.loads(content)
                    
                    print('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê ===')
                    print(f'–ö–æ–º–ø–∞–Ω–∏—è: {analysis.get("company_name", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")}')
                    print(f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {analysis.get("pricing", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")}')
                    print(f'–°—Ä–æ–∫–∏: {analysis.get("timeline", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")}')
                    print(f'–û—Ü–µ–Ω–∫–∞: {analysis.get("compliance_score", "N/A")}/100')
                    
                    advantages = analysis.get('advantages', [])
                    if advantages:
                        print(f'–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ ({len(advantages)}):')
                        for i, adv in enumerate(advantages[:3], 1):
                            print(f'  {i}. {adv}')
                    
                    risks = analysis.get('risks', [])
                    if risks:
                        print(f'–†–∏—Å–∫–∏ ({len(risks)}):')
                        for i, risk in enumerate(risks[:2], 1):
                            print(f'  {i}. {risk}')
                            
                    recommendation = analysis.get('recommendation', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
                    print(f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}')
                    
                    assessment = analysis.get('overall_assessment', '')
                    if assessment:
                        print(f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {assessment[:100]}{"..." if len(assessment) > 100 else ""}')
                    
                    # SUCCESS EVALUATION
                    company_name = analysis.get('company_name', '')
                    
                    success_indicators = []
                    
                    # Check model
                    if 'claude' in model_used.lower():
                        success_indicators.append('REAL CLAUDE API')
                    elif model_used != 'debug_verification':
                        success_indicators.append('NOT DEBUG BUT NOT CLAUDE')
                    else:
                        success_indicators.append('STILL DEBUG MODE')
                    
                    # Check timing
                    if duration >= 8.0:
                        success_indicators.append('REALISTIC AI PROCESSING TIME')
                    elif duration >= 3.0:
                        success_indicators.append('FAST BUT POSSIBLE')
                    else:
                        success_indicators.append('TOO FAST FOR REAL AI')
                    
                    # Check data extraction
                    if '–°—Ç—Ä–æ–π–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏' in company_name or '–¢–µ—Ö–Ω–æ–ø–∞—Ä–∫' in str(analysis):
                        success_indicators.append('EXTRACTS REAL DATA FROM KP')
                    elif company_name not in ['TEST FIXED COMPANY', 'REAL ENDPOINT CALLED']:
                        success_indicators.append('NOT MOCK DATA')
                    else:
                        success_indicators.append('STILL MOCK/DEBUG DATA')
                    
                    # Check token usage
                    if tokens_used > 0:
                        success_indicators.append('TOKEN USAGE TRACKED')
                    else:
                        success_indicators.append('NO TOKEN TRACKING')
                    
                    print('\n=== SUCCESS EVALUATION ===')
                    for indicator in success_indicators:
                        print(f'- {indicator}')
                        
                    # Final verdict
                    has_claude = any('CLAUDE' in i for i in success_indicators)
                    has_real_time = any('REALISTIC' in i for i in success_indicators)
                    has_real_data = any('EXTRACTS REAL' in i for i in success_indicators)
                    
                    if has_claude and has_real_time and has_real_data:
                        print(f'\nüéâ –ü–û–õ–ù–´–ô –£–°–ü–ï–•: –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–† –†–ê–ë–û–¢–ê–ï–¢ –° CLAUDE API!')
                        print('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π Claude AI')
                        print('‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ö–ü')
                        print('‚úÖ –¢—Ä–∞—Ç–∏—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∞–ª–∏–∑')
                        return True
                    elif not any('DEBUG' in i or 'MOCK' in i for i in success_indicators):
                        print(f'\n‚úÖ –£–°–ü–ï–•: –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ë–û–õ–¨–®–ï –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢ MOCK –î–ê–ù–ù–´–ï!')
                        print('–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
                        if not has_claude:
                            print('‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –≤–º–µ—Å—Ç–æ Claude, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ')
                        return True
                    else:
                        print(f'\n‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ï—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è, –Ω–æ –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞')
                        return False
                        
                except json.JSONDecodeError as e:
                    print(f'‚ùå JSON PARSING ERROR: {e}')
                    print(f'Raw content: {content[:200]}...')
                    return False
                    
            else:
                print(f'‚ùå RESPONSE NOT JSON: {content[:100]}...')
                return False
                
        else:
            print(f'‚ùå HTTP ERROR: {response.status_code}')
            print(f'Response: {response.text[:300]}')
            return False
            
    except requests.exceptions.Timeout:
        print('‚ùå TIMEOUT: Request exceeded 60 seconds')
        print('(This might be normal for first Claude API call)')
        return False
        
    except Exception as e:
        print(f'‚ùå REQUEST ERROR: {e}')
        return False

if __name__ == "__main__":
    print('=' * 60)
    success = test_claude_api()
    print('\n' + '=' * 60)
    
    if success:
        print('‚úÖ –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ò–°–ü–†–ê–í–õ–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢ –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò!')
    else:
        print('‚ùå –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô')
        
    print('=' * 60)