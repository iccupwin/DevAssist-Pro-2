version: '3.8'

services:
  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_dev
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_secure_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist -d devassist_pro"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - devassist-network

  # ===== CACHE =====
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_dev
    ports:
      - "6378:6379"
    command: redis-server --requirepass redis_password --appendonly yes --save 60 1
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - devassist-network

  # ===== BACKEND API GATEWAY =====
  api-gateway:
    build:
      context: ./backend
      dockerfile: api_gateway/Dockerfile.dev
    container_name: devassist_api_gateway_dev
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://devassist:devassist_secure_password@postgres:5432/devassist_pro
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:8501
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devassist-network
    volumes:
      - ./backend/shared:/app/shared
      - ./backend/data/uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== AUTH SERVICE =====
  auth-service:
    build:
      context: ./backend
      dockerfile: services/auth/Dockerfile
    container_name: devassist_auth_service_dev
    environment:
      - DATABASE_URL=postgresql://devassist:devassist_secure_password@postgres:5432/devassist_pro
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - YANDEX_CLIENT_ID=${YANDEX_CLIENT_ID}
      - YANDEX_CLIENT_SECRET=${YANDEX_CLIENT_SECRET}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devassist-network
    volumes:
      - ./backend/shared:/app/shared
    restart: unless-stopped

  # ===== LLM SERVICE =====
  llm-service:
    build:
      context: ./backend
      dockerfile: services/llm/Dockerfile
    container_name: devassist_llm_service_dev
    environment:
      - DATABASE_URL=postgresql://devassist:devassist_secure_password@postgres:5432/devassist_pro
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devassist-network
    volumes:
      - ./backend/shared:/app/shared
    restart: unless-stopped

  # ===== DOCUMENTS SERVICE =====
  documents-service:
    build:
      context: ./backend
      dockerfile: services/documents/Dockerfile
    container_name: devassist_documents_service_dev
    environment:
      - DATABASE_URL=postgresql://devassist:devassist_secure_password@postgres:5432/devassist_pro
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=100MB
      - ALLOWED_FILE_TYPES=pdf,docx,xlsx,txt
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devassist-network
    volumes:
      - ./backend/shared:/app/shared
      - ./backend/data/uploads:/app/uploads
    restart: unless-stopped

  # ===== DASHBOARD SERVICE =====
  dashboard-service:
    build:
      context: ./backend
      dockerfile: services/dashboard/Dockerfile
    container_name: devassist_dashboard_service_dev
    environment:
      - DATABASE_URL=postgresql://devassist:devassist_secure_password@postgres:5432/devassist_pro
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - devassist-network
    volumes:
      - ./backend/shared:/app/shared
    restart: unless-stopped

  # ===== REACT FRONTEND =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: devassist_frontend_dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
      - REACT_APP_USE_REAL_API=true
      - REACT_APP_ANTHROPIC_API_KEY=${REACT_APP_ANTHROPIC_API_KEY}
      - REACT_APP_OPENAI_API_KEY=${REACT_APP_OPENAI_API_KEY}
      - REACT_APP_GOOGLE_API_KEY=${REACT_APP_GOOGLE_API_KEY}
      - REACT_APP_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - REACT_APP_YANDEX_CLIENT_ID=${YANDEX_CLIENT_ID}
      - REACT_APP_MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - REACT_APP_ENVIRONMENT=development
      - REACT_APP_ENABLE_FILE_UPLOAD=true
      - REACT_APP_ENABLE_STREAMING=true
      - REACT_APP_MAX_FILE_SIZE=10485760
      - REACT_APP_SUPPORTED_FORMATS=pdf,docx,doc,txt
      - WDS_SOCKET_HOST=localhost
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - api-gateway
    networks:
      - devassist-network
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    stdin_open: true
    tty: true
    restart: unless-stopped

  # ===== STREAMLIT LEGACY (OPTIONAL) =====
  streamlit-legacy:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: devassist_streamlit_legacy_dev
    ports:
      - "8501:8501"
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://devassist:devassist_secure_password@postgres:5432/devassist_pro
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ENABLE_CORS=true
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - devassist-network
    volumes:
      - ./src:/app/src
      - streamlit_data:/app/src/data
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  streamlit_data:
    driver: local

networks:
  devassist-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16