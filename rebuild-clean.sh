#!/bin/bash

echo "üöÄ –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–°–ë–û–†–ö–ê BACKEND –ë–ï–ó –û–®–ò–ë–û–ö"
echo "======================================="
echo ""

echo "üõë –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
cd backend
docker compose -f docker-compose.monolith.yml down -v --remove-orphans
docker system prune -f

echo ""
echo "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤ backend..."
docker rmi backend-app 2>/dev/null || true
docker rmi $(docker images | grep backend | awk '{print $3}') 2>/dev/null || true

echo ""
echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏ app.py..."

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
cp app.py app.py.backup.$(date +%Y%m%d_%H%M%S)

# –¢–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ
sed -i '/response\.get.*success.*–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/d' app.py
sed -i '/response\.get.*success.*–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/d' app.py

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö response = await
sed -i '/response = await auth_manager\.register_user(user_data)/a\        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.email}")' app.py
sed -i '/response = await auth_manager\.login_user(login_data)/a\        logger.info(f"–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login_data.email}")' app.py

echo "‚úÖ app.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"

echo ""
echo "üê≥ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ —Å –Ω—É–ª—è..."
docker compose -f docker-compose.monolith.yml build --no-cache

echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ —á–∏—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏..."
docker compose -f docker-compose.monolith.yml up -d

echo ""
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose -f docker-compose.monolith.yml ps

echo ""
echo "üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï"
echo "====================="

# 1. Health Check
echo "üîç 1. Health Check:"
HEALTH=$(curl -s --max-time 10 "http://localhost:8000/health" 2>/dev/null || echo "TIMEOUT")
if echo "$HEALTH" | grep -q "healthy"; then
    echo "   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
    echo "   –û—Ç–≤–µ—Ç: $(echo "$HEALTH" | head -c 80)..."
    HEALTH_OK=true
else
    echo "   ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
    echo "   –û—Ç–≤–µ—Ç: $HEALTH"
    HEALTH_OK=false
fi

if [ "$HEALTH_OK" = true ]; then
    # 2. CORS Test
    echo "üåê 2. CORS Test:"
    CORS=$(curl -s -i -X OPTIONS \
        -H "Origin: http://46.149.71.162:3000" \
        -H "Access-Control-Request-Method: POST" \
        -H "Access-Control-Request-Headers: Content-Type" \
        "http://localhost:8000/api/auth/login" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$CORS" | grep -qi "access-control-allow-origin"; then
        echo "   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        echo "   Headers: $(echo "$CORS" | grep -i "access-control-allow-origin")"
        CORS_OK=true
    else
        echo "   ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        CORS_OK=false
    fi
    
    # 3. Authentication Test
    echo "üîê 3. Authentication Test:"
    AUTH=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Origin: http://46.149.71.162:3000" \
        -d '{"email":"admin@devassist.pro","password":"admin123"}' \
        "http://localhost:8000/api/auth/login" 2>/dev/null || echo "TIMEOUT")
    
    echo "   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: $AUTH"
    
    if echo "$AUTH" | grep -q '"success":true'; then
        echo "   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        AUTH_OK=true
    else
        echo "   ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        AUTH_OK=false
    fi
    
    # 4. Registration Test
    echo "üë§ 4. Registration Test:"
    REG=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Origin: http://46.149.71.162:3000" \
        -d '{"email":"testuser@example.com","password":"test123","full_name":"Test User","company":"Test"}' \
        "http://localhost:8000/api/auth/register" 2>/dev/null || echo "TIMEOUT")
    
    if echo "$REG" | grep -q '"success":true'; then
        echo "   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        REG_OK=true
    else
        echo "   ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        echo "   –û—Ç–≤–µ—Ç: $(echo "$REG" | head -c 80)..."
        REG_OK=false
    fi
    
    # 5. External Access Test
    echo "üåç 5. External Access Test:"
    EXT=$(curl -s --max-time 10 "http://46.149.71.162:8000/health" 2>/dev/null || echo "TIMEOUT")
    if echo "$EXT" | grep -q "healthy"; then
        echo "   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢"
        EXT_OK=true
    else
        echo "   ‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        EXT_OK=false
    fi
    
else
    CORS_OK=false
    AUTH_OK=false
    REG_OK=false
    EXT_OK=false
fi

echo ""
echo "üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "======================"

if [ "$HEALTH_OK" = true ] && [ "$CORS_OK" = true ] && [ "$AUTH_OK" = true ] && [ "$EXT_OK" = true ]; then
    echo ""
    echo "üéâüéâüéâ –ò–î–ï–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! üéâüéâüéâ"
    echo ""
    echo "‚úÖ Health Check: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ CORS: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ Authentication: –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç"
    echo "‚úÖ Registration: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo "‚úÖ External Access: –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    echo ""
    echo "üåê –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê:"
    echo ""
    echo "   üñ•Ô∏è  Frontend:     http://46.149.71.162:3000"
    echo "   ‚öôÔ∏è  Backend:      http://46.149.71.162:8000"
    echo "   üìñ API Docs:     http://46.149.71.162:8000/docs"
    echo "   üíì Health:       http://46.149.71.162:8000/health"
    echo ""
    echo "üë§ –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï:"
    echo "   üìß Email:    admin@devassist.pro"
    echo "   üîë Password: admin123"
    echo ""
    echo "üéä DEVASSIST PRO –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!"
    echo ""
    echo "üì± FRONTEND –¢–ï–ü–ï–†–¨ –ú–û–ñ–ï–¢:"
    echo "   ‚Ä¢ ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    echo "   ‚Ä¢ ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" 
    echo "   ‚Ä¢ ‚úÖ –î–µ–ª–∞—Ç—å API –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –æ—à–∏–±–æ–∫"
    echo "   ‚Ä¢ ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
    
elif [ "$HEALTH_OK" = true ]; then
    echo "‚ö†Ô∏è  –û–°–ù–û–í–ù–û–ï –†–ê–ë–û–¢–ê–ï–¢, –ú–ï–õ–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:"
    echo ""
    echo "‚úÖ Backend: –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
    [ "$CORS_OK" != true ] && echo "‚ùå CORS: –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"
    [ "$AUTH_OK" != true ] && echo "‚ùå Authentication: –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"
    [ "$REG_OK" != true ] && echo "‚ùå Registration: –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"  
    [ "$EXT_OK" != true ] && echo "‚ùå External Access: –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"
    
    echo ""
    echo "üí° –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥–æ—Ç–æ–≤, frontend —É–∂–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!"
    
else
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´"
    echo ""
    echo "Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≥–∏:"
    docker compose -f docker-compose.monolith.yml logs app | tail -20
fi

echo ""
echo "üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–û–ô:"
echo "   –õ–æ–≥–∏:        docker compose -f docker-compose.monolith.yml logs app"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:  docker compose -f docker-compose.monolith.yml restart"
echo "   –°—Ç–∞—Ç—É—Å:      docker compose -f docker-compose.monolith.yml ps"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:   docker compose -f docker-compose.monolith.yml down"

cd ..
echo ""
echo "‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"