#!/bin/bash

# DevAssist Pro - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_info "üöÄ DevAssist Pro - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫"
echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É Docker Compose
if command -v "docker" >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
    DOCKER_CMD="docker compose"
    print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º Docker Compose V2"
elif command -v "docker-compose" >/dev/null 2>&1; then
    DOCKER_CMD="docker-compose"
    print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º Docker Compose V1"
else
    print_error "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
$DOCKER_CMD down 2>/dev/null || true
$DOCKER_CMD -f docker-compose.final.yml down 2>/dev/null || true
$DOCKER_CMD -f docker-compose.production.yml down 2>/dev/null || true
$DOCKER_CMD -f docker-compose.microservices.yml down 2>/dev/null || true
print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã
print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã..."

# 1. –°–æ–∑–¥–∞–µ–º Dockerfile.minimal –¥–ª—è frontend
if [ ! -f "frontend/Dockerfile.minimal" ]; then
    print_info "–°–æ–∑–¥–∞–µ–º frontend/Dockerfile.minimal..."
    cat > frontend/Dockerfile.minimal << 'EOF'
# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the app
RUN npm run build

# Production stage  
FROM nginx:alpine

# Copy built app to nginx
COPY --from=build /app/build /usr/share/nginx/html

# Create simple nginx config
RUN echo 'server { \
    listen 80; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
EOF
    print_success "–°–æ–∑–¥–∞–Ω frontend/Dockerfile.minimal"
fi

# 2. –°–æ–∑–¥–∞–µ–º Dockerfile.prod –¥–ª—è frontend
if [ ! -f "frontend/Dockerfile.prod" ]; then
    print_info "–°–æ–∑–¥–∞–µ–º frontend/Dockerfile.prod..."
    cat > frontend/Dockerfile.prod << 'EOF'
# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy source code
COPY . .

# Build the app
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built app to nginx
COPY --from=build /app/build /usr/share/nginx/html

# Create nginx config
RUN echo 'server { \
    listen 80; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
    location /api { \
        proxy_pass http://app:8000; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
    } \
}' > /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
EOF
    print_success "–°–æ–∑–¥–∞–Ω frontend/Dockerfile.prod"
fi

# 3. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f ".env" ]; then
    print_info "–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env..."
    cat > .env << 'EOF'
# Database Configuration
POSTGRES_PASSWORD=devassist_secure_password_2024
REDIS_PASSWORD=redis_secure_password_2024

# Security
JWT_SECRET=your_jwt_secret_key_minimum_32_characters_long_random_string_12345

# AI API Keys (–¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–∏ –∑–¥–µ—Å—å)
ANTHROPIC_API_KEY=
OPENAI_API_KEY=
GOOGLE_API_KEY=

# Application
ENVIRONMENT=production
DEBUG=false
HOST=0.0.0.0
PORT=8000

# CORS
ALLOWED_ORIGINS=http://46.149.71.162,http://localhost,https://46.149.71.162

# File Upload
MAX_FILE_SIZE=50MB
UPLOAD_DIR=/app/data/uploads
EOF
    print_success "–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env"
else
    print_info "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# 4. –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
print_info "–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
mkdir -p logs
mkdir -p data/postgres
mkdir -p data/redis
mkdir -p data/uploads
print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞
print_info "–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞..."

COMPOSE_FILE=""
CONFIG_NAME=""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if [ -f "docker-compose.production.yml" ]; then
    COMPOSE_FILE="docker-compose.production.yml"
    CONFIG_NAME="Production"
elif [ -f "docker-compose.final.yml" ]; then
    COMPOSE_FILE="docker-compose.final.yml"
    CONFIG_NAME="Final"
elif [ -f "docker-compose.monolith.yml" ]; then
    COMPOSE_FILE="docker-compose.monolith.yml"
    CONFIG_NAME="Monolith"
else
    COMPOSE_FILE="docker-compose.yml"
    CONFIG_NAME="Default"
fi

print_info "–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: $CONFIG_NAME ($COMPOSE_FILE)"

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ required —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ "$COMPOSE_FILE" = "docker-compose.final.yml" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Dockerfile.monolith –¥–ª—è backend
    if [ ! -f "backend/Dockerfile.monolith" ]; then
        print_warning "–°–æ–∑–¥–∞–µ–º backend/Dockerfile.monolith..."
        cat > backend/Dockerfile.monolith << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Set Python path
ENV PYTHONPATH=/app:$PYTHONPATH

# Create data directories
RUN mkdir -p /app/data/uploads /app/logs

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

CMD ["python", "app_simple.py"]
EOF
        print_success "–°–æ–∑–¥–∞–Ω backend/Dockerfile.monolith"
    fi
fi

# 7. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –∏ –∫—ç—à
print_info "–û—á–∏—â–∞–µ–º Docker –∫—ç—à..."
docker system prune -f >/dev/null 2>&1 || true
print_success "–ö—ç—à –æ—á–∏—â–µ–Ω"

# 8. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
print_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π $CONFIG_NAME..."

# –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
if $DOCKER_CMD -f $COMPOSE_FILE up -d; then
    print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
else
    print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å $CONFIG_NAME, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥..."
    
    # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∑–∞–ø—É—Å–∫—É
    if [ -f "docker-compose.yml" ]; then
        print_info "–ü—Ä–æ–±—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é..."
        $DOCKER_CMD -f docker-compose.yml up -d
        print_success "–ó–∞–ø—É—â–µ–Ω–æ —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
    else
        print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        exit 1
    fi
fi

# 9. –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
print_info "–ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (15 —Å–µ–∫—É–Ω–¥)..."
sleep 15

# 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
$DOCKER_CMD -f $COMPOSE_FILE ps

# 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
check_service() {
    local url=$1
    local name=$2
    if curl -f -s "$url" >/dev/null 2>&1; then
        print_success "‚úì $name –¥–æ—Å—Ç—É–ø–µ–Ω"
        return 0
    else
        print_warning "‚úó $name –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
}

# –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
sleep 10

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo ""
print_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
check_service "http://localhost:8000/health" "Backend API (8000)"
check_service "http://localhost" "Frontend (80)" || check_service "http://localhost:3000" "Frontend (3000)"

# 12. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
echo ""
print_success "================================================"
print_success "  üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
print_success "================================================"
echo ""
print_info "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
print_info "   üåê Frontend:        http://46.149.71.162"
print_info "   üîß Admin Panel:     http://46.149.71.162/admin"
print_info "   üöÄ Backend API:     http://46.149.71.162:8000"
print_info "   üìä Health Check:    http://46.149.71.162:8000/health"
echo ""
print_info "üõ†Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
print_info "   –õ–æ–≥–∏:         $DOCKER_CMD -f $COMPOSE_FILE logs -f"
print_info "   –°—Ç–∞—Ç—É—Å:       $DOCKER_CMD -f $COMPOSE_FILE ps"
print_info "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:    $DOCKER_CMD -f $COMPOSE_FILE down"
print_info "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:   $DOCKER_CMD -f $COMPOSE_FILE restart"
echo ""

# 13. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å—Ç—Ä–æ–∫
print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
$DOCKER_CMD -f $COMPOSE_FILE logs --tail=10

echo ""
print_success "‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: http://46.149.71.162/admin"