#!/bin/bash

# DevAssist Pro - Production Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ unified –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
    if lsof -Pi :80 -sTCP:LISTEN -t >/dev/null; then
        log_warning "–ü–æ—Ä—Ç 80 —É–∂–µ –∑–∞–Ω—è—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ—Ä—Ç."
    fi
    
    log_success "–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ environment
setup_environment() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ environment..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f .env ]; then
        if [ -f .env.production ]; then
            log_info "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env.production –≤ .env"
            cp .env.production .env
        else
            log_error "–ù–µ –Ω–∞–π–¥–µ–Ω .env.production —Ñ–∞–π–ª!"
            exit 1
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if ! grep -q "ANTHROPIC_API_KEY=your_real" .env; then
        log_warning "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ!"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p nginx/ssl
    mkdir -p backend/data/uploads
    mkdir -p backend/data/reports
    mkdir -p logs
    
    log_success "Environment –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
build_images() {
    log_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –°–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    docker-compose -f docker-compose.unified.yml build --no-cache
    
    log_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
deploy_services() {
    log_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker-compose -f docker-compose.unified.yml down --remove-orphans
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.unified.yml up -d
    
    log_success "–°–µ—Ä–≤–∏—Å—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks
check_health() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    services=("postgres" "redis" "backend" "frontend" "nginx")
    
    for service in "${services[@]}"; do
        log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ $service..."
        
        if docker-compose -f docker-compose.unified.yml ps "$service" | grep -q "Up"; then
            log_success "$service –∑–∞–ø—É—â–µ–Ω"
        else
            log_error "$service –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
            docker-compose -f docker-compose.unified.yml logs "$service"
            exit 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP endpoints..."
    
    # Nginx health check
    if curl -f http://localhost/health > /dev/null 2>&1; then
        log_success "Nginx health check –ø—Ä–æ—à–µ–ª"
    else
        log_error "Nginx health check –Ω–µ –ø—Ä–æ—à–µ–ª!"
        exit 1
    fi
    
    # Backend API health check
    if curl -f http://localhost/api/health > /dev/null 2>&1; then
        log_success "Backend API health check –ø—Ä–æ—à–µ–ª"
    else
        log_error "Backend API health check –Ω–µ –ø—Ä–æ—à–µ–ª!"
        exit 1
    fi
    
    log_success "–í—Å–µ health checks –ø—Ä–æ—à–ª–∏"
}

# –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤
show_logs() {
    log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f docker-compose.unified.yml logs --tail=50
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
    docker-compose -f docker-compose.unified.yml ps
    
    echo ""
    log_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:"
    echo "üåê Frontend: http://localhost"
    echo "üöÄ Backend API: http://localhost/api"
    echo "üìä API Docs: http://localhost/api/docs"
    echo "üîç Health Check: http://localhost/health"
    echo ""
    
    log_info "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "üìã –õ–æ–≥–∏: docker-compose -f docker-compose.unified.yml logs -f"
    echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.unified.yml down"
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.unified.yml restart"
}

# Cleanup —Ñ—É–Ω–∫—Ü–∏—è
cleanup() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker-compose -f docker-compose.unified.yml down --remove-orphans
    docker system prune -f
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# Backup —Ñ—É–Ω–∫—Ü–∏—è
backup_data() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∞–Ω–Ω—ã—Ö..."
    
    timestamp=$(date +%Y%m%d_%H%M%S)
    backup_dir="backup_$timestamp"
    
    mkdir -p "$backup_dir"
    
    # Backup PostgreSQL
    docker exec devassist_postgres_unified pg_dump -U devassist devassist_pro > "$backup_dir/postgres_backup.sql"
    
    # Backup volumes
    docker run --rm -v devassist_app_data:/data -v $(pwd)/$backup_dir:/backup alpine tar czf /backup/app_data.tar.gz -C /data .
    
    log_success "Backup —Å–æ–∑–¥–∞–Ω –≤ $backup_dir"
}

# Restore —Ñ—É–Ω–∫—Ü–∏—è
restore_data() {
    if [ -z "$1" ]; then
        log_error "–£–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backup –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        exit 1
    fi
    
    backup_dir=$1
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ $backup_dir..."
    
    # Restore PostgreSQL
    if [ -f "$backup_dir/postgres_backup.sql" ]; then
        docker exec -i devassist_postgres_unified psql -U devassist devassist_pro < "$backup_dir/postgres_backup.sql"
        log_success "PostgreSQL –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
    
    # Restore volumes
    if [ -f "$backup_dir/app_data.tar.gz" ]; then
        docker run --rm -v devassist_app_data:/data -v $(pwd)/$backup_dir:/backup alpine tar xzf /backup/app_data.tar.gz -C /data
        log_success "App data –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

# Monitoring setup
setup_monitoring() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    docker-compose -f docker-compose.unified.yml --profile monitoring up -d
    log_success "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ :9113"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "$1" in
        "build")
            check_requirements
            setup_environment
            build_images
            ;;
        "deploy")
            check_requirements
            setup_environment
            build_images
            deploy_services
            check_health
            show_status
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_logs
            ;;
        "health")
            check_health
            ;;
        "cleanup")
            cleanup
            ;;
        "backup")
            backup_data
            ;;
        "restore")
            restore_data "$2"
            ;;
        "monitoring")
            setup_monitoring
            ;;
        "quick")
            # –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫
            docker-compose -f docker-compose.unified.yml up -d
            ;;
        "stop")
            docker-compose -f docker-compose.unified.yml down
            ;;
        "restart")
            docker-compose -f docker-compose.unified.yml restart
            ;;
        *)
            echo "DevAssist Pro - Production Deployment Script"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {–∫–æ–º–∞–Ω–¥–∞}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  build      - –¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
            echo "  deploy     - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
            echo "  status     - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  health     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health checks"
            echo "  cleanup    - –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã"
            echo "  backup     - –°–æ–∑–¥–∞—Ç—å backup –¥–∞–Ω–Ω—ã—Ö"
            echo "  restore    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup"
            echo "  monitoring - –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            echo "  quick      - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
            echo "  stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
            echo "  restart    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 deploy          # –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
            echo "  $0 status          # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
            echo "  $0 backup          # –°–æ–∑–¥–∞—Ç—å backup"
            echo "  $0 restore backup_20240119_120000  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
            ;;
    esac
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫
if [ $# -eq 0 ]; then
    main "help"
else
    main "$@"
fi