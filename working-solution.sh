#!/bin/bash

# Working Solution –¥–ª—è DevAssist Pro
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É—è TypeScript –æ—à–∏–±–∫–∏

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üöÄ Working Solution –¥–ª—è DevAssist Pro"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down 2>/dev/null || true
docker stop $(docker ps -aq) 2>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ tsconfig –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ TypeScript –±–µ–∑ —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
cat > frontend/tsconfig.prod.json << 'EOF'
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": false,
    "noImplicitAny": false,
    "strictNullChecks": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è frontend —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
log "–°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è frontend..."
cat > frontend/.env << 'EOF'
SKIP_PREFLIGHT_CHECK=true
TSC_COMPILE_ON_ERROR=true
ESLINT_NO_DEV_ERRORS=true
DISABLE_ESLINT_PLUGIN=true
REACT_APP_API_URL=http://46.149.71.162:8000
REACT_APP_WS_URL=ws://46.149.71.162:8000/ws
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ docker-compose
log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > docker-compose.working.yml << 'EOF'
services:
  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - devassist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: devassist_redis
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - devassist-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend - —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.monolith
    container_name: devassist_backend
    ports:
      - "8000:8000"
    environment:
      POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      DATABASE_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      REDIS_URL: redis://:redis_password@redis:6379/0
      ADMIN_PASSWORD: admin123
      ADMIN_EMAIL: admin@devassist.pro
      DEBUG: false
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      ALLOWED_ORIGINS: "*"
      MAX_FILE_SIZE: 50MB
      SUPPORTED_FORMATS: pdf,docx,txt
      ANTHROPIC_API_KEY: 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
      USE_REAL_API: true
      HOST: 0.0.0.0
      PORT: 8000
    volumes:
      - app_data:/app/data
    networks:
      - devassist-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ TypeScript
  frontend:
    image: node:18-alpine
    container_name: devassist_frontend
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - ./frontend/.env:/app/.env
      - ./frontend/tsconfig.prod.json:/app/tsconfig.json
    environment:
      SKIP_PREFLIGHT_CHECK: true
      TSC_COMPILE_ON_ERROR: true
      ESLINT_NO_DEV_ERRORS: true
      DISABLE_ESLINT_PLUGIN: true
      REACT_APP_API_URL: http://46.149.71.162:8000
      REACT_APP_WS_URL: ws://46.149.71.162:8000/ws
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 3000
    command: sh -c "npm install --force --silent && npm start"
    networks:
      - devassist-network
    depends_on:
      - backend

  # Nginx - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–∫—Å–∏
  nginx:
    image: nginx:alpine
    container_name: devassist_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/working.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - devassist-network
    depends_on:
      - backend
      - frontend

networks:
  devassist-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  app_data:
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log "–°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
mkdir -p nginx
cat > nginx/working.conf << 'EOF'
server {
    listen 80;
    server_name _;

    # Frontend (–µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    location / {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # –ï—Å–ª–∏ frontend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º API docs
        error_page 502 503 504 = @backend_docs;
    }

    # Fallback to backend docs
    location @backend_docs {
        return 302 /docs;
    }

    # Backend API
    location /api/ {
        proxy_pass http://backend:8000/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API docs - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
    location /docs {
        proxy_pass http://backend:8000/docs;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    location /openapi.json {
        proxy_pass http://backend:8000/openapi.json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    location /redoc {
        proxy_pass http://backend:8000/redoc;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
    }

    # Health check
    location /health {
        proxy_pass http://backend:8000/health;
    }
}
EOF

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
docker compose -f docker-compose.working.yml up -d postgres redis

log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î (20 —Å–µ–∫)..."
sleep 20

log "–ó–∞–ø—É—Å–∫ backend..."
docker compose -f docker-compose.working.yml up -d backend

log "–û–∂–∏–¥–∞–Ω–∏–µ backend (20 —Å–µ–∫)..."
sleep 20

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
if curl -f -s "http://localhost:8000/health" > /dev/null 2>&1; then
    info "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
else
    error "Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è!"
    docker compose -f docker-compose.working.yml logs backend
    exit 1
fi

log "–ó–∞–ø—É—Å–∫ frontend (—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º TypeScript –æ—à–∏–±–æ–∫)..."
docker compose -f docker-compose.working.yml up -d frontend

log "–ó–∞–ø—É—Å–∫ Nginx..."
docker compose -f docker-compose.working.yml up -d nginx

log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫)..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f docker-compose.working.yml ps

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo
log "üéâ Working Solution –∑–∞–ø—É—â–µ–Ω!"
echo
info "üìç –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–µ–∫—Ç—É:"
info "   üîß Backend API:   http://46.149.71.162:8000/"
info "   üìö API Docs:      http://46.149.71.162:8000/docs ‚úÖ"
info "   üìä Health Check:  http://46.149.71.162:8000/health ‚úÖ"
info "   üåê –ß–µ—Ä–µ–∑ Nginx:   http://46.149.71.162/"
echo
info "   ‚öõÔ∏è  Frontend:      http://46.149.71.162:3000/ (–º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—à–∏–±–∫–∞–º–∏)"
echo
info "üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
info "   Email:    admin@devassist.pro"
info "   Password: admin123"
echo
warning "‚ö†Ô∏è  Frontend –∏–º–µ–µ—Ç TypeScript –æ—à–∏–±–∫–∏, –Ω–æ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"
warning "   –ï—Å–ª–∏ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –Ω–∞–ø—Ä—è–º—É—é"
echo
info "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
info "   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API —á–µ—Ä–µ–∑ Swagger UI: http://46.149.71.162:8000/docs"
info "   2. Backend –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω"
info "   3. Frontend –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ"
echo
info "üîß –ö–æ–º–∞–Ω–¥—ã:"
info "   –õ–æ–≥–∏ backend:  docker compose -f docker-compose.working.yml logs -f backend"
info "   –õ–æ–≥–∏ frontend: docker compose -f docker-compose.working.yml logs -f frontend"
info "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:    docker compose -f docker-compose.working.yml down"
echo
log "‚ú® Backend API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ Swagger UI!"