#!/usr/bin/env python3
"""
üö® –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production
DevAssist Pro - Production Security Validator
"""

import os
import sys
import re
from pathlib import Path
from typing import List, Dict, Any

def check_environment_variables() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    errors = []
    warnings = []
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    critical_vars = [
        'JWT_SECRET_KEY',
        'DATABASE_URL', 
        'REDIS_URL',
        'ANTHROPIC_API_KEY',
        'ADMIN_PASSWORD'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    for var in critical_vars:
        if not os.getenv(var):
            errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var}")
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            value = os.getenv(var)
            if var == 'JWT_SECRET_KEY' and 'change_in_production' in value:
                errors.append(f"‚ùå {var} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
            elif var == 'ADMIN_PASSWORD' and value == 'admin123':
                errors.append(f"‚ùå {var} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            elif var == 'DATABASE_URL' and 'devassist_password' in value:
                errors.append(f"‚ùå {var} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            elif var == 'REDIS_URL' and 'redis_password' in value:
                errors.append(f"‚ùå {var} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
            elif var == 'ANTHROPIC_API_KEY' and 'your_' in value:
                warnings.append(f"‚ö†Ô∏è {var} –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å placeholder")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ environment
    env = os.getenv('ENVIRONMENT', 'development')
    if env == 'production':
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è production
        if 'localhost' in os.getenv('ALLOWED_ORIGINS', ''):
            errors.append("‚ùå ALLOWED_ORIGINS –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å localhost –≤ production!")
        
        if os.getenv('DEBUG', 'false').lower() == 'true':
            warnings.append("‚ö†Ô∏è DEBUG –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –≤ production")
    
    return {
        'errors': errors,
        'warnings': warnings,
        'environment': env
    }

def check_hardcoded_secrets() -> Dict[str, Any]:
    """–ü–æ–∏—Å–∫ hardcoded —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ"""
    errors = []
    warnings = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    patterns = [
        (r'password.*=.*["\'].*["\']', 'Hardcoded password found'),
        (r'secret.*=.*["\'].*["\']', 'Hardcoded secret found'),
        (r'api_key.*=.*["\'].*["\']', 'Hardcoded API key found'),
        (r'localhost:\d+', 'Hardcoded localhost URL found'),
        (r'admin123', 'Default admin password found'),
        (r'devassist_password', 'Default database password found'),
        (r'redis_password', 'Default redis password found'),
    ]
    
    # –ü–æ–∏—Å–∫ –≤ Python —Ñ–∞–π–ª–∞—Ö
    for py_file in Path('.').rglob('*.py'):
        if 'check_production_ready.py' in str(py_file):
            continue
            
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
                for pattern, message in patterns:
                    matches = re.findall(pattern, content, re.IGNORECASE)
                    if matches:
                        errors.append(f"‚ùå {py_file}: {message}")
        except Exception as e:
            warnings.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {py_file}: {e}")
    
    return {
        'errors': errors,
        'warnings': warnings
    }

def check_config_files() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
    env_files = ['.env', '.env.production', '.env.local']
    for env_file in env_files:
        if os.path.exists(env_file):
            try:
                with open(env_file, 'r') as f:
                    content = f.read()
                    if 'admin123' in content:
                        errors.append(f"‚ùå {env_file} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å admin123")
                    if 'your_' in content and 'api_key' in content:
                        warnings.append(f"‚ö†Ô∏è {env_file} –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å placeholder API keys")
            except Exception as e:
                warnings.append(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {env_file}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ .env –Ω–µ –≤ git
    if os.path.exists('.gitignore'):
        with open('.gitignore', 'r') as f:
            gitignore_content = f.read()
            if '.env' not in gitignore_content:
                errors.append("‚ùå .env —Ñ–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore!")
    
    return {
        'errors': errors,
        'warnings': warnings
    }

def check_dependencies() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    errors = []
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt
    if os.path.exists('requirements.txt'):
        with open('requirements.txt', 'r') as f:
            reqs = f.read()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ development –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            dev_deps = ['pytest', 'debug', 'test']
            for dep in dev_deps:
                if dep in reqs.lower():
                    warnings.append(f"‚ö†Ô∏è requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {dep}")
    
    return {
        'errors': errors,
        'warnings': warnings
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ DevAssist Pro –∫ production...")
    print("=" * 60)
    
    all_errors = []
    all_warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_check = check_environment_variables()
    all_errors.extend(env_check['errors'])
    all_warnings.extend(env_check['warnings'])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ hardcoded —Å–µ–∫—Ä–µ—Ç–æ–≤
    print("\n2. –ü–æ–∏—Å–∫ hardcoded —Å–µ–∫—Ä–µ—Ç–æ–≤...")
    secrets_check = check_hardcoded_secrets()
    all_errors.extend(secrets_check['errors'])
    all_warnings.extend(secrets_check['warnings'])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    config_check = check_config_files()
    all_errors.extend(config_check['errors'])
    all_warnings.extend(config_check['warnings'])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    deps_check = check_dependencies()
    all_errors.extend(deps_check['errors'])
    all_warnings.extend(deps_check['warnings'])
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 60)
    
    if all_errors:
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
        for error in all_errors:
            print(f"  {error}")
    
    if all_warnings:
        print("\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for warning in all_warnings:
            print(f"  {warning}")
    
    if not all_errors and not all_warnings:
        print("\n‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ production!")
        return 0
    elif not all_errors:
        print("\n‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
        return 0
    else:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(all_errors)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫!")
        print("‚ùå –ü—Ä–æ–µ–∫—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ production!")
        return 1

if __name__ == "__main__":
    sys.exit(main())