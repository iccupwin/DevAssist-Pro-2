#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint /api/llm/analyze-detailed
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü –ø–æ 10 —Ä–∞–∑–¥–µ–ª–∞–º
"""

import asyncio
import aiohttp
import json
import time
from typing import Dict, Any

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
SAMPLE_TZ = """
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏

–û–ë–©–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: 2 500 000 —Ä—É–±–ª–µ–π
- –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 6 –º–µ—Å—è—Ü–µ–≤

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- Frontend: React.js –∏–ª–∏ Vue.js
- Backend: Python (Django/FastAPI) –∏–ª–∏ Node.js
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL
- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
- SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ HTTPS

–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
- –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞—á —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
- –§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
- –û—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (email + –≤–Ω—É—Ç—Ä–∏ —Å–∏—Å—Ç–µ–º—ã)

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
- –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
- –ñ—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

SAMPLE_KP = """
–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –û–û–û "–¢–µ—Ö–Ω–æ–°–æ—Ñ—Ç"

–ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï:
–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–∞ –±–∞–∑–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:
- Frontend: React.js + TypeScript
- Backend: FastAPI (Python)
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL 14
- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è: Docker + Docker Compose
- –û–±–ª–∞—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: AWS/Azure

–°–¢–û–ò–ú–û–°–¢–¨ –ü–†–û–ï–ö–¢–ê:
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 2 200 000 —Ä—É–±–ª–µ–π
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ frontend: 800 000 ‚ÇΩ
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend: 900 000 ‚ÇΩ
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ API: 300 000 ‚ÇΩ
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 200 000 ‚ÇΩ
- –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: 100 000 ‚ÇΩ (–≤–∫–ª—é—á–∞—è $500 –∑–∞ AWS)

–°–†–û–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
–û–±—â–∏–π —Å—Ä–æ–∫: 5.5 –º–µ—Å—è—Ü–µ–≤
1. –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 3 –Ω–µ–¥–µ–ª–∏
2. Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - 8 –Ω–µ–¥–µ–ª—å  
3. Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - 10 –Ω–µ–¥–µ–ª—å
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - 6 –Ω–µ–¥–µ–ª—å
5. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ - 2 –Ω–µ–¥–µ–ª–∏

–ö–û–ú–ê–ù–î–ê:
- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ (3+ –ª–µ—Ç –æ–ø—ã—Ç–∞)
- 2 Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (React.js, 2+ –ª–µ—Ç)
- 2 Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Python, FastAPI, 3+ –ª–µ—Ç)
- DevOps –∏–Ω–∂–µ–Ω–µ—Ä (Docker, AWS, 2+ –ª–µ—Ç)
- QA –∏–Ω–∂–µ–Ω–µ—Ä (–∞–≤—Ç–æ—Ç–µ—Å—Ç—ã, 2+ –ª–µ—Ç)

–ì–ê–†–ê–ù–¢–ò–ò:
- –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: 12 –º–µ—Å—è—Ü–µ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: 6 –º–µ—Å—è—Ü–µ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
- SLA 99.5% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω–æ

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–°–õ–£–ì–ò:
- –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (React Native) - 800 000 ‚ÇΩ
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 1–° - 150 000 —Ä—É–±
- –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ BI - 400 000 —Ä—É–±.
- –û–±—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - ‚Ç¨2000
"""

async def test_detailed_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    url = "http://localhost:8000/api/llm/analyze-detailed"
    
    payload = {
        "tz_content": SAMPLE_TZ,
        "kp_content": SAMPLE_KP,
        "model": "claude-3-5-sonnet-20241022",
        "max_tokens": 4000,
        "temperature": 0.1
    }
    
    print("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü...")
    print(f"üìç Endpoint: {url}")
    print(f"üìä –†–∞–∑–º–µ—Ä –¢–ó: {len(SAMPLE_TZ)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìä –†–∞–∑–º–µ—Ä –ö–ü: {len(SAMPLE_KP)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("-" * 80)
    
    start_time = time.time()
    
    try:
        async with aiohttp.ClientSession() as session:
            print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ backend...")
            
            async with session.post(url, json=payload, timeout=aiohttp.ClientTimeout(total=120)) as response:
                print(f"üì® –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: HTTP {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    processing_time = time.time() - start_time
                    
                    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {processing_time:.2f}—Å")
                    print_analysis_summary(result)
                    
                    return result
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status}")
                    print(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_text}")
                    return None
                    
    except asyncio.TimeoutError:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç)")
        return None
    except aiohttp.ClientError as e:
        print(f"üîó –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def print_analysis_summary(result: Dict[str, Any]):
    """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\n" + "="*80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
    print("="*80)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"üÜî ID –∞–Ω–∞–ª–∏–∑–∞: {result.get('analysis_id', 'N/A')}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 'N/A')}—Å")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('model_used', 'N/A')}")
    print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {'–£—Å–ø–µ—à–Ω–æ' if result.get('success', True) else '–û—à–∏–±–∫–∞'}")
    
    # –ê–Ω–∞–ª–∏–∑
    analysis = result.get('detailed_analysis', {})
    if analysis:
        print(f"\nüìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {analysis.get('overall_score', 'N/A')}%")
        
        # –í–∞–ª—é—Ç—ã
        currencies = analysis.get('currencies_detected', [])
        if currencies:
            print(f"üí∞ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∞–ª—é—Ç: {len(currencies)}")
            for currency in currencies[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {currency.get('symbol', '?')} {currency.get('name', 'Unknown')}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        print("\nüéØ –û–¶–ï–ù–ö–ò –ü–û –†–ê–ó–î–ï–õ–ê–ú:")
        sections = [
            ('budget_compliance', 'üí∞ –ë—é–¥–∂–µ—Ç'),
            ('timeline_compliance', '‚è±Ô∏è –°—Ä–æ–∫–∏'),
            ('technical_compliance', 'üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'),
            ('team_expertise', 'üë• –ö–æ–º–∞–Ω–¥–∞'),
            ('functional_coverage', 'üìã –§—É–Ω–∫—Ü–∏–∏'),
            ('security_quality', 'üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'),
            ('methodology_processes', '‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã'),
            ('scalability_support', 'üìà –ú–∞—Å—à—Ç–∞–±'),
            ('communication_reporting', 'üìû –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏'),
            ('additional_value', '‚≠ê –î–æ–ø.—Ü–µ–Ω–Ω–æ—Å—Ç—å')
        ]
        
        for section_key, section_name in sections:
            section_data = analysis.get(section_key, {})
            score = section_data.get('score', 0) if isinstance(section_data, dict) else 0
            risk = section_data.get('risk_level', 'medium') if isinstance(section_data, dict) else 'medium'
            print(f"   {section_name}: {score}% (—Ä–∏—Å–∫: {risk})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendation = analysis.get('final_recommendation', 'N/A')
        print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {recommendation.upper()}")
        
        # –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        summary = analysis.get('executive_summary', '')
        if summary:
            print(f"\nüìÑ –†–ï–ó–Æ–ú–ï:")
            print(f"   {summary[:200]}{'...' if len(summary) > 200 else ''}")
    
    print("\n" + "="*80)

async def test_endpoint_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend...")
    
    health_url = "http://localhost:8000/health"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(health_url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                if response.status == 200:
                    print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    print(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –î–ï–¢–ê–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –ö–ü")
    print("="*80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not await test_endpoint_availability():
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("\nüí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   cd backend && python app.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    result = await test_detailed_analysis()
    
    if result:
        print(f"\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        timestamp = int(time.time())
        filename = f"test_result_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    else:
        print(f"\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   1. Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω (python app.py)")
        print("   2. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ANTHROPIC_API_KEY –≤ .env")
        print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Claude API")
        print("   4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞")

if __name__ == "__main__":
    asyncio.run(main())