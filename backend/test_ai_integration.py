#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
"""
import os
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from services.llm.providers.anthropic_provider import AnthropicProvider
from prompts.prompt_manager import PromptManager

async def test_anthropic_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Anthropic Claude"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Anthropic Claude...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    provider = AnthropicProvider()
    prompt_manager = PromptManager()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è KP –∞–Ω–∞–ª–∏–∑–∞
    try:
        prompts = prompt_manager.get_prompts_for_document_type('kp_analysis')
        system_prompt = prompts.get('system_prompt', '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.')
        
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ."
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    test_document = """
    –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
    –û–¢: –û–û–û "–°—Ç—Ä–æ–π–¢–µ—Å—Ç"
    –û–±—ä–µ–∫—Ç: –ñ–∏–ª–æ–π –¥–æ–º 
    –°—Ç–æ–∏–º–æ—Å—Ç—å: 500 –º–ª–Ω —Ä—É–±–ª–µ–π
    –°—Ä–æ–∫: 18 –º–µ—Å—è—Ü–µ–≤
    –û–ø—ã—Ç: 10 –ª–µ—Ç –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ
    """
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude API...")
        
        response = await provider.generate_completion(
            messages=[
                {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫—É—é –æ—Ü–µ–Ω–∫—É:\n\n{test_document}"}
            ],
            system=system_prompt,
            max_tokens=500,
            temperature=0.1
        )
        
        print("‚úÖ –£–°–ü–ï–®–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CLAUDE!")
        print(f"üìù –û—Ç–≤–µ—Ç Claude ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print("=" * 50)
        print(response[:300] + "..." if len(response) > 300 else response)
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Claude: {e}")
        return False

async def test_full_analysis_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        from services.documents.core.enhanced_ai_analyzer import EnhancedAIAnalyzer
        
        analyzer = EnhancedAIAnalyzer()
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ö–ü
        kp_file = Path("demo_kp.txt")
        if kp_file.exists():
            kp_content = kp_file.read_text(encoding='utf-8')
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –ö–ü: {len(kp_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª demo_kp.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            kp_content = "–¢–µ—Å—Ç–æ–≤–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 500 –º–ª–Ω —Ä—É–±."
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        print("üìä –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ö–ü...")
        
        result = await analyzer.analyze_document(
            content=kp_content,
            document_type="kp",
            analysis_type="comprehensive"
        )
        
        print("‚úÖ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìà –û–±—â–∏–π –±–∞–ª–ª: {result.get('overall_score', 'N/A')}/100")
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(result.get('recommendations', []))}")
        print(f"üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏: {len(result.get('key_findings', []))}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        if 'summary' in result:
            print(f"üìã –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞: {result['summary'][:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("TESTING AI INTEGRATION DEVASSIST PRO")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    anthropic_key = os.getenv('ANTHROPIC_API_KEY', '')
    if not anthropic_key or anthropic_key == 'sk-ant-your-anthropic-api-key-here':
        print("‚ùå ANTHROPIC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    print(f"‚úÖ Anthropic API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {anthropic_key[:20]}...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude
    claude_success = await test_anthropic_integration()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª)
    if claude_success:
        pipeline_success = await test_full_analysis_pipeline()
        
        if pipeline_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ production")
            return True
    
    print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    return False

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = asyncio.run(main())
    sys.exit(0 if success else 1)