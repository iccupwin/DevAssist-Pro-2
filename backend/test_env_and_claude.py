#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ü–†–û–ë–õ–ï–ú CLAUDE API
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É environment variables –∏ Claude API connection
"""
import os
import sys
from dotenv import load_dotenv

def test_environment_loading():
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ENVIRONMENT VARIABLES")
    print("=" * 50)
    
    # Test 1: Load from backend/.env
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ backend/:")
    load_dotenv('.env')
    api_key = os.getenv('ANTHROPIC_API_KEY')
    
    print(f"   ANTHROPIC_API_KEY: {'–ù–ê–ô–î–ï–ù' if api_key else '–ù–ï –ù–ê–ô–î–ï–ù'}")
    if api_key:
        print(f"   –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å sk-ant-: {'–î–ê' if api_key.startswith('sk-ant-') else '–ù–ï–¢'}")
        print(f"   –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤: {api_key[:20]}...")
    
    # Test 2: Load from root .env  
    print("\n–ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ root:")
    load_dotenv('../.env')
    api_key_root = os.getenv('ANTHROPIC_API_KEY')
    
    print(f"   ANTHROPIC_API_KEY: {'–ù–ê–ô–î–ï–ù' if api_key_root else '–ù–ï –ù–ê–ô–î–ï–ù'}")
    if api_key_root:
        print(f"   –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(api_key_root)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤: {api_key_root[:20]}...")
    
    return api_key or api_key_root

def test_claude_api(api_key):
    print(f"\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLAUDE API")
    print("=" * 50)
    
    if not api_key:
        print("‚ùå API key –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç Claude API")
        return False
        
    try:
        import anthropic
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ anthropic –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        client = anthropic.Anthropic(api_key=api_key.strip())
        print("‚úÖ Claude client —Å–æ–∑–¥–∞–Ω")
        
        # Simple test request
        response = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=50,
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?"}]
        )
        
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫ Claude API –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   –û—Ç–≤–µ—Ç: {response.content[0].text}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {getattr(response.usage, 'output_tokens', 0)}")
        return True
        
    except ImportError:
        print("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return False
    except anthropic.AuthenticationError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False
    except anthropic.BadRequestError as e:
        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_kp_analysis_workflow():
    print(f"\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WORKFLOW –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê")
    print("=" * 50)
    
    api_key = os.getenv('ANTHROPIC_API_KEY')
    if not api_key:
        print("‚ùå API key –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º mock –∞–Ω–∞–ª–∏–∑")
        return {
            "status": "mock",
            "company_name": "–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è", 
            "compliance_score": 85,
            "overall_assessment": "Mock –∞–Ω–∞–ª–∏–∑ - API key –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        }
    
    try:
        import anthropic
        client = anthropic.Anthropic(api_key=api_key.strip())
        
        # Simulate KP analysis request
        prompt = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –°—Ç—Ä–æ–π–¢–µ—Ö –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ 
–∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 75 –º–ª–Ω —Ä—É–±–ª–µ–π, —Å—Ä–æ–∫–∏ 18 –º–µ—Å—è—Ü–µ–≤, –≥–∞—Ä–∞–Ω—Ç–∏—è 3 –≥–æ–¥–∞.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "company_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
  "compliance_score": –æ—Ü–µ–Ω–∫–∞ –æ—Ç 0 –¥–æ 100,
  "overall_assessment": "–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
}
"""
        
        response = client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=500,
            temperature=0.1,
            messages=[{"role": "user", "content": prompt}]
        )
        
        result = response.content[0].text.strip()
        print("‚úÖ –ö–ü –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {result[:200]}...")
        
        # Try to parse JSON
        try:
            import json
            if result.startswith('{'):
                parsed = json.loads(result)
                print("‚úÖ –û—Ç–≤–µ—Ç –≤ –≤–∞–ª–∏–¥–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ")
                print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {parsed.get('company_name', 'N/A')}")
                print(f"   –û—Ü–µ–Ω–∫–∞: {parsed.get('compliance_score', 'N/A')}")
            else:
                print("‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
            
        return {
            "status": "success",
            "content": result,
            "model": "claude-3-haiku-20240307"
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ö–ü –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {"status": "error", "error": str(e)}

if __name__ == "__main__":
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CLAUDE API INTEGRATION")
    print("=" * 60)
    
    # Step 1: Test environment loading
    api_key = test_environment_loading()
    
    # Step 2: Test Claude API  
    claude_works = test_claude_api(api_key)
    
    # Step 3: Test KP analysis workflow
    analysis_result = test_kp_analysis_workflow()
    
    # Summary
    print(f"\nüìã –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 50)
    print(f"Environment Variables: {'‚úÖ OK' if api_key else '‚ùå FAILED'}")
    print(f"Claude API Connection: {'‚úÖ OK' if claude_works else '‚ùå FAILED'}")
    print(f"KP Analysis Workflow: {'‚úÖ OK' if analysis_result.get('status') == 'success' else '‚ö†Ô∏è MOCK' if analysis_result.get('status') == 'mock' else '‚ùå FAILED'}")
    
    if api_key and claude_works:
        print(f"\nüéâ –í–°–Å –ì–û–¢–û–í–û! Claude API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"–ú–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å backend –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ö–ü –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
    else:
        print(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
        if not api_key:
            print(f"   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å ANTHROPIC_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        if not claude_works:
            print(f"   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Claude API")