#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π DevAssist Pro (–º–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""
import requests
import json
import time
from pathlib import Path

BASE_URL = "http://localhost:8000"

def demo_kp_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ü"""
    print("üìä –î–ï–ú–û: –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ö–ü
    kp_content = """
    –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
    –û–û–û "–¢–µ—Ö–Ω–æ–°—Ç—Ä–æ–π"
    
    –ü—Ä–µ–¥–º–µ—Ç: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é
    
    –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê:
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π 
    –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π CRM, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.
    
    –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Backend: Python/FastAPI
    - Frontend: React/TypeScript  
    - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: Redis
    - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è: Docker
    
    –≠–¢–ê–ü–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
    1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π (2 –Ω–µ–¥–µ–ª–∏)
    2. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (1 –Ω–µ–¥–µ–ª—è)
    3. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend (6 –Ω–µ–¥–µ–ª—å)
    4. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ frontend (4 –Ω–µ–¥–µ–ª–∏)
    5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (2 –Ω–µ–¥–µ–ª–∏)
    6. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ (1 –Ω–µ–¥–µ–ª—è)
    
    –°–¢–û–ò–ú–û–°–¢–¨: 850,000 —Ä—É–±–ª–µ–π
    –°–†–û–ö–ò: 16 –Ω–µ–¥–µ–ª—å (4 –º–µ—Å—è—Ü–∞)
    
    –ì–ê–†–ê–ù–¢–ò–ò:
    - –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: 12 –º–µ—Å—è—Ü–µ–≤
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 6 –º–µ—Å—è—Ü–µ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
    - –û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞: –≤–∫–ª—é—á–µ–Ω–æ
    
    –ö–û–ú–ê–ù–î–ê:
    - –ü—Ä–æ–µ–∫—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä: 1 —á–µ–ª.
    - Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: 2 —á–µ–ª.
    - Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: 1 —á–µ–ª.
    - DevOps –∏–Ω–∂–µ–Ω–µ—Ä: 1 —á–µ–ª.
    - –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫: 1 —á–µ–ª.
    
    –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 8+ –ª–µ—Ç
    - –ë–æ–ª–µ–µ 50 —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    - –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    - –°–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
    
    –ö–æ–Ω—Ç–∞–∫—Ç—ã:
    Email: info@technostroy.ru
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    kp_file = Path("demo_kp.txt")
    with open(kp_file, 'w', encoding='utf-8') as f:
        f.write(kp_content)
    
    print("üìÑ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ö–ü:")
    print(f"   ‚Ä¢ –§–∞–π–ª: {kp_file.name}")
    print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {len(kp_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   ‚Ä¢ –¢–∏–ø: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û")
    
    print("\nüîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑
        with open(kp_file, 'rb') as f:
            files = {'file': (kp_file.name, f, 'text/plain')}
            response = requests.post(f"{BASE_URL}/api/kp-analyzer/full-analysis", 
                                   files=files, timeout=30)
        
        if response.status_code == 200:
            data = response.json()['data']
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
            print("-" * 30)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            document = data['document']
            print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:")
            print(f"   ‚Ä¢ ID: {document['document_id']}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {document['size']} –±–∞–π—Ç")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {document['uploaded_at'][:19]}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            analysis = data['analysis']
            results = analysis['results']
            
            print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (ID: {analysis['analysis_id']}):")
            print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {results['quality_score']:.1f}%")
            print(f"   ‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: {results['compliance_score']:.1f}%")
            print(f"   ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {results['competitiveness_score']:.1f}%")
            print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {analysis['processing_time']:.1f} —Å–µ–∫")
            print(f"   ‚Ä¢ AI –º–æ–¥–µ–ª—å: {analysis['ai_provider']} ({analysis['model_used']})")
            
            print(f"\nüìã –ö—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:")
            print(f"   {results['summary']}")
            
            print(f"\nüí° –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:")
            for i, point in enumerate(results['key_points'], 1):
                print(f"   {i}. {point}")
            
            print(f"\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for i, rec in enumerate(results['recommendations'], 1):
                print(f"   {i}. {rec}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç—á–µ—Ç–∞—Ö
            reports = data['reports']
            print(f"\nüìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç—á–µ—Ç—ã:")
            print(f"   ‚Ä¢ PDF –æ—Ç—á–µ—Ç: {reports['pdf']['filename']}")
            print(f"     –°–∫–∞—á–∞—Ç—å: {BASE_URL}{reports['pdf']['download_url']}")
            print(f"   ‚Ä¢ Excel –¥–∞–Ω–Ω—ã–µ: {reports['excel']['filename']}")
            print(f"     –°–∫–∞—á–∞—Ç—å: {BASE_URL}{reports['excel']['download_url']}")
            
            return True
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: HTTP {response.status_code}")
            if response.text:
                print(f"   –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        kp_file.unlink(missing_ok=True)

def demo_analytics():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("\nüìà –î–ï–ú–û: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞—à–±–æ—Ä–¥–∞
        response = requests.get(f"{BASE_URL}/api/analytics/dashboard?period=30d", timeout=10)
        
        if response.status_code == 200:
            data = response.json()['data']
            overview = data['overview']
            
            print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (30 –¥–Ω–µ–π):")
            print(f"   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç–æ–≤: {overview['total_projects']}")
            print(f"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–≤: {overview['total_analyses']}")
            print(f"   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {overview['total_documents']}")
            print(f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {overview['total_users']}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overview['success_rate']:.1f}%")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {overview['avg_processing_time']:.1f} —Å–µ–∫")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = data['metrics']
            print(f"\nüí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   ‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${metrics['total_cost']:.2f}")
            print(f"   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∞–Ω–∞–ª–∏–∑: ${metrics['avg_cost_per_analysis']:.2f}")
            
            # –î–∏–∞–≥—Ä–∞–º–º—ã
            print(f"\nüìà –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã:")
            for chart in data['charts']:
                print(f"   ‚Ä¢ {chart['title']} ({chart['type']})")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        return False

def demo_system_status():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    print("\n‚öôÔ∏è  –î–ï–ú–û: –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    try:
        # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        response = requests.get(f"{BASE_URL}/api/admin/status", timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            
            print(f"üñ•Ô∏è  –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {data['status'].upper()}")
            print(f"üì± –í–µ—Ä—Å–∏—è: {data['version']}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {data['uptime']}")
            
            print(f"\nüîß –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:")
            for service, status in data['services'].items():
                emoji = "‚úÖ" if status == "healthy" else "‚ùå"
                print(f"   ‚Ä¢ {service.capitalize()}: {emoji} {status}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéØ DevAssist Pro - –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 60)
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ö–ü –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!")
            print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 app.py")
            return False
    except:
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 app.py") 
        return False
    
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...\n")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demos = [
        demo_kp_analysis,
        demo_analytics, 
        demo_system_status
    ]
    
    success_count = 0
    for demo_func in demos:
        try:
            if demo_func():
                success_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–µ–º–æ
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üéä –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    
    if success_count == len(demos):
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
        print(f"   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {BASE_URL}/docs")
        print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {BASE_URL}/redoc")
        print(f"   ‚Ä¢ Health Check: {BASE_URL}/health")
        
        print("\nüéØ DevAssist Pro –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print(f"‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)