"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô KP Analysis PDF Exporter - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ò–†–ò–õ–õ–ò–¶–´
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ PDF —ç–∫—Å–ø–æ—Ä—Ç–µ
"""
import os
import io
import logging
import urllib.request
from datetime import datetime
from typing import Dict, Any, List, Optional, Union
from pathlib import Path

# ReportLab imports
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import HexColor, black, white, red, green, blue
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class CyrillicPDFExporter:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å –Ω–∞–¥–µ–∂–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    """
    
    def __init__(self):
        # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ DevAssist Pro
        self.primary_color = HexColor('#2E75D6')      # –°–∏–Ω–∏–π
        self.accent_color = HexColor('#FF5F08')       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        self.success_color = HexColor('#22c55e')      # –ó–µ–ª–µ–Ω—ã–π
        self.warning_color = HexColor('#f59e0b')      # –ñ–µ–ª—Ç—ã–π
        self.danger_color = HexColor('#ef4444')       # –ö—Ä–∞—Å–Ω—ã–π
        self.gray_light = HexColor('#f8f9fa')
        self.gray_medium = HexColor('#6c757d')
        self.gray_dark = HexColor('#343a40')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ú —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º
        self.font_family = self._setup_cyrillic_fonts()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self._setup_styles()
    
    def _setup_cyrillic_fonts(self) -> str:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        """
        logger.info("üîß –ù–ê–ß–ò–ù–ê–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –®–†–ò–§–¢–û–í...")
        
        try:
            fonts_dir = Path(__file__).parent / "fonts"
            fonts_dir.mkdir(exist_ok=True)
            
            # –ü—É—Ç–∏ –∫ DejaVu —à—Ä–∏—Ñ—Ç–∞–º
            dejavu_regular = fonts_dir / "DejaVuSans.ttf"
            dejavu_bold = fonts_dir / "DejaVuSans-Bold.ttf"
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤
            self._download_cyrillic_fonts(fonts_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if not dejavu_regular.exists():
                logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DejaVu —à—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return self._use_fallback_cyrillic()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º DejaVu —à—Ä–∏—Ñ—Ç—ã
            try:
                pdfmetrics.registerFont(TTFont('CyrillicFont', str(dejavu_regular)))
                logger.info("‚úÖ DejaVu Regular –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ CyrillicFont")
                
                if dejavu_bold.exists():
                    pdfmetrics.registerFont(TTFont('CyrillicFont-Bold', str(dejavu_bold)))
                    logger.info("‚úÖ DejaVu Bold –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ CyrillicFont-Bold")
                    
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤
                    from reportlab.pdfbase.pdfmetrics import registerFontFamily
                    registerFontFamily(
                        'CyrillicFont',
                        normal='CyrillicFont',
                        bold='CyrillicFont-Bold',
                        italic='CyrillicFont',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º regular –¥–ª—è italic
                        boldItalic='CyrillicFont-Bold'
                    )
                    logger.info("‚úÖ –°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤ CyrillicFont –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                
                return 'CyrillicFont'
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ DejaVu —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
                return self._use_fallback_cyrillic()
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            return self._use_fallback_cyrillic()
    
    def _download_cyrillic_fonts(self, fonts_dir: Path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ DejaVu —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        logger.info("üì• –°–∫–∞—á–∏–≤–∞–µ–º DejaVu —à—Ä–∏—Ñ—Ç—ã –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã...")
        
        # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è DejaVu —à—Ä–∏—Ñ—Ç–æ–≤
        dejavu_urls = {
            "DejaVuSans.ttf": "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf",
            "DejaVuSans-Bold.ttf": "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans-Bold.ttf"
        }
        
        for font_file, url in dejavu_urls.items():
            font_path = fonts_dir / font_file
            
            if font_path.exists() and font_path.stat().st_size > 50000:
                logger.info(f"‚úÖ –®—Ä–∏—Ñ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {font_file}")
                continue
                
            try:
                logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º: {font_file}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                request = urllib.request.Request(url, headers={
                    'User-Agent': 'DevAssist-Pro-PDF-Exporter/2.0'
                })
                
                with urllib.request.urlopen(request, timeout=30) as response:
                    font_data = response.read()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(font_path, 'wb') as f:
                    f.write(font_data)
                
                if font_path.exists() and font_path.stat().st_size > 50000:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {font_file} ({font_path.stat().st_size} –±–∞–π—Ç)")
                else:
                    logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª: {font_file}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {font_file}: {e}")
    
    def _use_fallback_cyrillic(self) -> str:
        """Fallback –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∫–æ–≥–¥–∞ DejaVu –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ—Ç–æ–¥ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã...")
        
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            import platform
            
            if platform.system() == "Windows":
                # Windows - –ø—Ä–æ–±—É–µ–º Arial Unicode MS –∏–ª–∏ Calibri
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
                    pdfmetrics.registerFont(TTFont('SystemCyrillic', 'C:/Windows/Fonts/arial.ttf'))
                    logger.info("‚úÖ Windows Arial –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
                    return 'SystemCyrillic'
                except:
                    pass
            
            elif platform.system() == "Linux":
                # Linux - –ø—Ä–æ–±—É–µ–º Liberation Sans
                linux_fonts = [
                    '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',
                    '/usr/share/fonts/TTF/DejaVuSans.ttf',
                    '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'
                ]
                
                for font_path in linux_fonts:
                    if Path(font_path).exists():
                        try:
                            pdfmetrics.registerFont(TTFont('SystemCyrillic', font_path))
                            logger.info(f"‚úÖ Linux —à—Ä–∏—Ñ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {font_path}")
                            return 'SystemCyrillic'
                        except:
                            continue
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã ReportLab —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã ReportLab")
            return 'Helvetica'  # ReportLab –∏–º–µ–µ—Ç –±–∞–∑–æ–≤—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback: {e}")
            return 'Helvetica'
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏"""
        self.styles = getSampleStyleSheet()
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ —Å—Ç–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.styles.add(ParagraphStyle(
            name='MainTitle',
            fontName=f'{self.font_family}',
            fontSize=24,
            textColor=self.primary_color,
            alignment=TA_CENTER,
            spaceAfter=20
        ))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family,
            fontSize=16,
            textColor=self.primary_color,
            spaceBefore=15,
            spaceAfter=10
        ))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.styles.add(ParagraphStyle(
            name='SubHeader',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family,
            fontSize=12,
            textColor=self.gray_dark,
            spaceBefore=10,
            spaceAfter=8
        ))
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='NormalText',
            fontName=self.font_family,
            fontSize=10,
            textColor=self.gray_dark,
            spaceAfter=6,
            alignment=TA_JUSTIFY
        ))
        
        # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='HighlightText',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family,
            fontSize=11,
            textColor=self.accent_color,
            spaceAfter=6
        ))
        
        # –ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='SmallText',
            fontName=self.font_family,
            fontSize=8,
            textColor=self.gray_medium,
            spaceAfter=4
        ))
    
    def generate_test_pdf(self, output_path: str = "test_cyrillic_fixed.pdf") -> bytes:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        """
        logger.info("üéØ –ì–ï–ù–ï–†–ò–†–£–ï–ú –¢–ï–°–¢–û–í–´–ô PDF –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ö–ò–†–ò–õ–õ–ò–¶–ï–ô...")
        
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è PDF
        buffer = io.BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=2.5*cm,
            bottomMargin=2*cm,
            title="–¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã - DevAssist Pro",
            author="DevAssist Pro"
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        story = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        story.append(Paragraph(
            "üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ö–ò–†–ò–õ–õ–ò–¶–´ –í PDF",
            self.styles['MainTitle']
        ))
        story.append(Spacer(1, 0.5*inch))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ä–∏—Ñ—Ç–µ
        story.append(Paragraph(
            f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —à—Ä–∏—Ñ—Ç: {self.font_family}",
            self.styles['SectionHeader']
        ))
        story.append(Spacer(1, 0.3*inch))
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ
        test_content = """
        üìä –ê–ù–ê–õ–ò–ó –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø
        
        –ö–æ–º–ø–∞–Ω–∏—è: –û–û–û ¬´–¢–µ—Ö–Ω–æ–õ–∏–¥–µ—Ä¬ª
        –ü—Ä–æ–µ–∫—Ç: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 500 000 ‚ÇΩ (–ø–æ–ª—Ç–æ—Ä–∞ –º–∏–ª–ª–∏–æ–Ω–∞ —Ä—É–±–ª–µ–π)
        –°—Ä–æ–∫–∏: 90 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: Python, React, PostgreSQL, Docker
        
        üéØ –û–¶–ï–ù–ö–ê –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:
        ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: 85/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        ‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–æ—Ç–∞: 78/100 ‚úÖ –•–æ—Ä–æ—à–æ  
        ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 92/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        ‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤: 75/100 ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ
        ‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: 88/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è: 82/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        ‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∞: 79/100 ‚úÖ –•–æ—Ä–æ—à–æ
        ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏: 86/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        ‚Ä¢ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 81/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        ‚Ä¢ –ì–∏–±–∫–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: 84/100 ‚úÖ –û—Ç–ª–∏—á–Ω–æ
        
        üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:
        ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é
        ‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ
        ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É  
        ‚úÖ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–∞
        ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        ‚ö†Ô∏è –ù—É–∂–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        
        üéØ –ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
        ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –° –û–ì–û–í–û–†–ö–ê–ú–ò
        
        –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: 84/100 –±–∞–ª–ª–æ–≤
        –°—Ç–∞—Ç—É—Å: –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏
        
        üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
        1. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤–µ–¥—É—â–∏–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        2. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        3. –£—Ç–æ—á–Ω–∏—Ç—å SLA –∏ —É—Å–ª–æ–≤–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        4. –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –ø–æ—ç—Ç–∞–ø–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
        5. –ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç
        
        üî§ –¢–ï–°–¢ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –°–ò–ú–í–û–õ–û–í:
        –†—É–±–ª—å: ‚ÇΩ, –î–æ–ª–ª–∞—Ä: $, –ï–≤—Ä–æ: ‚Ç¨, –¢–µ–Ω–≥–µ: ‚Ç∏, –ì—Ä–∏–≤–Ω–∞: ‚Ç¥
        –ù–æ–º–µ—Ä: ‚Ññ, –ü–∞—Ä–∞–≥—Ä–∞—Ñ: ¬ß, –ö–æ–ø–∏—Ä–∞–π—Ç: ¬©, –¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞: ‚Ñ¢
        –°—Ç—Ä–µ–ª–∫–∏: ‚Üí ‚Üê ‚Üë ‚Üì, –ì–∞–ª–æ—á–∫–∏: ‚úì ‚úó ‚úÖ ‚ùå
        –ó–≤–µ–∑–¥–æ—á–∫–∏: ‚òÖ ‚òÜ ‚≠ê, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ‚ö†Ô∏è ‚õî üö®
        
        üåç –ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ô –¢–ï–°–¢:
        –†—É—Å—Å–∫–∏–π: –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! 
        English: Hello, world!
        –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞: –ü—Ä–∏–≤—ñ—Ç, —Å–≤—ñ—Ç!
        “ö–∞–∑–∞“õ—à–∞: –°”ô–ª–µ–º, ”ô–ª–µ–º!
        
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        ü§ñ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π DevAssist Pro v2
        üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
        üåê –°–∞–π—Ç: www.devassist.pro
        üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: support@devassist.pro
        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        """.format(datetime=datetime)
        
        story.append(Paragraph(test_content, self.styles['NormalText']))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        story.append(Spacer(1, 0.3*inch))
        story.append(Paragraph("üìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –û–¶–ï–ù–û–ö", self.styles['SectionHeader']))
        
        table_data = [
            ['–ö–†–ò–¢–ï–†–ò–ô', '–û–¶–ï–ù–ö–ê', '–°–¢–ê–¢–£–°'],
            ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', '85/100', '‚úÖ –û—Ç–ª–∏—á–Ω–æ'],
            ['–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–æ—Ç–∞', '78/100', '‚úÖ –•–æ—Ä–æ—à–æ'],
            ['–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '92/100', '‚úÖ –û—Ç–ª–∏—á–Ω–æ'],
            ['–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤', '75/100', '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ'],
            ['–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '88/100', '‚úÖ –û—Ç–ª–∏—á–Ω–æ'],
            ['–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê', '84/100', '‚úÖ –í–´–°–û–ö–û–ï –ö–ê–ß–ï–°–¢–í–û']
        ]
        
        table = Table(table_data, colWidths=[8*cm, 3*cm, 4*cm])
        table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ('FONTNAME', (0, 0), (-1, 0), f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # –î–∞–Ω–Ω—ã–µ
            ('FONTNAME', (0, 1), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.gray_light]),
            
            # –í—ã–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            ('FONTNAME', (0, -1), (-1, -1), f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family),
            ('BACKGROUND', (0, -1), (-1, -1), self.accent_color),
            ('TEXTCOLOR', (0, -1), (-1, -1), white),
            
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        story.append(table)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        try:
            doc.build(story)
            logger.info("‚úÖ –¢–ï–°–¢–û–í–´–ô PDF –° –ö–ò–†–ò–õ–õ–ò–¶–ï–ô –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù!")
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            raise
        
        # –ü–æ–ª—É—á–∞–µ–º PDF –∫–æ–Ω—Ç–µ–Ω—Ç
        pdf_content = buffer.getvalue()
        buffer.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(output_path, 'wb') as f:
            f.write(pdf_content)
        
        logger.info(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        logger.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(pdf_content)} –±–∞–π—Ç")
        
        return pdf_content
    
    def generate_kp_analysis_pdf(self, analysis_data: Dict[str, Any], output_path: Optional[str] = None) -> bytes:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        """
        logger.info("üéØ –ì–ï–ù–ï–†–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PDF –û–¢–ß–ï–¢ –ö–ü –ê–ù–ê–õ–ò–ó–ê...")
        
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è PDF
        buffer = io.BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=2.5*cm,
            bottomMargin=2*cm,
            title="–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ö–ü - DevAssist Pro",
            author="DevAssist Pro"
        )
        
        story = []
        
        # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        story.append(Paragraph(
            "–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø",
            self.styles['MainTitle']
        ))
        story.append(Spacer(1, 0.5*inch))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        tz_name = analysis_data.get('tz_name', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
        kp_name = analysis_data.get('kp_name', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
        company_name = analysis_data.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
        overall_score = analysis_data.get('overall_score', 0)
        
        info_text = f"""
        <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b><br/>{tz_name}<br/><br/>
        <b>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b><br/>{kp_name}<br/><br/>
        <b>–ö–æ–º–ø–∞–Ω–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b><br/>{company_name}<br/><br/>
        <b>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</b><br/>{datetime.now().strftime('%d.%m.%Y %H:%M')}<br/><br/>
        <b>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:</b><br/>{overall_score}/100 –±–∞–ª–ª–æ–≤ {self._get_score_status(overall_score)}
        """
        
        story.append(Paragraph(info_text, self.styles['NormalText']))
        story.append(PageBreak())
        
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
        story.append(Paragraph("–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï", self.styles['SectionHeader']))
        
        business_analysis = analysis_data.get('business_analysis', {})
        criteria_scores = business_analysis.get('criteria_scores', {})
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        criteria_data = [['–ö–†–ò–¢–ï–†–ò–ô', '–û–¶–ï–ù–ö–ê', '–°–¢–ê–¢–£–°']]
        
        criteria_mapping = {
            'technical_compliance': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
            'functional_completeness': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–æ—Ç–∞',
            'cost_effectiveness': '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'timeline_realism': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤',
            'vendor_reliability': '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'
        }
        
        for key, name in criteria_mapping.items():
            score = criteria_scores.get(key, 0)
            status = self._get_score_status(score)
            criteria_data.append([name, f'{score}/100', status])
        
        criteria_data.append(['–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê', f'{overall_score}/100', self._get_score_status(overall_score)])
        
        criteria_table = Table(criteria_data, colWidths=[8*cm, 3*cm, 4*cm])
        criteria_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, 0), f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 1), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.gray_light]),
            ('FONTNAME', (0, -1), (-1, -1), f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family),
            ('BACKGROUND', (0, -1), (-1, -1), self.accent_color),
            ('TEXTCOLOR', (0, -1), (-1, -1), white),
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        story.append(criteria_table)
        story.append(Spacer(1, 0.3*inch))
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        final_recommendation = analysis_data.get('final_recommendation', 'conditional_accept')
        executive_summary = analysis_data.get('executive_summary', '')
        
        story.append(Paragraph("–ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø", self.styles['SectionHeader']))
        
        recommendation_text = self._format_recommendation(final_recommendation)
        story.append(Paragraph(
            f"<b>{recommendation_text}</b>",
            ParagraphStyle(
                name='FinalRecommendation',
                fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else self.font_family,
                fontSize=14,
                textColor=self._get_recommendation_color(final_recommendation),
                spaceBefore=15,
                spaceAfter=15,
                alignment=TA_CENTER
            )
        ))
        
        if executive_summary:
            story.append(Paragraph(executive_summary, self.styles['NormalText']))
        
        # Footer
        story.append(Spacer(1, 1*inch))
        story.append(Paragraph(
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ<br/>"
            "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: DevAssist Pro v2<br/>"
            "www.devassist.pro | support@devassist.pro",
            ParagraphStyle(
                name='Footer',
                fontName=self.font_family,
                fontSize=10,
                textColor=self.gray_medium,
                alignment=TA_CENTER
            )
        ))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        try:
            doc.build(story)
            logger.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PDF –û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù!")
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ PDF: {e}")
            raise
        
        # –ü–æ–ª—É—á–∞–µ–º PDF –∫–æ–Ω—Ç–µ–Ω—Ç
        pdf_content = buffer.getvalue()
        buffer.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        if output_path:
            with open(output_path, 'wb') as f:
                f.write(pdf_content)
            logger.info(f"üìÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        logger.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(pdf_content)} –±–∞–π—Ç")
        return pdf_content
    
    def _get_score_status(self, score: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –±–∞–ª–ª–∞–º"""
        if score >= 85:
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif score >= 70:
            return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif score >= 55:
            return "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ"
        elif score >= 40:
            return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        else:
            return "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ"
    
    def _format_recommendation(self, recommendation: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendation_map = {
            'accept': '‚úÖ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –ö –ü–†–ò–ù–Ø–¢–ò–Æ',
            'conditional_accept': '‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –° –û–ì–û–í–û–†–ö–ê–ú–ò',
            'reject': '‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï',
            'needs_revision': 'üîÑ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'
        }
        return recommendation_map.get(recommendation, '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –ê–ù–ê–õ–ò–ó–ê')
    
    def _get_recommendation_color(self, recommendation: str) -> HexColor:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        color_map = {
            'accept': self.success_color,
            'conditional_accept': self.warning_color,
            'reject': self.danger_color,
            'needs_revision': self.accent_color
        }
        return color_map.get(recommendation, self.warning_color)


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
cyrillic_pdf_exporter = CyrillicPDFExporter()

def test_cyrillic_fix():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ò–†–ò–õ–õ–ò–¶–´")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
        pdf_content = cyrillic_pdf_exporter.generate_test_pdf("test_cyrillic_FIXED.pdf")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        test_analysis = {
            "tz_name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            "kp_name": "–ö–ü –æ—Ç –û–û–û ¬´–¢–µ—Ö–Ω–æ–õ–∏–¥–µ—Ä¬ª - –í–µ–±-–ø–æ—Ä—Ç–∞–ª DevEstate",
            "company_name": "–û–û–û ¬´–¢–µ—Ö–Ω–æ–õ–∏–¥–µ—Ä¬ª",
            "overall_score": 84,
            "business_analysis": {
                "criteria_scores": {
                    "technical_compliance": 85,
                    "functional_completeness": 78,
                    "cost_effectiveness": 92,
                    "timeline_realism": 75,
                    "vendor_reliability": 88
                }
            },
            "final_recommendation": "conditional_accept",
            "executive_summary": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–∞–∑—á–∏–∫–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—è—Ç–∏—é —Å —É—á–µ—Ç–æ–º —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—á–∞–Ω–∏–π –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π PDF –∞–Ω–∞–ª–∏–∑–∞
        full_pdf = cyrillic_pdf_exporter.generate_kp_analysis_pdf(
            test_analysis, 
            "kp_analysis_CYRILLIC_FIXED.pdf"
        )
        
        logger.info("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        logger.info("üìÑ –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:")
        logger.info("   ‚Ä¢ test_cyrillic_FIXED.pdf - —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")
        logger.info("   ‚Ä¢ kp_analysis_CYRILLIC_FIXED.pdf - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        logger.info("üéâ –ö–ò–†–ò–õ–õ–ò–¶–ê –í PDF –¢–ï–ü–ï–†–¨ –î–û–õ–ñ–ù–ê –†–ê–ë–û–¢–ê–¢–¨ –ö–û–†–†–ï–ö–¢–ù–û!")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    test_cyrillic_fix()