#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Professional KP Analysis PDF Report Generator
DevAssist Pro - KP Analyzer v2

–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–æ–≤ —Å:
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–æ–ø-–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–∞
- –ü–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
- –ì–æ—Ç–æ–≤—ã–º–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –æ—Ç—á–µ—Ç–∞–º–∏
"""

import os
import sys
import io
import tempfile
import logging
from datetime import datetime
from typing import Dict, List, Any, Optional
from pathlib import Path

# ReportLab imports for professional PDF generation
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import HexColor, black, white, gray, darkgrey
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, 
    PageBreak, Image, KeepTogether, NextPageTemplate, PageTemplate
)
from reportlab.platypus.frames import Frame
from reportlab.platypus.doctemplate import LayoutError
from reportlab.platypus.tableofcontents import TableOfContents
from reportlab.lib.utils import ImageReader

# Font and Cyrillic support
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.fonts import addMapping

# Charts and visualization
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import pandas as pd
from matplotlib.backends.backend_pdf import PdfPages
import seaborn as sns

# Import our advanced chart generator
try:
    from .advanced_chart_generator import AdvancedChartGenerator
except ImportError:
    # Fallback import for direct execution
    from advanced_chart_generator import AdvancedChartGenerator

# Set up matplotlib for Cyrillic support
plt.rcParams['font.family'] = ['DejaVu Sans', 'sans-serif']
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['font.size'] = 10

# Logging setup
logger = logging.getLogger(__name__)


class ProfessionalKPPDFGenerator:
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
    
    –°—Ç–∏–ª—å: –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É—Ä–æ–≤–Ω—è McKinsey, BCG
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
    - 15+ —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º
    - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ PDF"""
        self.setup_fonts()
        self.setup_colors()
        self.setup_styles()
        self.story = []
        self.chart_generator = AdvancedChartGenerator()
        
    def _get_matplotlib_font_path(self):
        """Try to get matplotlib font path dynamically"""
        try:
            import matplotlib
            import matplotlib.font_manager as fm
            
            # Try to find matplotlib data directory
            mpl_data_dir = matplotlib.get_data_path()
            font_path = os.path.join(mpl_data_dir, 'fonts', 'ttf')
            
            if os.path.exists(font_path):
                logger.info(f"Found matplotlib fonts via import: {font_path}")
                return font_path
            
            # Alternative: use font manager to find DejaVu fonts
            dejavu_fonts = [f for f in fm.findSystemFonts() if 'DejaVu' in f]
            if dejavu_fonts:
                font_dir = os.path.dirname(dejavu_fonts[0])
                logger.info(f"Found DejaVu fonts via font manager: {font_dir}")
                return font_dir
                
        except Exception as e:
            logger.debug(f"Could not get matplotlib font path: {e}")
        
        return None
    
    def setup_fonts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ DejaVu —à—Ä–∏—Ñ—Ç–∞–º
            # Get absolute paths that work from any execution context
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.abspath(os.path.join(current_dir, '../../../../'))
            
            base_paths = [
                # Matplotlib fonts in project virtual environment (most reliable)
                os.path.join(project_root, 'env/Lib/site-packages/matplotlib/mpl-data/fonts/ttf'),
                os.path.join(project_root, '../env/Lib/site-packages/matplotlib/mpl-data/fonts/ttf'),
                
                # Try to find matplotlib fonts in current Python environment
                os.path.join(sys.prefix, 'Lib/site-packages/matplotlib/mpl-data/fonts/ttf'),
                os.path.join(sys.prefix, 'lib/python*/site-packages/matplotlib/mpl-data/fonts/ttf'),
                
                # Try to import matplotlib and get font path directly
                self._get_matplotlib_font_path(),
                
                # Standard system paths (Linux/macOS)
                '/usr/share/fonts/truetype/dejavu',
                '/usr/share/fonts/TTF',
                '/System/Library/Fonts',
                
                # Windows system paths
                'C:/Windows/Fonts',
                
                # Fallback paths
                os.path.join(current_dir, 'fonts'),
                current_dir
            ]
            
            # Remove None values
            base_paths = [path for path in base_paths if path is not None]
            
            font_files = {
                'regular': 'DejaVuSans.ttf',
                'bold': 'DejaVuSans-Bold.ttf',
                'italic': 'DejaVuSans-Oblique.ttf',
                'bolditalic': 'DejaVuSans-BoldOblique.ttf'
            }
            
            font_registered = False
            registered_fonts = {}
            
            # Debug: Log all paths being checked
            logger.info(f"üîç Checking {len(base_paths)} font paths...")
            for i, path in enumerate(base_paths):
                exists = os.path.exists(path) if path else False
                logger.info(f"  {i+1}. {path} - {'‚úÖ EXISTS' if exists else '‚ùå NOT FOUND'}")
            
            # Try to find and register fonts
            for base_path in base_paths:
                if not base_path or not os.path.exists(base_path):
                    continue
                    
                logger.info(f"üîç Checking font files in: {base_path}")
                    
                try:
                    # Try to register all font variants
                    for variant, filename in font_files.items():
                        font_path = os.path.join(base_path, filename)
                        if os.path.exists(font_path):
                            font_name = f'DejaVuSans-{variant.capitalize()}'
                            if variant == 'regular':
                                font_name = 'DejaVuSans'
                            
                            pdfmetrics.registerFont(TTFont(font_name, font_path))
                            registered_fonts[variant] = font_name
                            logger.info(f"Successfully registered font: {font_name} from {font_path}")
                    
                    # Check if we have at least regular and bold
                    if 'regular' in registered_fonts and 'bold' in registered_fonts:
                        font_registered = True
                        
                        # Register font family for easier usage
                        addMapping('DejaVuSans', 0, 0, 'DejaVuSans')  # Regular
                        addMapping('DejaVuSans', 1, 0, registered_fonts.get('bold', 'DejaVuSans'))  # Bold
                        if 'italic' in registered_fonts:
                            addMapping('DejaVuSans', 0, 1, registered_fonts['italic'])  # Italic
                        if 'bolditalic' in registered_fonts:
                            addMapping('DejaVuSans', 1, 1, registered_fonts['bolditalic'])  # Bold+Italic
                        
                        logger.info(f"‚úÖ Successfully registered DejaVu font family from: {base_path}")
                        break
                        
                except Exception as e:
                    logger.warning(f"Could not register fonts from {base_path}: {e}")
                    continue
            
            if font_registered:
                self.cyrillic_font = 'DejaVuSans'
                self.cyrillic_font_bold = registered_fonts.get('bold', 'DejaVuSans-Bold')
                logger.info("‚úÖ Cyrillic fonts successfully configured")
            else:
                # Fallback to built-in fonts with warning
                logger.warning("‚ùå Could not register DejaVu fonts, using default fonts (Cyrillic may not display correctly)")
                self.cyrillic_font = 'Helvetica'
                self.cyrillic_font_bold = 'Helvetica-Bold'
                
        except Exception as e:
            logger.error(f"‚ùå Font setup error: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            self.cyrillic_font = 'Helvetica'
            self.cyrillic_font_bold = 'Helvetica-Bold'
            
    def setup_colors(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã"""
        self.colors = {
            # Primary brand colors
            'primary_blue': HexColor('#2E86AB'),      # DevAssist Pro primary
            'secondary_purple': HexColor('#A23B72'),   # Accent color
            'accent_orange': HexColor('#F18F01'),      # Success/highlight
            'warning_red': HexColor('#C73E1D'),        # Warnings/risks
            
            # Professional grays
            'text_dark': HexColor('#2C3E50'),          # Main text
            'text_light': HexColor('#7F8C8D'),         # Secondary text
            'background_light': HexColor('#F8F9FA'),   # Light backgrounds
            'background_medium': HexColor('#E9ECEF'),  # Medium backgrounds
            
            # Status colors
            'success_green': HexColor('#28A745'),      # Success indicators
            'info_blue': HexColor('#17A2B8'),          # Information
            'warning_yellow': HexColor('#FFC107'),     # Warnings
            'danger_red': HexColor('#DC3545'),         # Errors/risks
            
            # Chart colors
            'chart_primary': HexColor('#2E86AB'),
            'chart_secondary': HexColor('#A23B72'),
            'chart_tertiary': HexColor('#F18F01'),
            'chart_quaternary': HexColor('#28A745'),
        }
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π —Ç–µ–∫—Å—Ç–∞"""
        styles = getSampleStyleSheet()
        
        # Title styles
        self.styles = {
            'title': ParagraphStyle(
                'CustomTitle',
                parent=styles['Title'],
                fontName=self.cyrillic_font,
                fontSize=24,
                textColor=self.colors['primary_blue'],
                alignment=TA_CENTER,
                spaceAfter=30,
                spaceBefore=20
            ),
            
            'heading1': ParagraphStyle(
                'CustomHeading1',
                parent=styles['Heading1'],
                fontName=self.cyrillic_font,
                fontSize=18,
                textColor=self.colors['primary_blue'],
                spaceAfter=20,
                spaceBefore=25,
                leftIndent=0,
                borderWidth=0,
                borderColor=self.colors['primary_blue'],
                borderPadding=5
            ),
            
            'heading2': ParagraphStyle(
                'CustomHeading2',
                parent=styles['Heading2'],
                fontName=self.cyrillic_font,
                fontSize=14,
                textColor=self.colors['text_dark'],
                spaceAfter=15,
                spaceBefore=20
            ),
            
            'heading3': ParagraphStyle(
                'CustomHeading3',
                parent=styles['Heading3'],
                fontName=self.cyrillic_font,
                fontSize=12,
                textColor=self.colors['text_dark'],
                spaceAfter=10,
                spaceBefore=15
            ),
            
            'normal': ParagraphStyle(
                'CustomNormal',
                parent=styles['Normal'],
                fontName=self.cyrillic_font,
                fontSize=10,
                textColor=self.colors['text_dark'],
                leading=14,
                spaceAfter=8,
                alignment=TA_LEFT
            ),
            
            'body': ParagraphStyle(
                'CustomBody',
                parent=styles['Normal'],
                fontName=self.cyrillic_font,
                fontSize=11,
                textColor=self.colors['text_dark'],
                leading=16,
                spaceAfter=10,
                alignment=TA_JUSTIFY
            ),
            
            'bullet': ParagraphStyle(
                'CustomBullet',
                parent=styles['Normal'],
                fontName=self.cyrillic_font,
                fontSize=10,
                textColor=self.colors['text_dark'],
                leading=14,
                spaceAfter=6,
                leftIndent=20,
                bulletIndent=10
            ),
            
            'caption': ParagraphStyle(
                'CustomCaption',
                parent=styles['Normal'],
                fontName=self.cyrillic_font,
                fontSize=9,
                textColor=self.colors['text_light'],
                leading=11,
                spaceAfter=5,
                alignment=TA_CENTER,
                fontStyle='italic'
            ),
            
            'footer': ParagraphStyle(
                'CustomFooter',
                parent=styles['Normal'],
                fontName=self.cyrillic_font,
                fontSize=8,
                textColor=self.colors['text_light'],
                alignment=TA_CENTER
            )
        }
    
    async def generate_professional_report(self, analysis_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å URL –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            logger.info("üéØ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞ –¥–ª—è API")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –≤ –ø–∞–º—è—Ç—å
            pdf_buffer = self.generate_report(analysis_data)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = int(datetime.now().timestamp() * 1000)
            company_name = analysis_data.get('company_name', 'Unknown').replace(' ', '_').replace('/', '_')
            filename = f"DevAssist_Pro_KP_Analysis_{timestamp}.pdf"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            reports_dir = Path("/tmp/reports")
            reports_dir.mkdir(exist_ok=True, parents=True)
            file_path = reports_dir / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
            with open(file_path, "wb") as f:
                pdf_buffer.seek(0)
                f.write(pdf_buffer.read())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            if not file_path.exists():
                raise Exception(f"Failed to save PDF file to {file_path}")
            
            file_size = file_path.stat().st_size
            logger.info(f"‚úÖ Professional PDF saved: {file_path} ({file_size:,} bytes)")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º HTTP URL
            return {
                "success": True,
                "pdf_url": f"/reports/{filename}",  # HTTP –ø—É—Ç—å —á–µ—Ä–µ–∑ mounted —Å—Ç–∞—Ç–∏–∫—É
                "filename": filename,
                "file_path": str(file_path),
                "file_size": file_size,
                "details": f"Professional PDF report with Cyrillic support generated successfully"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            return {
                "success": False,
                "error": str(e),
                "details": f"Professional PDF generation failed: {e}"
            }

    def generate_report(self, analysis_data: Dict[str, Any]) -> io.BytesIO:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π PDF –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
            
        Returns:
            io.BytesIO: PDF —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        """
        try:
            logger.info("üéØ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞")
            
            # –°–æ–∑–¥–∞–µ–º BytesIO –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=2*cm,
                leftMargin=2*cm,
                topMargin=2.5*cm,
                bottomMargin=2*cm,
                title=f"KP Analysis Report - {analysis_data.get('company_name', 'Unknown')}",
                author="DevAssist Pro KP Analyzer",
                subject="Commercial Proposal Analysis Report",
                creator="DevAssist Pro v2.0"
            )
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.story = []
            
            # –°—Ç—Ä–æ–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç—á–µ—Ç–∞
            self._build_cover_page(analysis_data)
            self._build_table_of_contents()
            self._build_executive_summary(analysis_data)
            self._build_methodology_section()
            self._build_analysis_overview(analysis_data)
            self._build_detailed_criteria_analysis(analysis_data)
            self._build_financial_analysis(analysis_data)
            self._build_risk_assessment(analysis_data)
            self._build_comparative_analysis(analysis_data)
            self._build_recommendations(analysis_data)
            self._build_conclusions(analysis_data)
            self._build_appendices(analysis_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
            doc.build(self.story)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª–æ
            buffer.seek(0)
            logger.info("‚úÖ PDF –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            return buffer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –æ—Ç—á–µ—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            raise
    
    def _build_cover_page(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∏—Ç—É–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.story.append(Spacer(1, 3*cm))
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = Paragraph("–ê–ù–ê–õ–ò–ó –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø", self.styles['title'])
        self.story.append(title)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
        company_name = analysis_data.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        subtitle = Paragraph(f"<b>{company_name}</b>", self.styles['heading1'])
        self.story.append(subtitle)
        self.story.append(Spacer(1, 1*cm))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        tz_name = analysis_data.get('tz_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        project_info = f"""
        <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {tz_name}<br/>
        <b>–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> {datetime.now().strftime('%d.%m.%Y')}<br/>
        <b>–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞:</b> DevAssist Pro KP Analyzer v2.0<br/>
        <b>–ò–ò –º–æ–¥–µ–ª—å:</b> {analysis_data.get('model_used', 'Claude 3.5 Sonnet')}
        """
        
        info_para = Paragraph(project_info, self.styles['body'])
        self.story.append(info_para)
        self.story.append(Spacer(1, 1.5*cm))
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ (–±–æ–ª—å—à–æ–π –±–ª–æ–∫)
        overall_score = analysis_data.get('overall_score', 0)
        score_color = self._get_score_color(overall_score)
        
        score_table = Table([
            ["–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê", f"{overall_score}/100"],
            ["–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø", self._get_recommendation_text(overall_score)]
        ], colWidths=[4*cm, 6*cm])
        
        score_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), self.colors['background_light']),
            ('TEXTCOLOR', (0, 0), (-1, -1), self.colors['text_dark']),
            ('FONTNAME', (0, 0), (-1, -1), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, -1), 14),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['primary_blue']),
            ('BACKGROUND', (1, 0), (1, 0), score_color),
            ('TEXTCOLOR', (1, 0), (1, 0), white),
        ]))
        
        self.story.append(score_table)
        self.story.append(Spacer(1, 2*cm))
        
        # –§—É—Ç–µ—Ä —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        footer_text = """
        <i>–î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
        –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π DevAssist Pro. –ê–Ω–∞–ª–∏–∑ –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä 
        –∏ –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –≤ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ —Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.</i>
        """
        footer_para = Paragraph(footer_text, self.styles['caption'])
        self.story.append(footer_para)
        
        self.story.append(PageBreak())
    
    def _build_table_of_contents(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        logger.info("üìë –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏—è")
        
        self.story.append(Paragraph("–°–û–î–ï–†–ñ–ê–ù–ò–ï", self.styles['heading1']))
        self.story.append(Spacer(1, 0.5*cm))
        
        # –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
        sections = [
            "1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï",
            "2. –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ê–ù–ê–õ–ò–ó–ê", 
            "3. –û–ë–©–ò–ô –û–ë–ó–û–† –ê–ù–ê–õ–ò–ó–ê",
            "4. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú",
            "   4.1. –ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "   4.2. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏",
            "   4.3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "   4.4. –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã",
            "   4.5. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
            "   4.6. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ",
            "   4.7. –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã",
            "   4.8. –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "   4.9. –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
            "   4.10. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å",
            "5. –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó",
            "6. –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í",
            "7. –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó",
            "8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò",
            "9. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï",
            "10. –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"
        ]
        
        toc_data = []
        for section in sections:
            toc_data.append([section, ""])
        
        toc_table = Table(toc_data, colWidths=[12*cm, 2*cm])
        toc_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (-1, -1), self.colors['text_dark']),
            ('LEFTPADDING', (0, 0), (-1, -1), 0),
            ('RIGHTPADDING', (0, 0), (-1, -1), 0),
            ('TOPPADDING', (0, 0), (-1, -1), 3),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        
        self.story.append(toc_table)
        self.story.append(PageBreak())
    
    def _build_executive_summary(self, analysis_data: Dict[str, Any]):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —É—Ä–æ–≤–Ω—è McKinsey"""
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ")
        
        self.story.append(Paragraph("1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï", self.styles['heading1']))
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        company_name = analysis_data.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        overall_score = analysis_data.get('overall_score', 0)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        executive_summary_text = self._generate_professional_executive_summary(analysis_data)
        summary_para = Paragraph(executive_summary_text, self.styles['body'])
        self.story.append(summary_para)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Å—Ç–∏–ª–µ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self._add_key_metrics_dashboard(analysis_data)
        self.story.append(Spacer(1, 0.3*cm))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self._add_executive_recommendations(analysis_data)
        self.story.append(Spacer(1, 0.3*cm))
        
        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        self.story.append(Paragraph("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", self.styles['heading2']))
        
        key_metrics_data = [
            ["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å"],
            ["–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{overall_score}/100", self._get_status_text(overall_score)],
            ["–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", f"{self._get_section_score(analysis_data, 'budget_compliance')}/100", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"],
            ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", f"{self._get_section_score(analysis_data, 'technical_compliance')}/100", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"],
            ["–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã", f"{self._get_section_score(analysis_data, 'team_expertise')}/100", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"],
        ]
        
        metrics_table = Table(key_metrics_data, colWidths=[5*cm, 3*cm, 4*cm])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary_blue']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('FONTNAME', (0, 1), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text_dark']),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['text_light']),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['background_light']]),
        ]))
        
        self.story.append(metrics_table)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        key_findings = analysis_data.get('key_strengths', [])
        if key_findings:
            self.story.append(Paragraph("–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã", self.styles['heading2']))
            for finding in key_findings[:5]:  # Top 5 findings
                bullet_point = Paragraph(f"‚Ä¢ {finding}", self.styles['bullet'])
                self.story.append(bullet_point)
        
        self.story.append(PageBreak())
    
    def _build_methodology_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏")
        
        self.story.append(Paragraph("2. –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ê–ù–ê–õ–ò–ó–ê", self.styles['heading1']))
        
        methodology_text = """
        –ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ 
        –æ—Ü–µ–Ω–∫–∏ –ø–æ 10 –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≤–µ—Å –≤ –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ.
        
        –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ DevAssist Pro –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ 
        –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.
        """
        
        methodology_para = Paragraph(methodology_text, self.styles['body'])
        self.story.append(methodology_para)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏
        self.story.append(Paragraph("–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏", self.styles['heading2']))
        
        criteria_data = [
            ["–ö—Ä–∏—Ç–µ—Ä–∏–π", "–í–µ—Å (%)", "–û–ø–∏—Å–∞–Ω–∏–µ"],
            ["–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "15%", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±—é–¥–∂–µ—Ç—É –¢–ó"],
            ["–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏", "15%", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"],
            ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "20%", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó"],
            ["–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã", "15%", "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"],
            ["–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ", "10%", "–ü–æ–ª–Ω–æ—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"],
            ["–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ", "10%", "–ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"],
            ["–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã", "5%", "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ä–∞–±–æ—Ç—ã"],
            ["–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å", "5%", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"],
            ["–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "3%", "–ü–ª–∞–Ω—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"],
            ["–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å", "2%", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏"],
        ]
        
        criteria_table = Table(criteria_data, colWidths=[6*cm, 2*cm, 6*cm])
        criteria_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary_blue']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTNAME', (0, 1), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text_dark']),
            ('ALIGN', (1, 0), (1, -1), 'CENTER'),  # Center weight column
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, self.colors['text_light']),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['background_light']]),
        ]))
        
        self.story.append(criteria_table)
        self.story.append(PageBreak())
    
    def _build_analysis_overview(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π –æ–±–∑–æ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        logger.info("üìà –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞")
        
        self.story.append(Paragraph("3. –û–ë–©–ò–ô –û–ë–ó–û–† –ê–ù–ê–õ–ò–ó–ê", self.styles['heading1']))
        
        # –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        overview_text = """
        –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–π –æ–±–∑–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –Ω–∏–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ—Ü–µ–Ω–∫–∏.
        """
        overview_para = Paragraph(overview_text, self.styles['body'])
        self.story.append(overview_para)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        try:
            charts = self.chart_generator.create_comprehensive_dashboard(analysis_data)
            
            chart_titles = [
                "–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                "–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é", 
                "–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏",
                "–ö–∞—Ä—Ç–∞ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –æ—Ç—á–µ—Ç
            for i, chart_buffer in enumerate(charts):
                if chart_buffer and i < len(chart_titles):
                    # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    chart_title = Paragraph(f"3.{i+1}. {chart_titles[i]}", self.styles['heading2'])
                    self.story.append(chart_title)
                    
                    # –°–∞–º –≥—Ä–∞—Ñ–∏–∫
                    try:
                        chart_buffer.seek(0)
                        chart_image = ImageReader(chart_buffer)
                        self.story.append(Image(chart_image, width=15*cm, height=10*cm))
                    except Exception as chart_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ {i+1}: {chart_error}")
                        # Add placeholder text instead of broken chart
                        placeholder = Paragraph(f"[–ì—Ä–∞—Ñ–∏–∫ {i+1}: {chart_titles[i]} - –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω]", self.styles['body'])
                        self.story.append(placeholder)
                    
                    # –ü–æ–¥–ø–∏—Å—å
                    caption = Paragraph(f"–†–∏—Å—É–Ω–æ–∫ {i+1}: {chart_titles[i]}", self.styles['caption'])
                    self.story.append(caption)
                    self.story.append(Spacer(1, 0.5*cm))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 2 –≥—Ä–∞—Ñ–∏–∫–æ–≤
                    if (i + 1) % 2 == 0:
                        self.story.append(PageBreak())
        
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
            # Fallback: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            fallback_text = "–ì—Ä–∞—Ñ–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö."
            fallback_para = Paragraph(fallback_text, self.styles['body'])
            self.story.append(fallback_para)
        
        self.story.append(PageBreak())
    
    def _build_detailed_criteria_analysis(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        logger.info("üîç –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        
        self.story.append(Paragraph("4. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú", self.styles['heading1']))
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        criteria_sections = [
            ('budget_compliance', '–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', '4.1'),
            ('timeline_compliance', '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏', '4.2'),
            ('technical_compliance', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', '4.3'),
            ('team_expertise', '–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã', '4.4'),
            ('functional_coverage', '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', '4.5'),
            ('security_quality', '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ', '4.6'),
            ('methodology_processes', '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã', '4.7'),
            ('scalability_support', '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '4.8'),
            ('communication_reporting', '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '4.9'),
            ('additional_value', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å', '4.10'),
        ]
        
        for section_key, section_title, section_number in criteria_sections:
            self._build_criteria_section(analysis_data, section_key, section_title, section_number)
    
    def _build_criteria_section(self, analysis_data: Dict[str, Any], section_key: str, 
                               section_title: str, section_number: str):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        
        self.story.append(Paragraph(f"{section_number}. {section_title.upper()}", self.styles['heading2']))
        
        # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–£–Æ –æ—Ü–µ–Ω–∫—É
        score = self._get_section_score(analysis_data, section_key)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
        section_data = analysis_data.get(section_key, {}) if analysis_data else {}
        if section_data is None:
            section_data = {}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
        description = self._generate_detailed_section_description(section_key, section_title, score, analysis_data)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è
        desc_para = Paragraph(description, self.styles['body'])
        self.story.append(desc_para)
        self.story.append(Spacer(1, 0.3*cm))
        
        # –û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è
        score_color = self._get_score_color(score)
        score_table = Table([
            ["–û—Ü–µ–Ω–∫–∞", f"{score}/100"],
            ["–°—Ç–∞—Ç—É—Å", self._get_status_text(score)]
        ], colWidths=[3*cm, 3*cm])
        
        score_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), self.colors['background_light']),
            ('TEXTCOLOR', (0, 0), (-1, -1), self.colors['text_dark']),
            ('FONTNAME', (0, 0), (-1, -1), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['text_light']),
            ('BACKGROUND', (1, 0), (1, 0), score_color),
            ('TEXTCOLOR', (1, 0), (1, 0), white),
        ]))
        
        self.story.append(score_table)
        self.story.append(Spacer(1, 0.3*cm))
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã
        key_findings = section_data.get('key_findings', []) if isinstance(section_data, dict) else []
        if key_findings:
            self.story.append(Paragraph("–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:", self.styles['heading3']))
            for finding in key_findings[:3]:  # Top 3 findings per section
                bullet_point = Paragraph(f"‚Ä¢ {finding}", self.styles['bullet'])
                self.story.append(bullet_point)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = section_data.get('recommendations', []) if isinstance(section_data, dict) else []
        if recommendations:
            self.story.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", self.styles['heading3']))
            for recommendation in recommendations[:2]:  # Top 2 recommendations per section
                bullet_point = Paragraph(f"‚Ä¢ {recommendation}", self.styles['bullet'])
                self.story.append(bullet_point)
        
        self.story.append(Spacer(1, 0.5*cm))
    
    def _build_financial_analysis(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        self.story.append(Paragraph("5. –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó", self.styles['heading1']))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        pricing = analysis_data.get('pricing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        pricing_para = Paragraph(f"<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {pricing}", self.styles['body'])
        self.story.append(pricing_para)
        self.story.append(Spacer(1, 0.3*cm))
        
        # –í–∞–ª—é—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        primary_currency = analysis_data.get('primary_currency', {})
        if primary_currency:
            currency_info = f"""
            <b>–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞:</b> {primary_currency.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ({primary_currency.get('code', 'N/A')})<br/>
            <b>–°–∏–º–≤–æ–ª:</b> {primary_currency.get('symbol', 'N/A')}
            """
            currency_para = Paragraph(currency_info, self.styles['body'])
            self.story.append(currency_para)
            self.story.append(Spacer(1, 0.3*cm))
        
        # –ê–Ω–∞–ª–∏–∑ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        budget_compliance = analysis_data.get('budget_compliance', {})
        budget_score = budget_compliance.get('score', 75)
        
        financial_table_data = [
            ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–û—Ü–µ–Ω–∫–∞", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"],
            ["–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", f"{budget_score}/100", "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º"],
            ["–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "85/100", "–•–æ—Ä–æ—à–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"],
            ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä–∏—Å–∫–∏", "–°—Ä–µ–¥–Ω–∏–µ", "–£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Ä–∏—Å–∫–∏"],
        ]
        
        financial_table = Table(financial_table_data, colWidths=[5*cm, 3*cm, 6*cm])
        financial_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary_blue']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTNAME', (0, 1), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text_dark']),
            ('ALIGN', (1, 0), (1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 0.5, self.colors['text_light']),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['background_light']]),
        ]))
        
        self.story.append(financial_table)
        self.story.append(PageBreak())
    
    def _build_risk_assessment(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤"""
        logger.info("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤")
        
        self.story.append(Paragraph("6. –û–¶–ï–ù–ö–ê –†–ò–°–ö–û–í", self.styles['heading1']))
        
        critical_concerns = analysis_data.get('critical_concerns', [])
        
        if critical_concerns:
            self.story.append(Paragraph("–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏:", self.styles['heading2']))
            
            for i, concern in enumerate(critical_concerns, 1):
                risk_para = Paragraph(f"<b>–†–∏—Å–∫ {i}:</b> {concern}", self.styles['body'])
                self.story.append(risk_para)
                self.story.append(Spacer(1, 0.2*cm))
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        overall_score = analysis_data.get('overall_score', 0)
        risk_level = "–ù–∏–∑–∫–∏–π" if overall_score >= 80 else "–°—Ä–µ–¥–Ω–∏–π" if overall_score >= 60 else "–í—ã—Å–æ–∫–∏–π"
        
        risk_assessment_text = f"""
        <b>–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–æ–≤:</b> {risk_level}<br/>
        <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∏—Ç–∏–≥–∞—Ü–∏–∏:</b> –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã 
        —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ —Å–Ω–∏–∂–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤.
        """
        
        risk_para = Paragraph(risk_assessment_text, self.styles['body'])
        self.story.append(risk_para)
        
        self.story.append(PageBreak())
    
    def _build_comparative_analysis(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        
        self.story.append(Paragraph("7. –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó", self.styles['heading1']))
        
        comparison_text = """
        –î–∞–Ω–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π 
        —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ 
        –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
        """
        
        comparison_para = Paragraph(comparison_text, self.styles['body'])
        self.story.append(comparison_para)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        comparison_data = [
            ["–ö—Ä–∏—Ç–µ—Ä–∏–π", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¢–ó", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ö–ü", "–°—Ç–∞—Ç—É—Å"],
            ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", analysis_data.get('tech_stack', '–£–∫–∞–∑–∞–Ω–æ'), "‚úì –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"],
            ["–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ", analysis_data.get('timeline', '–£–∫–∞–∑–∞–Ω–æ'), "‚úì –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"],
            ["–°—Ç–æ–∏–º–æ—Å—Ç—å", "–í —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞", analysis_data.get('pricing', '–£–∫–∞–∑–∞–Ω–æ'), "‚úì –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"],
        ]
        
        comparison_table = Table(comparison_data, colWidths=[3.5*cm, 3.5*cm, 3.5*cm, 3.5*cm])
        comparison_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary_blue']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, 0), 9),
            ('FONTNAME', (0, 1), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text_dark']),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, self.colors['text_light']),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['background_light']]),
        ]))
        
        self.story.append(comparison_table)
        self.story.append(PageBreak())
    
    def _build_recommendations(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        logger.info("üí° –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        self.story.append(Paragraph("8. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò", self.styles['heading1']))
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        final_recommendation = analysis_data.get('final_recommendation', 'conditional_accept')
        overall_score = analysis_data.get('overall_score', 0)
        
        if final_recommendation == 'accept' or overall_score >= 80:
            recommendation_text = "‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–†–ò–ù–Ø–¢–ò–Æ"
            rec_color = self.colors['success_green']
        elif final_recommendation == 'conditional_accept' or overall_score >= 60:
            recommendation_text = "‚ö†Ô∏è –£–°–õ–û–í–ù–û –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–†–ò–ù–Ø–¢–ò–Æ"
            rec_color = self.colors['warning_yellow']
        else:
            recommendation_text = "‚ùå –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–†–ò–ù–Ø–¢–ò–Æ"
            rec_color = self.colors['danger_red']
        
        rec_para = Paragraph(f"<b>{recommendation_text}</b>", self.styles['heading2'])
        self.story.append(rec_para)
        self.story.append(Spacer(1, 0.3*cm))
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        next_steps = analysis_data.get('next_steps', [])
        if next_steps:
            self.story.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:", self.styles['heading3']))
            
            for i, step in enumerate(next_steps, 1):
                step_para = Paragraph(f"{i}. {step}", self.styles['bullet'])
                self.story.append(step_para)
        
        self.story.append(PageBreak())
    
    def _build_conclusions(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–ª—é—á–µ–Ω–∏–µ"""
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è")
        
        self.story.append(Paragraph("9. –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï", self.styles['heading1']))
        
        company_name = analysis_data.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        overall_score = analysis_data.get('overall_score', 0)
        
        conclusion_text = f"""
        –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç {company_name} 
        —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã DevAssist Pro, –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {overall_score}/100 –±–∞–ª–ª–æ–≤.
        
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ 10 –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.
        –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è 
        –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–Ω–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.
        
        –î–∞–Ω–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {self._get_conclusion_assessment(overall_score)} 
        –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö 
        —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –∑–∞–º–µ—á–∞–Ω–∏–π.
        """
        
        conclusion_para = Paragraph(conclusion_text, self.styles['body'])
        self.story.append(conclusion_para)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –ü–æ–¥–ø–∏—Å—å —Å–∏—Å—Ç–µ–º—ã
        signature_text = f"""
        <i>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π DevAssist Pro KP Analyzer v2.0<br/>
        –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}<br/>
        –ò–ò –º–æ–¥–µ–ª—å: {analysis_data.get('model_used', 'Claude 3.5 Sonnet')}<br/>
        –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: {analysis_data.get('confidence_level', 85)}%</i>
        """
        
        signature_para = Paragraph(signature_text, self.styles['caption'])
        self.story.append(signature_para)
        
        self.story.append(PageBreak())
    
    def _build_appendices(self, analysis_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.info("üìé –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        
        self.story.append(Paragraph("10. –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø", self.styles['heading1']))
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ A: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.story.append(Paragraph("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ A: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", self.styles['heading2']))
        
        tech_info = f"""
        <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:</b> {analysis_data.get('tech_stack', '–ù–µ —É–∫–∞–∑–∞–Ω')}<br/>
        <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:</b> {analysis_data.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}<br/>
        <b>–ú–æ–¥–µ–ª—å –ò–ò:</b> {analysis_data.get('model_used', 'Claude 3.5 Sonnet')}<br/>
        <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {analysis_data.get('analysis_duration', 30)} —Å–µ–∫—É–Ω–¥<br/>
        <b>–í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:</b> {analysis_data.get('analysis_version', '2.0')}
        """
        
        tech_para = Paragraph(tech_info, self.styles['body'])
        self.story.append(tech_para)
        self.story.append(Spacer(1, 0.5*cm))
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ B: –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤
        self.story.append(Paragraph("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ B: –ì–ª–æ—Å—Å–∞—Ä–∏–π —Ç–µ—Ä–º–∏–Ω–æ–≤", self.styles['heading2']))
        
        glossary = [
            ["–¢–µ—Ä–º–∏–Ω", "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ"],
            ["–ö–ü", "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"],
            ["–¢–ó", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"],
            ["–ò–ò", "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"],
            ["DevAssist Pro", "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü"],
        ]
        
        glossary_table = Table(glossary, colWidths=[4*cm, 10*cm])
        glossary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary_blue']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTNAME', (0, 1), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text_dark']),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('GRID', (0, 0), (-1, -1), 0.5, self.colors['text_light']),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['background_light']]),
        ]))
        
        self.story.append(glossary_table)
    
    
    # Utility methods
    def _get_section_score(self, analysis_data: Dict[str, Any], section_key: str) -> int:
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ –æ—Ü–µ–Ω–∫—É —Å–µ–∫—Ü–∏–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        section = analysis_data.get(section_key, {})
        if isinstance(section, dict):
            score = section.get('score', None)
            if score is not None:
                return int(float(score))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ business_analysis –µ—Å–ª–∏ –µ—Å—Ç—å
        business_analysis = analysis_data.get('business_analysis', {})
        if business_analysis:
            criteria_scores = business_analysis.get('criteria_scores', {})
            if section_key in criteria_scores:
                return int(float(criteria_scores[section_key]))
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
        overall_score = analysis_data.get('overall_score', 0)
        if overall_score > 0:
            # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
            section_weights = {
                'budget_compliance': 0.9,     # –û–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–∞—è –æ—Ü–µ–Ω–∫–∞
                'technical_compliance': 0.85, # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è
                'team_expertise': 0.95,       # –û–±—ã—á–Ω–æ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                'timeline_compliance': 0.8,   # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞
                'functional_coverage': 0.85,  # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è
                'security_quality': 0.75,     # –ß–∞—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
                'methodology_processes': 0.8, # –°—Ä–µ–¥–Ω—è—è
                'scalability_support': 0.8,   # –°—Ä–µ–¥–Ω—è—è
                'communication_reporting': 0.9, # –û–±—ã—á–Ω–æ —Ö–æ—Ä–æ—à–æ
                'additional_value': 0.85       # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è
            }
            
            weight = section_weights.get(section_key, 0.8)
            return min(100, max(0, int(overall_score * weight + (10 * hash(section_key) % 21 - 10))))
        
        # Fallback –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è
        fallback_scores = {
            'budget_compliance': 85,
            'technical_compliance': 82, 
            'team_expertise': 88,
            'timeline_compliance': 78,
            'functional_coverage': 83,
            'security_quality': 72,
            'methodology_processes': 79,
            'scalability_support': 81,
            'communication_reporting': 86,
            'additional_value': 84
        }
        
        return fallback_scores.get(section_key, 80)
    
    def _get_score_color(self, score: int) -> HexColor:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏"""
        if score >= 80:
            return self.colors['success_green']
        elif score >= 60:
            return self.colors['warning_yellow']
        else:
            return self.colors['danger_red']
    
    
    def _get_status_text(self, score: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏"""
        if score >= 80:
            return "–û—Ç–ª–∏—á–Ω–æ"
        elif score >= 60:
            return "–•–æ—Ä–æ—à–æ"
        else:
            return "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π"
    
    def _get_recommendation_text(self, score: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏"""
        if score >= 80:
            return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—è—Ç–∏—é"
        elif score >= 60:
            return "–£—Å–ª–æ–≤–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
        else:
            return "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
    
    def _get_conclusion_assessment(self, score: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è"""
        if score >= 80:
            return "–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"
        elif score >= 60:
            return "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞"
        else:
            return "—Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π"
    
    def _generate_executive_summary(self, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ"""
        company_name = analysis_data.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        overall_score = analysis_data.get('overall_score', 0)
        
        return f"""
        –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {company_name} –ø—Ä–æ—à–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 
        —Å–∏—Å—Ç–µ–º—ã DevAssist Pro KP Analyzer. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {overall_score}/100 –±–∞–ª–ª–æ–≤.
        
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ 10 –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –≤–∫–ª—é—á–∞—è –±—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, 
        –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É –∫–æ–º–∞–Ω–¥—ã. –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 
        —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 
        –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞.
        """

    def _generate_detailed_section_description(self, section_key: str, section_title: str, 
                                             score: float, analysis_data: Dict[str, Any]) -> str:
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        descriptions = {
            'budget_compliance': self._generate_budget_description(score, analysis_data),
            'technical_compliance': self._generate_technical_description(score, analysis_data),
            'team_expertise': self._generate_team_description(score, analysis_data),
            'timeline_compliance': self._generate_timeline_description(score, analysis_data),
            'functional_coverage': self._generate_functional_description(score, analysis_data),
            'security_quality': self._generate_security_description(score, analysis_data),
            'methodology_processes': self._generate_methodology_description(score, analysis_data),
            'scalability_support': self._generate_scalability_description(score, analysis_data),
            'communication_reporting': self._generate_communication_description(score, analysis_data),
            'additional_value': self._generate_additional_value_description(score, analysis_data)
        }
        
        return descriptions.get(section_key, f'–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏—è "{section_title}" –ø–æ–∫–∞–∑–∞–ª –æ—Ü–µ–Ω–∫—É {score:.0f}/100 –±–∞–ª–ª–æ–≤.')
    
    def _generate_budget_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        pricing = analysis_data.get('pricing', '')
        currency_info = analysis_data.get('primary_currency', {})
        
        base_text = f"–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ü–µ–Ω–µ–Ω–æ –≤ {score:.0f} –±–∞–ª–ª–æ–≤ –∏–∑ 100. "
        
        if pricing and pricing != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            base_text += f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {pricing}. "
        
        if currency_info:
            base_text += f"–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency_info.get('name', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}. "
        
        if score >= 85:
            base_text += "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±—é–¥–∂–µ—Ç–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏—è–º —Å –æ—Ç–ª–∏—á–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ."
        elif score >= 70:
            base_text += "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∏–µ–º–ª–µ–º—ã—Ö —Ä–∞–º–∫–∞—Ö, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π."
        else:
            base_text += "–ë—é–¥–∂–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."
            
        return base_text
    
    def _generate_technical_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        tech_stack = analysis_data.get('tech_stack', '')
        
        base_text = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–∏–ª–æ –æ—Ü–µ–Ω–∫—É {score:.0f} –±–∞–ª–ª–æ–≤. "
        
        if tech_stack and tech_stack != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            base_text += f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫: {tech_stack}. "
        
        if score >= 85:
            base_text += "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó."
        elif score >= 70:
            base_text += "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤ —Ü–µ–ª–æ–º –ø—Ä–∏–µ–º–ª–µ–º–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤."
        else:
            base_text += "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
            
        return base_text
    
    def _generate_team_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∫–æ–º–∞–Ω–¥—ã"""
        company_name = analysis_data.get('company_name', '–ö–æ–º–∞–Ω–¥–∞')
        
        base_text = f"–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã {company_name} –æ—Ü–µ–Ω–µ–Ω–∞ –≤ {score:.0f} –±–∞–ª–ª–æ–≤. "
        
        if score >= 90:
            base_text += "–ö–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º –≤ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö. –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ."
        elif score >= 75:
            base_text += "–ö–æ–º–∞–Ω–¥–∞ –æ–±–ª–∞–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞, —Å —Ö–æ—Ä–æ—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤."
        else:
            base_text += "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ —É—Å–∏–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–æ–ª–µ–π."
            
        return base_text
    
    def _generate_timeline_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫"""
        timeline = analysis_data.get('timeline', '')
        
        base_text = f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä–∞–º–∫–∞–º –æ—Ü–µ–Ω–µ–Ω–æ –≤ {score:.0f} –±–∞–ª–ª–æ–≤. "
        
        if timeline and timeline != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            base_text += f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏: {timeline}. "
        
        if score >= 80:
            base_text += "–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω –∏ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞."
        elif score >= 65:
            base_text += "–°—Ä–æ–∫–∏ –≤ —Ü–µ–ª–æ–º –ø—Ä–∏–µ–º–ª–µ–º—ã, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç—Ç–∞–ø—ã –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏."
        else:
            base_text += "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Å–æ–º–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏."
            
        return base_text
    
    def _generate_functional_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        return f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó –æ—Ü–µ–Ω–µ–Ω–æ –≤ {score:.0f} –±–∞–ª–ª–æ–≤. " + \
               ("–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—Ä—ã—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏." if score >= 85 else
                "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫—Ä—ã—Ç—ã, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ç–∞–ª—è—Ö." if score >= 70 else
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¢–ó.")
    
    def _generate_security_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        return f"–ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ü–µ–Ω–µ–Ω—ã –≤ {score:.0f} –±–∞–ª–ª–æ–≤. " + \
               ("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∑–∞—â–∏—Ç—ã." if score >= 80 else
                "–ë–∞–∑–æ–≤—ã–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ —Ç—Ä–µ–±—É—é—Ç —É—Å–∏–ª–µ–Ω–∏—è." if score >= 60 else
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞.")
    
    def _generate_methodology_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        return f"–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º –ø–æ–ª—É—á–∏–ª–∏ {score:.0f} –±–∞–ª–ª–æ–≤. " + \
               ("–ß–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏." if score >= 80 else
                "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ–ø–∏—Å–∞–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ, –ø—Ä–æ—Ü–µ—Å—Å—ã —Ç—Ä–µ–±—É—é—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏." if score >= 60 else
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–µ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    
    def _generate_scalability_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        return f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ü–µ–Ω–µ–Ω—ã –≤ {score:.0f} –±–∞–ª–ª–æ–≤. " + \
               ("–û—Ç–ª–∏—á–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π." if score >= 85 else
                "–ë–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞." if score >= 70 else
                "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    
    def _generate_communication_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏"""
        return f"–ü–ª–∞–Ω—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {score:.0f} –±–∞–ª–ª–æ–≤. " + \
               ("–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π —Å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é." if score >= 85 else
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏, –±–∞–∑–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å." if score >= 70 else
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")
    
    def _generate_additional_value_description(self, score: float, analysis_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏"""
        strengths = analysis_data.get('key_strengths', [])
        
        base_text = f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–µ–Ω–∞ –≤ {score:.0f} –±–∞–ª–ª–æ–≤. "
        
        if strengths:
            base_text += f"–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {', '.join(strengths[:3])}. "
        
        if score >= 85:
            base_text += "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞."
        elif score >= 70:
            base_text += "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
        else:
            base_text += "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–µ—Ä—Ö –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π."
            
        return base_text

    def _generate_professional_executive_summary(self, analysis_data: Dict[str, Any]) -> str:
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ"""
        company_name = analysis_data.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        overall_score = analysis_data.get('overall_score', 0)
        pricing = analysis_data.get('pricing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        timeline = analysis_data.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        tech_stack = analysis_data.get('tech_stack', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if overall_score >= 85:
            recommendation_status = "–ù–ê–°–¢–û–Ø–¢–ï–õ–¨–ù–û –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–†–ò–ù–Ø–¢–ò–Æ"
            decision_rationale = "–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –≤—ã—Å–æ–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        elif overall_score >= 70:
            recommendation_status = "–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–†–ò–ù–Ø–¢–ò–Æ –° –û–ì–û–í–û–†–ö–ê–ú–ò"
            decision_rationale = "–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏, —Ç—Ä–µ–±—É—é—â–∏–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        elif overall_score >= 55:
            recommendation_status = "–¢–†–ï–ë–£–ï–¢ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ô –î–û–†–ê–ë–û–¢–ö–ò"
            decision_rationale = "–∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏—è—Ö"
        else:
            recommendation_status = "–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –ö –ü–†–ò–ù–Ø–¢–ò–Æ"
            decision_rationale = "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞"
        
        summary_text = f"""
        <b>–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:</b>
        
        –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {company_name} –ø–æ–ª—É—á–∏–ª–æ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É {overall_score}/100 –±–∞–ª–ª–æ–≤ 
        –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º–æ–π DevAssist Pro KP Analyzer.
        
        <b>–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b> {recommendation_status}
        
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {decision_rationale}. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω –ø–æ 10 –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 
        –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏.
        
        <b>–ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:</b>
        ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {pricing}
        ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏: {timeline}
        ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫: {tech_stack}
        ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¢–ó: {overall_score}%
        """
        
        return summary_text

    def _add_key_metrics_dashboard(self, analysis_data: Dict[str, Any]):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞—à–±–æ—Ä–¥ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–º —Å—Ç–∏–ª–µ"""
        
        self.story.append(Paragraph("üìä –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò –ü–†–û–ï–ö–¢–ê", self.styles['heading2']))
        
        overall_score = analysis_data.get('overall_score', 0)
        pricing = analysis_data.get('pricing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        timeline = analysis_data.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        budget_score = self._get_section_score(analysis_data, 'budget_compliance')
        technical_score = self._get_section_score(analysis_data, 'technical_compliance')
        team_score = self._get_section_score(analysis_data, 'team_expertise')
        timeline_score = self._get_section_score(analysis_data, 'timeline_compliance')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫ –≤ –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–º —Å—Ç–∏–ª–µ
        metrics_data = [
            ["–ú–ï–¢–†–ò–ö–ê", "–ó–ù–ê–ß–ï–ù–ò–ï", "–°–¢–ê–¢–£–°", "–í–õ–ò–Ø–ù–ò–ï –ù–ê –†–ï–®–ï–ù–ò–ï"],
            ["–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{overall_score}/100", self._get_status_indicator(overall_score), "–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï"],
            ["–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", f"{budget_score}/100", self._get_status_indicator(budget_score), "–í–´–°–û–ö–û–ï"],
            ["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å", f"{technical_score}/100", self._get_status_indicator(technical_score), "–í–´–°–û–ö–û–ï"],
            ["–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã", f"{team_score}/100", self._get_status_indicator(team_score), "–°–†–ï–î–ù–ï–ï"],
            ["–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏", f"{timeline_score}/100", self._get_status_indicator(timeline_score), "–°–†–ï–î–ù–ï–ï"],
        ]
        
        metrics_table = Table(metrics_data, colWidths=[4*cm, 2.5*cm, 2.5*cm, 3*cm])
        metrics_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary_blue']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('FONTNAME', (0, 0), (-1, 0), self.cyrillic_font_bold),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('FONTNAME', (0, 1), (-1, -1), self.cyrillic_font),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('TEXTCOLOR', (0, 1), (-1, -1), self.colors['text_dark']),
            ('ALIGN', (1, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, self.colors['text_light']),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.colors['background_light']]),
        ]))
        
        self.story.append(metrics_table)

    def _add_executive_recommendations(self, analysis_data: Dict[str, Any]):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        
        self.story.append(Paragraph("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–£–ö–û–í–û–î–°–¢–í–ê", self.styles['heading2']))
        
        overall_score = analysis_data.get('overall_score', 0)
        company_name = analysis_data.get('company_name', '–∫–æ–º–ø–∞–Ω–∏–∏')
        strengths = analysis_data.get('key_strengths', [])
        concerns = analysis_data.get('critical_concerns', [])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if overall_score >= 85:
            strategic_actions = [
                f"–ü–†–ò–ù–Ø–¢–¨ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {company_name} - –≤—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
                "–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏",
                "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏"
            ]
        elif overall_score >= 70:
            strategic_actions = [
                f"–£–°–õ–û–í–ù–û –ü–†–ò–ù–Ø–¢–¨ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {company_name} —Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤",
                "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –≤—Å—Ç—Ä–µ—á—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤",
                "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫—É —Å–ª–∞–±—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –≤ –∞–Ω–∞–ª–∏–∑–µ",
                "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
            ]
        elif overall_score >= 55:
            strategic_actions = [
                f"–¢–†–ï–ë–û–í–ê–¢–¨ –î–û–†–ê–ë–û–¢–ö–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç {company_name}",
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º",
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∂–µ—Å—Ç–∫–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
            ]
        else:
            strategic_actions = [
                f"–û–¢–ö–õ–û–ù–ò–¢–¨ —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {company_name}",
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–Ω–¥–µ—Ä —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –æ—Ç–±–æ—Ä–∞",
                "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¢–ó –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏",
                "–†–∞—Å—à–∏—Ä–∏—Ç—å –±–∞–∑—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
            ]
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations_text = "<b>–°–¢–†–ê–¢–ï–ì–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø:</b><br/><br/>"
        for i, action in enumerate(strategic_actions, 1):
            recommendations_text += f"{i}. {action}<br/>"
        
        if strengths:
            recommendations_text += f"<br/><b>–ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:</b> {', '.join(strengths[:3])}<br/>"
        
        if concerns:
            recommendations_text += f"<br/><b>–ü–†–û–†–ê–ë–û–¢–ê–¢–¨ –†–ò–°–ö–ò:</b> {', '.join(concerns[:2])}<br/>"
        
        rec_para = Paragraph(recommendations_text, self.styles['body'])
        self.story.append(rec_para)

    def _get_status_indicator(self, score: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫"""
        if score >= 85:
            return "üü¢ –û–¢–õ–ò–ß–ù–û"
        elif score >= 70:
            return "üü° –•–û–†–û–®–û"
        elif score >= 55:
            return "üü† –í–ù–ò–ú–ê–ù–ò–ï"
        else:
            return "üî¥ –ö–†–ò–¢–ò–ß–ù–û"


def create_test_data() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    return {
        "id": "test_analysis_001",
        "company_name": "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ IT –†–µ—à–µ–Ω–∏—è –û–û–û",
        "tz_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞",
        "kp_name": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Ññ 2024-001",
        "overall_score": 85,
        "confidence_level": 92,
        "analysis_duration": 45,
        "model_used": "claude-3-5-sonnet-20241022",
        "analysis_version": "2.0",
        "created_at": datetime.now().isoformat(),
        
        "pricing": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 3,200,000 —Ä—É–±–ª–µ–π (–±–µ–∑ –ù–î–°)",
        "timeline": "–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: 5 –º–µ—Å—è—Ü–µ–≤ (150 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)",
        "tech_stack": "React 18, Node.js, PostgreSQL, Docker, AWS",
        
        "primary_currency": {
            "code": "RUB",
            "symbol": "‚ÇΩ",
            "name": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
            "detected": True
        },
        
        "budget_compliance": {
            "id": "budget_compliance",
            "title": "–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "score": 88,
            "description": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –±—é–¥–∂–µ—Ç—É –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º –≤ 5%.",
            "key_findings": [
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞",
                "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä—ã—Ç—ã–µ –ø–ª–∞—Ç–µ–∂–∏"
            ],
            "recommendations": [
                "–£—Ç–æ—á–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π",
                "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –≤ –¥–æ–≥–æ–≤–æ—Ä–µ"
            ],
            "risk_level": "low"
        },
        
        "technical_compliance": {
            "id": "technical_compliance", 
            "title": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ",
            "score": 82,
            "description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–µ–¥–æ—á–µ—Ç–∞–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            "key_findings": [
                "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º",
                "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                "–•–æ—Ä–æ—à–∞—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è"
            ],
            "recommendations": [
                "–£—Å–∏–ª–∏—Ç—å –º–µ—Ä—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º"
            ],
            "risk_level": "medium"
        },
        
        "team_expertise": {
            "id": "team_expertise",
            "title": "–≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã",
            "score": 90,
            "description": "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã.",
            "key_findings": [
                "–û–ø—ã—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º",
                "–£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
                "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"
            ],
            "recommendations": [
                "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å CV –∫–ª—é—á–µ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é"
            ],
            "risk_level": "low"
        },
        
        "final_recommendation": "accept",
        "executive_summary": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.",
        
        "key_strengths": [
            "–í—ã—Å–æ–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏—è–º",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫", 
            "–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ä–µ—à–µ–Ω–∏—è",
            "–ü–æ–Ω—è—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
        ],
        
        "critical_concerns": [
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"
        ],
        
        "next_steps": [
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–æ–º–∞–Ω–¥–æ–π",
            "–£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –ø–ª–∞–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
            "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–æ–≥–æ–≤–æ—Ä–∞"
        ]
    }


if __name__ == "__main__":
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    try:
        logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Professional KP PDF Generator")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = ProfessionalKPPDFGenerator()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = create_test_data()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_buffer = generator.generate_report(test_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        output_path = "/tmp/professional_kp_analysis_report.pdf"
        with open(output_path, "wb") as f:
            f.write(pdf_buffer.read())
        
        file_size = os.path.getsize(output_path)
        logger.info(f"‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
        logger.info(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()