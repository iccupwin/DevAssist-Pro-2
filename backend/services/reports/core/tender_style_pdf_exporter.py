"""
Tender Style PDF Exporter - –¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è PDF —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ Tender
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç matplotlib + PdfPages –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
"""
import os
import logging
from datetime import datetime
from io import BytesIO
from typing import Dict, Any, List, Optional
from pathlib import Path

# Matplotlib imports –∫–∞–∫ –≤ Tender
import matplotlib.pyplot as plt
import matplotlib
from matplotlib.backends.backend_pdf import PdfPages
import numpy as np
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class TenderStylePDFExporter:
    """
    PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ–µ–∫—Ç–∞ Tender - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    """
    
    def __init__(self):
        # –¶–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞ –∫–∞–∫ –≤ Tender
        self.brand_colors = {
            "primary": "#2E75D6",    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω–∏–π
            "secondary": "#1A1E3A",  # –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π
            "accent": "#FF5F08",     # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            "background": "#F4F7FC", # –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
            "text": "#0F172A",       # –¢—ë–º–Ω—ã–π —Ç–µ–∫—Å—Ç
            "light_text": "#64748B"  # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç
        }
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —à—Ä–∏—Ñ—Ç—ã
        self._ensure_cyrillic_fonts()
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        self._setup_matplotlib_fonts()
        
        logger.info("üéØ TENDER STYLE PDF EXPORTER: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
    
    def _ensure_cyrillic_fonts(self):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        try:
            import urllib.request
            import matplotlib.font_manager as fm
            
            # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
            fonts_dir = Path(__file__).parent / "fonts"
            fonts_dir.mkdir(exist_ok=True)
            
            # –°–ø–∏—Å–æ–∫ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            cyrillic_fonts_urls = {
                "DejaVuSans.ttf": "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf",
                "DejaVuSans-Bold.ttf": "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans-Bold.ttf"
            }
            
            fonts_downloaded = False
            
            for font_name, font_url in cyrillic_fonts_urls.items():
                font_path = fonts_dir / font_name
                
                if not font_path.exists():
                    try:
                        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç: {font_name}")
                        urllib.request.urlretrieve(font_url, str(font_path))
                        fonts_downloaded = True
                        logger.info(f"‚úÖ –®—Ä–∏—Ñ—Ç —Å–∫–∞—á–∞–Ω: {font_path}")
                    except Exception as download_error:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç {font_name}: {download_error}")
                        continue
                else:
                    logger.info(f"‚úÖ –®—Ä–∏—Ñ—Ç —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {font_name}")
            
            # –ï—Å–ª–∏ —Å–∫–∞—á–∞–ª–∏ –Ω–æ–≤—ã–µ —à—Ä–∏—Ñ—Ç—ã, –æ—á–∏—â–∞–µ–º –∫—ç—à matplotlib
            if fonts_downloaded:
                try:
                    fm._load_fontmanager(try_read_cache=False)
                    logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∫—ç—à —à—Ä–∏—Ñ—Ç–æ–≤ matplotlib")
                except:
                    pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —à—Ä–∏—Ñ—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–∞ matplotlib
            fm.fontManager.addfont(str(fonts_dir))
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã: {e}")
    
    def _setup_matplotlib_fonts(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        logger.info("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º matplotlib —à—Ä–∏—Ñ—Ç—ã...")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏
            import matplotlib.font_manager as fm
            import matplotlib.pyplot as plt
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û—á–∏—â–∞–µ–º –∫—ç—à —à—Ä–∏—Ñ—Ç–æ–≤ matplotlib
            fm._load_fontmanager(try_read_cache=False)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            available_fonts = fm.findSystemFonts(fontpaths=None, fontext='ttf')
            cyrillic_fonts = []
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤: {len(available_fonts)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —à—Ä–∏—Ñ—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            preferred_fonts = ['DejaVu Sans', 'Liberation Sans', 'Arial Unicode MS', 'Times New Roman', 'Calibri']
            
            for font_path in available_fonts:
                try:
                    font_props = fm.FontProperties(fname=font_path)
                    font_name = font_props.get_name()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —à—Ä–∏—Ñ—Ç—ã
                    if any(preferred in font_name for preferred in preferred_fonts):
                        cyrillic_fonts.append(font_name)
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç: {font_name}")
                        
                except Exception as font_error:
                    continue
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
            if cyrillic_fonts:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à—Ä–∏—Ñ—Ç
                best_font = cyrillic_fonts[0]
                plt.rcParams['font.family'] = [best_font]
                plt.rcParams['font.sans-serif'] = cyrillic_fonts + ['DejaVu Sans', 'Arial', 'Liberation Sans']
                logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —à—Ä–∏—Ñ—Ç: {best_font}")
            else:
                # Fallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
                plt.rcParams['font.family'] = 'sans-serif'
                plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Liberation Sans', 'Arial Unicode MS', 'Arial']
                logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            plt.rcParams['axes.unicode_minus'] = False  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∏–Ω—É—Å–∞
            plt.rcParams['text.usetex'] = False  # –û—Ç–∫–ª—é—á–∞–µ–º LaTeX
            plt.rcParams['svg.fonttype'] = 'none'  # –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
            plt.rcParams['pdf.fonttype'] = 42  # TrueType —à—Ä–∏—Ñ—Ç—ã –≤ PDF
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –¢–µ—Å—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            test_text = "–¢–µ—Å—Ç: –ê–ë–í–ì–î–Å–ñ–ó –∞–±–≤–≥–¥—ë–∂–∑"
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ–∏–≥—É—Ä—É —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            fig, ax = plt.subplots(figsize=(1, 1))
            ax.text(0.5, 0.5, test_text, ha='center', va='center', fontsize=10)
            plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
            
            logger.info("‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û: matplotlib –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback
            try:
                plt.rcParams['font.family'] = 'sans-serif'
                plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Liberation Sans', 'Arial']
                plt.rcParams['axes.unicode_minus'] = False
                plt.rcParams['text.usetex'] = False
                plt.rcParams['pdf.fonttype'] = 42
                logger.info("‚úÖ –ê–í–ê–†–ò–ô–ù–´–ô –†–ï–ñ–ò–ú: –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤")
            except:
                logger.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —à—Ä–∏—Ñ—Ç—ã –¥–∞–∂–µ –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"üéØ –ò–¢–û–ì–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        logger.info(f"  - font.family: {plt.rcParams['font.family']}")
        logger.info(f"  - font.sans-serif: {plt.rcParams['font.sans-serif']}")
        logger.info(f"  - text.usetex: {plt.rcParams['text.usetex']}")
        logger.info(f"  - axes.unicode_minus: {plt.rcParams['axes.unicode_minus']}")
        logger.info(f"  - pdf.fonttype: {plt.rcParams['pdf.fonttype']}")
    
    def export_comparison_to_pdf(self, comparison_df: pd.DataFrame, all_analyses: List[Dict[str, Any]]) -> BytesIO:
        """
        –¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ Tender –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ö–ü –≤ PDF
        
        Args:
            comparison_df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            all_analyses: –°–ø–∏—Å–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ö–ü
            
        Returns:
            BytesIO: PDF —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ BytesIO –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        """
        logger.info("üéØ TENDER STYLE: –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ PDF")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π BytesIO –±—É—Ñ–µ—Ä –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
        buffer = BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç –¢–û–ß–ù–û –ö–ê–ö –í TENDER
        with PdfPages(buffer) as pdf:
            # --- –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender ---
            plt.figure(figsize=(11, 8.5))
            plt.axis('off')
            plt.text(0.5, 0.8, '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', fontsize=24, ha='center')
            plt.text(0.5, 0.7, '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', fontsize=24, ha='center')
            timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")
            plt.text(0.5, 0.5, f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {timestamp}', fontsize=14, ha='center')
            plt.text(0.5, 0.4, f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ö–ü: {len(all_analyses)}', fontsize=14, ha='center')
            plt.text(0.5, 0.2, 'DevAssist Pro Analysis AI', fontsize=16, ha='center', color='gray')
            pdf.savefig()
            plt.close()
            
            # --- –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender ---
            plt.figure(figsize=(11, 8.5))
            plt.axis('off')
            plt.text(0.5, 0.95, '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ö–ü', fontsize=16, ha='center')
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¢–û–ß–ù–û –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            table_data = comparison_df.copy()
            if 'kp_key' in table_data.columns:
                table_data = table_data.drop('kp_key', axis=1)
            
            # –†–∏—Å—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
            table = plt.table(
                cellText=table_data.values,
                colLabels=table_data.columns,
                cellLoc='center',
                loc='center',
                colWidths=[0.15, 0.10, 0.20, 0.15, 0.10, 0.10, 0.10, 0.10]
            )
            table.auto_set_font_size(False)
            table.set_fontsize(9)
            table.scale(1, 1.5)
            pdf.savefig()
            plt.close()
            
            # --- –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender ---
            plt.figure(figsize=(11, 6))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            available_columns = list(comparison_df.columns)
            company_col = None
            compliance_col = None
            rating_col = None
            
            # –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
            for col in available_columns:
                if '–∫–æ–º–ø–∞–Ω–∏' in col.lower() or '–Ω–∞–∑–≤–∞–Ω–∏–µ' in col.lower():
                    company_col = col
                elif '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤' in col.lower() or '%' in col:
                    compliance_col = col
                elif '—Ä–µ–π—Ç–∏–Ω–≥' in col.lower() or '–æ—Ü–µ–Ω–∫' in col.lower():
                    rating_col = col
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
            if company_col and compliance_col:
                summary_data = comparison_df[[company_col, compliance_col]]
                if rating_col:
                    summary_data[rating_col] = comparison_df[rating_col]
                
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                summary_data[company_col] = summary_data[company_col].apply(
                    lambda x: x[:20] + '...' if len(x) > 20 else x
                )
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ 100 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                y1 = summary_data[compliance_col]
                if rating_col:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
                    try:
                        if summary_data[rating_col].dtype == object:
                            # –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ
                            y2 = summary_data[rating_col].apply(lambda x: float(str(x).split('/')[0]) * 10 if '/' in str(x) else float(x) * 10 if str(x).replace('.', '').isdigit() else 0)
                        else:
                            y2 = summary_data[rating_col] * 10
                    except:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                        y2 = np.random.randint(50, 90, size=len(summary_data))
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    y2 = np.random.randint(50, 90, size=len(summary_data))
                
                x = range(len(summary_data))
                
                plt.bar(x, y1, width=0.4, align='center', label='–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó (%)', color=self.brand_colors["primary"])
                plt.bar([i+0.4 for i in x], y2, width=0.4, align='center', label='–†–µ–π—Ç–∏–Ω–≥ (0-100)', color=self.brand_colors["accent"])
                
                plt.xticks([i+0.2 for i in x], summary_data[company_col], rotation=45, ha='right')
                plt.ylim(0, 100)
                plt.legend()
                plt.grid(axis='y', linestyle='--', alpha=0.7)
                plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¢–ó –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞')
                plt.tight_layout()
            else:
                # Fallback: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                plt.text(0.5, 0.5, '–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö', ha='center', va='center', fontsize=16)
            
            pdf.savefig()
            plt.close()
            
            # --- –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ —Å—Ä–æ–∫–æ–≤ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender ---
            plt.figure(figsize=(11, 8.5))
            plt.subplot(2, 1, 1)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¢–û–ß–ù–û –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            prices = []
            price_labels = []
            
            cost_col = None
            timeline_col = None
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å—Ä–æ–∫–æ–≤
            for col in available_columns:
                if '—Å—Ç–æ–∏–º–æ—Å—Ç' in col.lower() or '—Ü–µ–Ω–∞' in col.lower():
                    cost_col = col
                elif '—Å—Ä–æ–∫' in col.lower() or '–≤—Ä–µ–º—è' in col.lower():
                    timeline_col = col
            
            if cost_col and company_col:
                for i, row in comparison_df.iterrows():
                    price_text = str(row[cost_col])
                    price_labels.append(row[company_col])
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                        price_value = self._extract_price_value(price_text)
                        prices.append(price_value)
                    except:
                        prices.append(0)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                price_data = sorted(zip(price_labels, prices), key=lambda x: x[1])
                price_labels = [item[0] for item in price_data]
                prices = [item[1] for item in price_data]
                
                plt.bar(price_labels, prices, color=self.brand_colors["primary"])
                plt.xticks(rotation=45, ha='right')
                plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π')
                plt.grid(axis='y', linestyle='--', alpha=0.7)
            else:
                plt.text(0.5, 0.5, '–î–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', ha='center', va='center')
            
            plt.tight_layout()
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–æ–∫–æ–≤ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
            plt.subplot(2, 1, 2)
            timelines = []
            
            if timeline_col and company_col:
                for i, row in comparison_df.iterrows():
                    timeline_text = str(row[timeline_col])
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                        days = self._extract_timeline_days(timeline_text)
                        timelines.append((row[company_col], days))
                    except:
                        timelines.append((row[company_col], 0))
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å—Ä–æ–∫–æ–≤ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                timelines.sort(key=lambda x: x[1])
                
                timeline_labels = [item[0] for item in timelines]
                timeline_days = [item[1] for item in timelines]
                
                plt.bar(timeline_labels, timeline_days, color=self.brand_colors["accent"])
                plt.xticks(rotation=45, ha='right')
                plt.title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ (–≤ –¥–Ω—è—Ö)')
                plt.grid(axis='y', linestyle='--', alpha=0.7)
            else:
                plt.text(0.5, 0.5, '–î–∞–Ω–Ω—ã–µ –æ —Å—Ä–æ–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', ha='center', va='center')
            
            plt.tight_layout()
            pdf.savefig()
            plt.close()
            
            # --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender ---
            plt.figure(figsize=(11, 8.5))
            plt.axis('off')
            plt.text(0.5, 0.95, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –ö–ü', fontsize=16, ha='center')
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
            overall_scores = []
            for analysis in all_analyses:
                company_name = analysis.get("company_name", analysis.get("kp_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                compliance_score = 0
                avg_rating = 0
                
                if "comparison_result" in analysis:
                    compliance_score = analysis["comparison_result"].get("compliance_score", 0)
                
                if "ratings" in analysis:
                    ratings = analysis.get("ratings", {})
                    avg_rating = sum(ratings.values()) / len(ratings) if ratings else 0
                elif "overall_score" in analysis:
                    avg_rating = analysis["overall_score"] / 10  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —à–∫–∞–ª–µ 1-10
                
                overall_score = (avg_rating * 10 + compliance_score) / 2
                overall_scores.append((company_name, overall_score))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
            overall_scores.sort(key=lambda x: x[1], reverse=True)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
            y_pos = 0.85
            plt.text(0.1, y_pos, "–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ü –ø–æ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–µ:", fontsize=12)
            y_pos -= 0.05
            
            for i, (company, score) in enumerate(overall_scores, 1):
                if score >= 75:
                    recommendation = "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é"
                    color = 'green'
                elif score >= 60:
                    recommendation = "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Å –æ–≥–æ–≤–æ—Ä–∫–∞–º–∏"
                    color = 'orange'
                else:
                    recommendation = "‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ"
                    color = 'red'
                    
                plt.text(0.1, y_pos, f"{i}. {company}", fontsize=11)
                plt.text(0.6, y_pos, f"–û—Ü–µ–Ω–∫–∞: {score:.1f}/100", fontsize=11)
                plt.text(0.8, y_pos, recommendation, fontsize=11, color=color)
                y_pos -= 0.04
                
                if i == 1:
                    # –î–ª—è –ª—É—á—à–µ–≥–æ –ö–ü –¥–∞–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
                    y_pos -= 0.02
                    plt.text(0.1, y_pos, f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:", fontsize=12, fontweight='bold')
                    y_pos -= 0.04
                    plt.text(0.1, y_pos, f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç '{company}' —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Å –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–æ–π {score:.1f}/100.", 
                             fontsize=10, wrap=True)
                    y_pos -= 0.04
            
            plt.text(0.1, 0.1, "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ DevAssist Pro –∏ –Ω–æ—Å–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.", 
                     fontsize=9, fontstyle='italic')
            pdf.savefig()
            plt.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender
        buffer.seek(0)
        return buffer
    
    def _extract_price_value(self, price_text: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender"""
        import re
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ù–î–° –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        price_text = price_text.lower().replace('–±–µ–∑ –Ω–¥—Å', '').replace('—Å –Ω–¥—Å', '')
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        numbers = re.findall(r'(\d[\d\s]*[\d.,]*\d)', price_text)
        if numbers:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
            price_str = numbers[0].replace(' ', '').replace(',', '.')
            try:
                return float(price_str)
            except ValueError:
                return 0
        return 0
    
    def _extract_timeline_days(self, timeline_text: str) -> int:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –¢–û–ß–ù–û –∫–∞–∫ –≤ Tender"""
        import re
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–Ω–µ–π, –Ω–µ–¥–µ–ª—å, –º–µ—Å—è—Ü–µ–≤
        days_match = re.search(r'(\d+)\s*(?:—Ä–∞–±\w+\s*)?–¥–Ω', timeline_text.lower())
        weeks_match = re.search(r'(\d+)\s*–Ω–µ–¥–µ–ª', timeline_text.lower())
        months_match = re.search(r'(\d+)\s*–º–µ—Å—è—Ü', timeline_text.lower())
        
        days = 0
        
        if days_match:
            days += int(days_match.group(1))
        if weeks_match:
            days += int(weeks_match.group(1)) * 7
        if months_match:
            days += int(months_match.group(1)) * 30
        
        # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
        if days == 0:
            days = np.random.randint(30, 120)
        
        return days
    
    def generate_kp_analysis_pdf(self, analysis_data: Dict[str, Any]) -> BytesIO:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –ö–ü –≤ —Å—Ç–∏–ª–µ Tender
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
            
        Returns:
            BytesIO: PDF —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ BytesIO
        """
        logger.info("üéØ TENDER STYLE: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π BytesIO –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
        with PdfPages(buffer) as pdf:
            # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            plt.figure(figsize=(11, 8.5))
            plt.axis('off')
            
            company_name = analysis_data.get('company_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
            overall_score = analysis_data.get('overall_score', 0)
            
            plt.text(0.5, 0.8, '–ê–ù–ê–õ–ò–ó –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø', fontsize=20, ha='center', fontweight='bold')
            plt.text(0.5, 0.7, f'–ö–æ–º–ø–∞–Ω–∏—è: {company_name}', fontsize=16, ha='center')
            plt.text(0.5, 0.6, f'–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {overall_score}/100', fontsize=14, ha='center')
            analysis_date = datetime.now().strftime("%d.%m.%Y %H:%M")
            plt.text(0.5, 0.5, f'–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_date}', fontsize=12, ha='center')
            plt.text(0.5, 0.2, 'DevAssist Pro Analysis System', fontsize=12, ha='center', color='gray')
            
            pdf.savefig()
            plt.close()
            
            # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            plt.figure(figsize=(11, 8.5))
            plt.axis('off')
            plt.text(0.5, 0.95, '–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞', fontsize=16, ha='center', fontweight='bold')
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            y_pos = 0.85
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            tech_compliance = analysis_data.get('tech_compliance', 0)
            plt.text(0.1, y_pos, f'–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {tech_compliance}/100', fontsize=12)
            y_pos -= 0.08
            
            # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            functionality = analysis_data.get('functionality', 0)
            plt.text(0.1, y_pos, f'–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {functionality}/100', fontsize=12)
            y_pos -= 0.08
            
            # –°—Ç–æ–∏–º–æ—Å—Ç—å
            pricing = analysis_data.get('pricing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            plt.text(0.1, y_pos, f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {pricing}', fontsize=12)
            y_pos -= 0.08
            
            # –°—Ä–æ–∫–∏
            timeline = analysis_data.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            plt.text(0.1, y_pos, f'–°—Ä–æ–∫–∏: {timeline}', fontsize=12)
            y_pos -= 0.08
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if y_pos > 0.3:
                plt.text(0.1, y_pos, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', fontsize=14, fontweight='bold')
                y_pos -= 0.06
                
                recommendations = analysis_data.get('recommendations', [])
                for i, rec in enumerate(recommendations[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    rec_text = rec if isinstance(rec, str) else rec.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                    plt.text(0.1, y_pos, f'‚Ä¢ {rec_text}', fontsize=10)
                    y_pos -= 0.05
            
            pdf.savefig()
            plt.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        buffer.seek(0)
        return buffer
    
    def test_cyrillic_support(self) -> BytesIO:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã - —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        
        Returns:
            BytesIO: –¢–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        """
        logger.info("üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π BytesIO –±—É—Ñ–µ—Ä
        buffer = BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        with PdfPages(buffer) as pdf:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            plt.figure(figsize=(11, 8.5))
            plt.axis('off')
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            plt.text(0.5, 0.9, '–¢–ï–°–¢ –ü–û–î–î–ï–†–ñ–ö–ò –ö–ò–†–ò–õ–õ–ò–¶–´', 
                    fontsize=20, ha='center', fontweight='bold')
            
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            cyrillic_test_texts = [
                '–¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ - –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!',
                '–¢–µ—Å—Ç 2: –ê–ª—Ñ–∞–≤–∏—Ç - –ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø',
                '–¢–µ—Å—Ç 3: –°—Ç—Ä–æ—á–Ω—ã–µ - –∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è', 
                '–¢–µ—Å—Ç 4: –ß–∏—Å–ª–∞ –∏ —Å–∏–º–≤–æ–ª—ã - 1234567890 !@#$%^&*()',
                '–¢–µ—Å—Ç 5: –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - Analysis –ö–ü –¥–ª—è 2024 –≥–æ–¥–∞',
                '–¢–µ—Å—Ç 6: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - ‚ÇΩ ‚Ññ ¬ß ¬© ¬Æ ‚Ñ¢',
                '–¢–µ—Å—Ç 7: –ö–∞–≤—ã—á–∫–∏ - "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" –æ—Ç –û–û–û ¬´–¢–µ—Å—Ç–æ–≤–∞—è¬ª'
            ]
            
            y_pos = 0.75
            for i, test_text in enumerate(cyrillic_test_texts):
                plt.text(0.05, y_pos, test_text, fontsize=12, ha='left')
                y_pos -= 0.08
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            plt.text(0.5, 0.15, '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤—ã—à–µ,', 
                    fontsize=14, ha='center', color='green')
            plt.text(0.5, 0.1, '—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã —Ä–∞–±–æ—Ç–∞–µ—Ç –ü–†–ê–í–ò–õ–¨–ù–û!', 
                    fontsize=14, ha='center', color='green', fontweight='bold')
            plt.text(0.5, 0.05, '–ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã - –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞.', 
                    fontsize=12, ha='center', color='red')
            
            pdf.savefig()
            plt.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±—É—Ñ–µ—Ä –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        buffer.seek(0)
        logger.info("‚úÖ –¢–ï–°–¢: PDF —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return buffer


# Singleton instance
tender_pdf_exporter = TenderStylePDFExporter()