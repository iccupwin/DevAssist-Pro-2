"""
KP Analysis PDF Exporter - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –ö–ü –≤ PDF
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞
"""
import os
import io
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional, Union
from pathlib import Path

# ReportLab imports
from reportlab.lib.pagesizes import A4, letter
from reportlab.lib.units import inch, cm
from reportlab.lib.colors import HexColor, black, white, red, green, blue
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.platypus import Image as RLImage, Frame, PageTemplate
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics.widgetbase import Widget

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class KPAnalysisPDFExporter:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –ö–ü –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    """
    
    def __init__(self):
        # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ DevAssist Pro
        self.primary_color = HexColor('#2E75D6')      # –°–∏–Ω–∏–π
        self.accent_color = HexColor('#FF5F08')       # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        self.success_color = HexColor('#22c55e')      # –ó–µ–ª–µ–Ω—ã–π
        self.warning_color = HexColor('#f59e0b')      # –ñ–µ–ª—Ç—ã–π
        self.danger_color = HexColor('#ef4444')       # –ö—Ä–∞—Å–Ω—ã–π
        self.gray_light = HexColor('#f8f9fa')
        self.gray_medium = HexColor('#6c757d')
        self.gray_dark = HexColor('#343a40')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        self._setup_fonts()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self._setup_styles()
        
        # –õ–æ–≥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        logger.info(f"üéØ –ò–¢–û–ì–û–í–´–ô –®–†–ò–§–¢ –î–õ–Ø –ö–ò–†–ò–õ–õ–ò–¶–´: {self.font_family}")
    
    def _setup_fonts(self):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º DejaVu"""
        logger.info("üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã...")
        
        try:
            fonts_dir = Path(__file__).parent / "fonts"
            fonts_dir.mkdir(exist_ok=True)
            
            # –ü—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º DejaVu
            dejavu_regular = fonts_dir / "DejaVuSans.ttf"
            dejavu_bold = fonts_dir / "DejaVuSans-Bold.ttf"
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤
            self._download_dejavu_fonts(fonts_dir)
            
            fonts_registered = 0
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if dejavu_regular.exists() and dejavu_regular.stat().st_size > 50000:
                pdfmetrics.registerFont(TTFont('DejaVu', str(dejavu_regular)))
                logger.info("‚úÖ DejaVu Regular –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                fonts_registered += 1
            else:
                logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DejaVu Regular –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!")
            
            if dejavu_bold.exists() and dejavu_bold.stat().st_size > 50000:
                pdfmetrics.registerFont(TTFont('DejaVu-Bold', str(dejavu_bold)))
                logger.info("‚úÖ DejaVu Bold –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                fonts_registered += 1
                
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω DejaVu —à—Ä–∏—Ñ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º DejaVu
            if fonts_registered >= 1:
                try:
                    from reportlab.pdfbase.pdfmetrics import registerFontFamily
                    registerFontFamily(
                        'DejaVu',
                        normal='DejaVu' if dejavu_regular.exists() else 'Helvetica',
                        bold='DejaVu-Bold' if dejavu_bold.exists() else 'Helvetica-Bold',
                        italic='DejaVu' if dejavu_regular.exists() else 'Helvetica-Oblique',
                        boldItalic='DejaVu-Bold' if dejavu_bold.exists() else 'Helvetica-BoldOblique'
                    )
                    self.font_family = 'DejaVu'
                    logger.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–µ–º–µ–π—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤ DejaVu –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ–º–µ–π—Å—Ç–≤–∞ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
                    self.font_family = self._use_fallback_font()
            else:
                # DejaVu —à—Ä–∏—Ñ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                logger.warning("‚ö†Ô∏è DejaVu —à—Ä–∏—Ñ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                self.font_family = self._use_fallback_font()
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
            self.font_family = self._use_fallback_font()
    
    def _setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        self.styles = getSampleStyleSheet()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.styles.add(ParagraphStyle(
            name='MainTitle',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else 'Helvetica-Bold',
            fontSize=24,
            textColor=self.primary_color,
            alignment=TA_CENTER,
            spaceAfter=20
        ))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else 'Helvetica-Bold',
            fontSize=16,
            textColor=self.primary_color,
            spaceBefore=15,
            spaceAfter=10
        ))
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.styles.add(ParagraphStyle(
            name='SubHeader',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else 'Helvetica-Bold',
            fontSize=12,
            textColor=self.gray_dark,
            spaceBefore=10,
            spaceAfter=8
        ))
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='NormalText',
            fontName=self.font_family,
            fontSize=10,
            textColor=self.gray_dark,
            spaceAfter=6,
            alignment=TA_JUSTIFY
        ))
        
        # –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='HighlightText',
            fontName=f'{self.font_family}-Bold' if self.font_family != 'Helvetica' else 'Helvetica-Bold',
            fontSize=11,
            textColor=self.accent_color,
            spaceAfter=6
        ))
        
        # –ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç
        self.styles.add(ParagraphStyle(
            name='SmallText',
            fontName=self.font_family,
            fontSize=8,
            textColor=self.gray_medium,
            spaceAfter=4
        ))
    
    def generate_pdf(self, analysis_data: Dict[str, Any], output_path: Optional[str] = None) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
        
        Args:
            analysis_data: –î–∞–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            bytes: PDF –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        """
        logger.info("üéØ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –æ—Ç—á–µ—Ç–∞ –ö–ü –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è PDF
        buffer = io.BytesIO()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=2.5*cm,
            bottomMargin=2*cm,
            title="–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ö–ü",
            author="DevAssist Pro",
            subject="–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        )
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        story = []
        
        # –¢–∏—Ç—É–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        story.extend(self._create_title_page(analysis_data))
        story.append(PageBreak())
        
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ
        story.extend(self._create_executive_summary(analysis_data))
        story.append(PageBreak())
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        story.extend(self._create_detailed_sections(analysis_data))
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        story.extend(self._create_financial_section(analysis_data))
        story.append(PageBreak())
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        story.extend(self._create_recommendations(analysis_data))
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        story.extend(self._create_appendices(analysis_data))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        try:
            doc.build(story)
            logger.info("‚úÖ PDF –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
            raise
        
        # –ü–æ–ª—É—á–∞–µ–º PDF –∫–æ–Ω—Ç–µ–Ω—Ç
        pdf_content = buffer.getvalue()
        buffer.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        if output_path:
            with open(output_path, 'wb') as f:
                f.write(pdf_content)
            logger.info(f"üìÑ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        
        return pdf_content
    
    def _create_title_page(self, data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏—Ç—É–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        elements = []
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        elements.append(Spacer(1, 1*inch))
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        elements.append(Paragraph(
            "–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ì–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø",
            self.styles['MainTitle']
        ))
        elements.append(Spacer(1, 0.5*inch))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        tz_name = data.get('tz_name', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
        kp_name = data.get('kp_name', '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')
        company_name = data.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
        overall_score = data.get('overall_score', 0)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        title_data = [
            ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:', tz_name],
            ['–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', kp_name],
            ['–ö–æ–º–ø–∞–Ω–∏—è-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:', company_name],
            ['', ''],
            ['–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞:', datetime.now().strftime('%d.%m.%Y %H:%M')],
            ['–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:', f'{overall_score}/100 {self._get_score_status(overall_score)}'],
        ]
        
        title_table = Table(title_data, colWidths=[5*cm, 10*cm])
        title_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('TEXTCOLOR', (0, 0), (0, -1), self.primary_color),
            ('FONTNAME', (0, 0), (0, -1), f'{self.font_family}-Bold'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [white, self.gray_light]),
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        elements.append(title_table)
        elements.append(Spacer(1, 1*inch))
        
        # –°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        status_color = self._get_status_color(overall_score)
        status_text = self._get_score_status(overall_score)
        
        elements.append(Paragraph(
            f"<b>–°–¢–ê–¢–£–° –ê–ù–ê–õ–ò–ó–ê: {status_text}</b>",
            ParagraphStyle(
                name='StatusText',
                fontName=f'{self.font_family}-Bold',
                fontSize=14,
                textColor=status_color,
                alignment=TA_CENTER,
                spaceBefore=20
            )
        ))
        
        # Footer
        elements.append(Spacer(1, 2*inch))
        elements.append(Paragraph(
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            ParagraphStyle(
                name='Divider',
                fontName=self.font_family,
                fontSize=12,
                textColor=self.gray_medium,
                alignment=TA_CENTER
            )
        ))
        elements.append(Spacer(1, 0.3*inch))
        elements.append(Paragraph(
            "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: DevAssist Pro v2<br/>www.devassist.pro",
            ParagraphStyle(
                name='Footer',
                fontName=self.font_family,
                fontSize=10,
                textColor=self.gray_medium,
                alignment=TA_CENTER
            )
        ))
        
        return elements
    
    def _create_executive_summary(self, data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        elements = []
        
        elements.append(Paragraph("–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï", self.styles['MainTitle']))
        elements.append(Spacer(1, 0.3*inch))
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (—Å–∏—Å—Ç–µ–º–∞ 10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ Tender)
        elements.append(Paragraph("–û—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (–°–∏—Å—Ç–µ–º–∞ 10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤)", self.styles['SectionHeader']))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ business_analysis —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
        business_analysis = data.get('business_analysis', {})
        criteria_scores = business_analysis.get('criteria_scores', {})
        criteria_details = business_analysis.get('criteria_details', {})
        
        # –°–∏—Å—Ç–µ–º–∞ 10 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ Tender –ø—Ä–æ–µ–∫—Ç–∞
        criteria_mapping = {
            'technical_compliance': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
            'functional_completeness': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–Ω–æ—Ç–∞', 
            'cost_effectiveness': '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'timeline_realism': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤',
            'vendor_reliability': '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            'solution_quality': '–ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏—è',
            'innovation_approach': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ö–æ–¥–∞',
            'risk_management': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏',
            'support_maintenance': '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            'flexibility_adaptability': '–ì–∏–±–∫–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å'
        }
        
        sections_data = []
        sections_data.append(['–ö–†–ò–¢–ï–†–ò–ô', '–û–¶–ï–ù–ö–ê', '–í–ï–°', '–°–¢–ê–¢–£–°'])  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        
        for criteria_key, criteria_title in criteria_mapping.items():
            score = criteria_scores.get(criteria_key, 0)
            weight = criteria_details.get(criteria_key, {}).get('weight', 0)
            status = self._get_score_status(score)
            weight_str = f"{weight}%" if weight > 0 else "‚Äî"
            sections_data.append([criteria_title, f'{score}/100', weight_str, status])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        overall_score = business_analysis.get('overall_score', 0)
        sections_data.append(['', '', '', ''])  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        sections_data.append(['–û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê', f'{overall_score}/100', '100%', self._get_score_status(overall_score)])
        
        sections_table = Table(sections_data, colWidths=[6*cm, 2.5*cm, 2*cm, 4.5*cm])
        sections_table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ('FONTNAME', (0, 0), (-1, 0), f'{self.font_family}-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # –î–∞–Ω–Ω—ã–µ
            ('FONTNAME', (0, 1), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('ALIGN', (1, 1), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            
            # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.gray_light]),
            
            # –í—ã–¥–µ–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            ('FONTNAME', (0, -1), (-1, -1), f'{self.font_family}-Bold'),
            ('BACKGROUND', (0, -1), (-1, -1), self.accent_color),
            ('TEXTCOLOR', (0, -1), (-1, -1), white),
            
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        elements.append(sections_table)
        elements.append(Spacer(1, 0.4*inch))
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ business_analysis
        elements.append(Paragraph("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞", self.styles['SectionHeader']))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        cost_analysis = business_analysis.get('cost_analysis', {})
        timeline_analysis = business_analysis.get('timeline_analysis', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º summary –¥–∞–Ω–Ω—ã–µ –ö–ü
        company_name = data.get('company_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        tech_stack = data.get('tech_stack', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        pricing = data.get('pricing', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        timeline = data.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        financial_data = [
            ['–ö–æ–º–ø–∞–Ω–∏—è:', company_name],
            ['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:', tech_stack],
            ['–°—Ç–æ–∏–º–æ—Å—Ç—å:', pricing],
            ['–°—Ä–æ–∫–∏:', timeline],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        total_cost = cost_analysis.get('total_cost', 0)
        if total_cost > 0:
            competitiveness = cost_analysis.get('competitiveness', 'unknown')
            comp_text = {
                "competitive": "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è",
                "market_rate": "–†—ã–Ω–æ—á–Ω–∞—è", 
                "premium": "–ü—Ä–µ–º–∏—É–º",
                "unknown": "–¢—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"
            }
            financial_data.append(['–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:', comp_text.get(competitiveness, competitiveness)])
            
            cost_per_day = cost_analysis.get('cost_per_day', 0)
            if cost_per_day > 0:
                financial_data.append(['–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å:', f'{cost_per_day:,.0f} —Ä—É–±./–¥–µ–Ω—å'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–æ–≤
        proposed_timeline = timeline_analysis.get('proposed_timeline', 0)
        if proposed_timeline > 0:
            realism = timeline_analysis.get('realism_assessment', 'unknown')
            realism_text = {
                "realistic": "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ",
                "questionable": "–°–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ"
            }
            financial_data.append(['–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤:', realism_text.get(realism, '–¢—Ä–µ–±—É–µ—Ç –æ—Ü–µ–Ω–∫–∏')])
        
        financial_table = Table(financial_data, colWidths=[6*cm, 8*cm])
        financial_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), self.primary_color),
            ('FONTNAME', (0, 0), (0, -1), f'{self.font_family}-Bold'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [white, self.gray_light]),
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        elements.append(financial_table)
        elements.append(Spacer(1, 0.3*inch))
        
        # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ recommendations –∏ business_analysis
        elements.append(Paragraph("–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã", self.styles['SectionHeader']))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        recommendations = data.get('recommendations', [])
        identified_issues = business_analysis.get('identified_issues', [])
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
        positive_recs = [r for r in recommendations if r.get("type") == "positive"]
        warning_recs = [r for r in recommendations if r.get("type") in ["warning", "danger"]]
        
        if positive_recs:
            elements.append(Paragraph("‚úÖ <b>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</b>", self.styles['SubHeader']))
            for rec in positive_recs[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤
                title = rec.get('title', '')
                desc = rec.get('description', '')
                text = f"{title}: {desc}" if desc else title
                elements.append(Paragraph(f"‚Ä¢ {text}", self.styles['NormalText']))
        else:
            # Fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–æ–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            high_scoring_criteria = [(k, v) for k, v in criteria_scores.items() if v >= 80]
            if high_scoring_criteria:
                elements.append(Paragraph("‚úÖ <b>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</b>", self.styles['SubHeader']))
                criteria_names = {
                    'technical_compliance': '–í—ã—Å–æ–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
                    'functional_completeness': '–ü–æ–ª–Ω–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
                    'cost_effectiveness': '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    'vendor_reliability': '–ù–∞–¥–µ–∂–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'
                }
                for criteria, score in high_scoring_criteria[:3]:
                    name = criteria_names.get(criteria, criteria)
                    elements.append(Paragraph(f"‚Ä¢ {name} ({score}/100)", self.styles['NormalText']))
        
        if warning_recs or identified_issues:
            elements.append(Paragraph("‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>", self.styles['SubHeader']))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ recommendations
            for rec in warning_recs[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—É–Ω–∫—Ç–∞
                title = rec.get('title', '')
                desc = rec.get('description', '')
                text = f"{title}: {desc}" if desc else title
                elements.append(Paragraph(f"‚Ä¢ {text}", self.styles['NormalText']))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            for issue in identified_issues[:5-len(warning_recs)]:  # –í—Å–µ–≥–æ –º–∞–∫—Å–∏–º—É–º 5 –ø—É–Ω–∫—Ç–æ–≤
                elements.append(Paragraph(f"‚Ä¢ {issue}", self.styles['NormalText']))
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
        elements.append(Spacer(1, 0.3*inch))
        elements.append(Paragraph("–ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", self.styles['SectionHeader']))
        
        final_recommendation = data.get('final_recommendation', 'conditional_accept')
        executive_summary = data.get('executive_summary', '–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.')
        
        recommendation_text = self._format_recommendation(final_recommendation)
        
        elements.append(Paragraph(
            f"<b>{recommendation_text}</b>",
            ParagraphStyle(
                name='RecommendationTitle',
                fontName=f'{self.font_family}-Bold',
                fontSize=12,
                textColor=self._get_recommendation_color(final_recommendation),
                spaceBefore=10,
                spaceAfter=10
            )
        ))
        
        elements.append(Paragraph(executive_summary, self.styles['NormalText']))
        
        return elements
    
    def _create_detailed_sections(self, data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        elements = []
        
        elements.append(PageBreak())
        elements.append(Paragraph("–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –†–ê–ó–î–ï–õ–ê–ú", self.styles['MainTitle']))
        elements.append(Spacer(1, 0.3*inch))
        
        section_mapping = {
            'budget_compliance': '–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
            'timeline_compliance': '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏',
            'technical_compliance': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
            'team_expertise': '–ö–æ–º–∞–Ω–¥–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞',
            'functional_coverage': '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ',
            'security_quality': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ',
            'methodology_processes': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã',
            'scalability_support': '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            'communication_reporting': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å',
            'additional_value': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å'
        }
        
        for i, (section_key, section_title) in enumerate(section_mapping.items()):
            if i > 0 and i % 3 == 0:  # –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–∂–¥—ã–µ 3 —Ä–∞–∑–¥–µ–ª–∞
                elements.append(PageBreak())
            
            section_data = data.get(section_key, {})
            elements.extend(self._create_section_detail(section_title, section_data))
            elements.append(Spacer(1, 0.4*inch))
        
        return elements
    
    def _create_section_detail(self, title: str, section_data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞"""
        elements = []
        
        score = section_data.get('score', 0)
        description = section_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        key_findings = section_data.get('key_findings', [])
        recommendations = section_data.get('recommendations', [])
        risk_level = section_data.get('risk_level', 'medium')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞ —Å –æ—Ü–µ–Ω–∫–æ–π
        score_color = self._get_status_color(score)
        
        header_table = Table([
            [title, f'{score}/100', self._get_score_status(score)]
        ], colWidths=[10*cm, 2*cm, 3*cm])
        
        header_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), f'{self.font_family}-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 12),
            ('BACKGROUND', (0, 0), (-1, -1), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, -1), white),
            ('ALIGN', (1, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('GRID', (0, 0), (-1, -1), 1, self.primary_color),
        ]))
        
        elements.append(header_table)
        elements.append(Spacer(1, 0.2*inch))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        elements.append(Paragraph(description, self.styles['NormalText']))
        elements.append(Spacer(1, 0.15*inch))
        
        # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        if key_findings or recommendations:
            table_data = []
            max_rows = max(len(key_findings), len(recommendations))
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            table_data.append(['üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏', 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'])
            
            # –î–∞–Ω–Ω—ã–µ
            for i in range(max_rows):
                finding = key_findings[i] if i < len(key_findings) else ''
                recommendation = recommendations[i] if i < len(recommendations) else ''
                table_data.append([
                    f'‚Ä¢ {finding}' if finding else '',
                    f'‚Ä¢ {recommendation}' if recommendation else ''
                ])
            
            detail_table = Table(table_data, colWidths=[7.5*cm, 7.5*cm])
            detail_table.setStyle(TableStyle([
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                ('FONTNAME', (0, 0), (-1, 0), f'{self.font_family}-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 11),
                ('BACKGROUND', (0, 0), (-1, 0), self.gray_light),
                ('TEXTCOLOR', (0, 0), (-1, 0), self.gray_dark),
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
                
                # –î–∞–Ω–Ω—ã–µ
                ('FONTNAME', (0, 1), (-1, -1), self.font_family),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                ('LEFTPADDING', (0, 1), (-1, -1), 5),
                ('RIGHTPADDING', (0, 1), (-1, -1), 5),
                ('TOPPADDING', (0, 1), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 1), (-1, -1), 8),
                
                ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
            ]))
            
            elements.append(detail_table)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞
        risk_colors = {
            'low': self.success_color,
            'medium': self.warning_color,
            'high': self.danger_color
        }
        risk_labels = {
            'low': '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫',
            'medium': '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫',
            'high': '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫'
        }
        
        risk_color = risk_colors.get(risk_level, self.warning_color)
        risk_label = risk_labels.get(risk_level, '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫')
        
        elements.append(Spacer(1, 0.1*inch))
        elements.append(Paragraph(
            f"üéØ <b>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_label}</b>",
            ParagraphStyle(
                name='RiskLevel',
                fontName=f'{self.font_family}-Bold',
                fontSize=10,
                textColor=risk_color,
                alignment=TA_RIGHT
            )
        ))
        
        return elements
    
    def _create_financial_section(self, data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        elements = []
        
        elements.append(Paragraph("–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó", self.styles['MainTitle']))
        elements.append(Spacer(1, 0.3*inch))
        
        # –í–∞–ª—é—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        primary_currency = data.get('primary_currency', {})
        currencies_detected = data.get('currencies_detected', [])
        
        currency_data = [
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ']
        ]
        
        if primary_currency:
            currency_data.append([
                '–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞',
                f"{primary_currency.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({primary_currency.get('symbol', '?')})"
            ])
        
        currency_data.append(['–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∞–ª—é—Ç', str(len(currencies_detected))])
        
        if currencies_detected:
            currency_list = ', '.join([
                f"{curr.get('symbol', '?')} ({curr.get('code', 'N/A')})" 
                for curr in currencies_detected[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –≤–∞–ª—é—Ç
            ])
            currency_data.append(['–°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç', currency_list])
        
        currency_table = Table(currency_data, colWidths=[6*cm, 9*cm])
        currency_table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ('FONTNAME', (0, 0), (-1, 0), f'{self.font_family}-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # –î–∞–Ω–Ω—ã–µ
            ('FONTNAME', (0, 1), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('TEXTCOLOR', (0, 1), (0, -1), self.primary_color),
            ('FONTNAME', (0, 1), (0, -1), f'{self.font_family}-Bold'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.gray_light]),
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        elements.append(currency_table)
        elements.append(Spacer(1, 0.4*inch))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
        model_used = data.get('model_used', 'claude-3-5-sonnet-20241022')
        confidence_level = data.get('confidence_level', 85)
        analysis_duration = data.get('analysis_duration', 30)
        
        analysis_info = [
            ['–ü–∞—Ä–∞–º–µ—Ç—Ä –∞–Ω–∞–ª–∏–∑–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            ['AI –ú–æ–¥–µ–ª—å', model_used],
            ['–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', f'{confidence_level}%'],
            ['–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞', f'{analysis_duration} —Å–µ–∫—É–Ω–¥'],
            ['–í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞', data.get('analysis_version', '2.0')]
        ]
        
        info_table = Table(analysis_info, colWidths=[6*cm, 9*cm])
        info_table.setStyle(TableStyle([
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ('FONTNAME', (0, 0), (-1, 0), f'{self.font_family}-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BACKGROUND', (0, 0), (-1, 0), self.accent_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            
            # –î–∞–Ω–Ω—ã–µ
            ('FONTNAME', (0, 1), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('TEXTCOLOR', (0, 1), (0, -1), self.accent_color),
            ('FONTNAME', (0, 1), (0, -1), f'{self.font_family}-Bold'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [white, self.gray_light]),
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        elements.append(info_table)
        
        return elements
    
    def _create_recommendations(self, data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        elements = []
        
        elements.append(Paragraph("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò", self.styles['MainTitle']))
        elements.append(Spacer(1, 0.3*inch))
        
        # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
        next_steps = data.get('next_steps', [])
        if next_steps:
            elements.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:", self.styles['SectionHeader']))
            
            for i, step in enumerate(next_steps, 1):
                elements.append(Paragraph(
                    f"{i}. {step}",
                    ParagraphStyle(
                        name='StepText',
                        fontName=self.font_family,
                        fontSize=11,
                        textColor=self.gray_dark,
                        spaceBefore=5,
                        spaceAfter=5,
                        leftIndent=20
                    )
                ))
        
        elements.append(Spacer(1, 0.3*inch))
        
        # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        final_recommendation = data.get('final_recommendation', 'conditional_accept')
        executive_summary = data.get('executive_summary', '')
        
        elements.append(Paragraph("–ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞:", self.styles['SectionHeader']))
        
        recommendation_text = self._format_recommendation(final_recommendation)
        recommendation_color = self._get_recommendation_color(final_recommendation)
        
        elements.append(Paragraph(
            f"<b>{recommendation_text}</b>",
            ParagraphStyle(
                name='FinalRecommendation',
                fontName=f'{self.font_family}-Bold',
                fontSize=14,
                textColor=recommendation_color,
                spaceBefore=15,
                spaceAfter=15,
                alignment=TA_CENTER
            )
        ))
        
        if executive_summary:
            elements.append(Paragraph(executive_summary, self.styles['NormalText']))
        
        return elements
    
    def _create_appendices(self, data: Dict[str, Any]) -> List[Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        elements = []
        
        elements.append(PageBreak())
        elements.append(Paragraph("–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø", self.styles['MainTitle']))
        elements.append(Spacer(1, 0.3*inch))
        
        # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞
        elements.append(Paragraph("–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞", self.styles['SectionHeader']))
        elements.append(Paragraph(
            "–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ "
            f"Claude 3.5 Sonnet –∏ —Å–∏—Å—Ç–µ–º—ã DevAssist Pro v2. –ê–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç 10 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: "
            "–±—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –∫–æ–º–∞–Ω–¥–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞, "
            "—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã, "
            "–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å.",
            self.styles['NormalText']
        ))
        
        elements.append(Spacer(1, 0.2*inch))
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        elements.append(Paragraph("–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", self.styles['SectionHeader']))
        
        contact_data = [
            ['DevAssist Pro', '–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'],
            ['–í–µ–±-—Å–∞–π—Ç', 'www.devassist.pro'],
            ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support@devassist.pro'],
            ['–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞', datetime.now().strftime('%d.%m.%Y %H:%M:%S')],
        ]
        
        contact_table = Table(contact_data, colWidths=[4*cm, 11*cm])
        contact_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), self.font_family),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), self.primary_color),
            ('FONTNAME', (0, 0), (0, -1), f'{self.font_family}-Bold'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ROWBACKGROUNDS', (0, 0), (-1, -1), [white, self.gray_light]),
            ('GRID', (0, 0), (-1, -1), 1, self.gray_medium),
        ]))
        
        elements.append(contact_table)
        
        return elements
    
    def _get_score_status(self, score: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –±–∞–ª–ª–∞–º"""
        if score >= 85:
            return "‚úÖ –û—Ç–ª–∏—á–Ω–æ"
        elif score >= 70:
            return "‚úÖ –•–æ—Ä–æ—à–æ"
        elif score >= 55:
            return "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ"
        elif score >= 40:
            return "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        else:
            return "‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ"
    
    def _get_status_color(self, score: int) -> HexColor:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –±–∞–ª–ª–∞–º"""
        if score >= 85:
            return self.success_color
        elif score >= 70:
            return self.success_color
        elif score >= 55:
            return self.warning_color
        elif score >= 40:
            return self.warning_color
        else:
            return self.danger_color
    
    def _format_recommendation(self, recommendation: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendation_map = {
            'accept': '‚úÖ –†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –ö –ü–†–ò–ù–Ø–¢–ò–Æ',
            'conditional_accept': '‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –° –û–ì–û–í–û–†–ö–ê–ú–ò',
            'reject': '‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï',
            'needs_revision': 'üîÑ –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'
        }
        return recommendation_map.get(recommendation, '‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –ê–ù–ê–õ–ò–ó–ê')
    
    def _get_recommendation_color(self, recommendation: str) -> HexColor:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        color_map = {
            'accept': self.success_color,
            'conditional_accept': self.warning_color,
            'reject': self.danger_color,
            'needs_revision': self.accent_color
        }
        return color_map.get(recommendation, self.warning_color)

    def format_currency(self, amount: Union[float, int], currency_code: str = 'RUB') -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        if amount == 0 or amount is None:
            return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        formatted_amount = f"{amount:,.0f}".replace(',', ' ')
        
        # –í–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        currency_formats = {
            'RUB': f"{formatted_amount} ‚ÇΩ",
            'USD': f"${formatted_amount}",
            'EUR': f"‚Ç¨{formatted_amount}",
            'KZT': f"{formatted_amount} ‚Ç∏",
            'UAH': f"{formatted_amount} ‚Ç¥",
            'BYN': f"{formatted_amount} Br",
            'KGS': f"{formatted_amount} —Å–æ–º"
        }
        
        return currency_formats.get(currency_code, f"{formatted_amount} {currency_code}")


    def _download_dejavu_fonts(self, fonts_dir: Path):
        """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ DejaVu —à—Ä–∏—Ñ—Ç–æ–≤"""
        logger.info("üì• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∫–∞—á–∏–≤–∞–µ–º DejaVu —à—Ä–∏—Ñ—Ç—ã...")
        
        # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è DejaVu —à—Ä–∏—Ñ—Ç–æ–≤
        dejavu_urls = {
            "DejaVuSans.ttf": "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf",
            "DejaVuSans-Bold.ttf": "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans-Bold.ttf"
        }
        
        import urllib.request
        
        for font_file, url in dejavu_urls.items():
            font_path = fonts_dir / font_file
            
            if font_path.exists() and font_path.stat().st_size > 50000:
                logger.info(f"‚úÖ –®—Ä–∏—Ñ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {font_file}")
                continue
                
            try:
                logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º: {font_file}")
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                request = urllib.request.Request(url, headers={
                    'User-Agent': 'DevAssist-Pro-PDF-Exporter/2.0'
                })
                
                with urllib.request.urlopen(request, timeout=30) as response:
                    font_data = response.read()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                with open(font_path, 'wb') as f:
                    f.write(font_data)
                
                if font_path.exists() and font_path.stat().st_size > 50000:
                    logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û —Å–∫–∞—á–∞–Ω: {font_file} ({font_path.stat().st_size} –±–∞–π—Ç)")
                else:
                    logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {font_file}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {font_file}: {e}")
    
    def _use_fallback_font(self) -> str:
        """Fallback —à—Ä–∏—Ñ—Ç –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –∫–æ–≥–¥–∞ DejaVu –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        logger.warning("‚ö†Ô∏è –ò–°–ü–û–õ–¨–ó–£–ï–ú FALLBACK –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã...")
        
        try:
            import platform
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
            if platform.system() == "Windows":
                try:
                    # Windows - Arial
                    pdfmetrics.registerFont(TTFont('SystemCyrillic', 'C:/Windows/Fonts/arial.ttf'))
                    logger.info("‚úÖ Windows Arial –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã")
                    return 'SystemCyrillic'
                except:
                    pass
                    
            elif platform.system() == "Linux":
                # Linux - Liberation Sans –∏–ª–∏ DejaVu
                linux_fonts = [
                    '/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf',
                    '/usr/share/fonts/TTF/DejaVuSans.ttf',
                    '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf'
                ]
                
                for font_path in linux_fonts:
                    if Path(font_path).exists():
                        try:
                            pdfmetrics.registerFont(TTFont('SystemCyrillic', font_path))
                            logger.info(f"‚úÖ Linux —à—Ä–∏—Ñ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {font_path}")
                            return 'SystemCyrillic'
                        except:
                            continue
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - Helvetica —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Helvetica, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return 'Helvetica'
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback: {e}")
            return 'Helvetica'


# Singleton instance
kp_pdf_exporter = KPAnalysisPDFExporter()