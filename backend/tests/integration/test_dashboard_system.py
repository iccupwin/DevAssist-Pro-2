#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã Dashboard —Å–∏—Å—Ç–µ–º—ã DevAssist Pro
–°–æ–≥–ª–∞—Å–Ω–æ –¢–ó –≠—Ç–∞–ø 3: –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª
"""
import asyncio
import httpx
import json
from typing import Dict, Any, Optional

class DashboardSystemTest:
    def __init__(self, base_url: str = "http://localhost:8006", gateway_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.gateway_url = gateway_url
        self.access_token: Optional[str] = None

    async def setup_auth(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = {
                "email": "dashboard_test@devassist.pro",
                "password": "TestPassword123!",
                "full_name": "Dashboard Test User",
                "company": "DevAssist Pro"
            }

            async with httpx.AsyncClient(timeout=10.0) as client:
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                register_response = await client.post(
                    f"{self.gateway_url}/api/auth/register",
                    json=test_user
                )
                
                # –í—Ö–æ–¥
                login_data = {
                    "email": test_user["email"],
                    "password": test_user["password"]
                }
                
                login_response = await client.post(
                    f"{self.gateway_url}/api/auth/login",
                    json=login_data
                )
                
                if login_response.status_code == 200:
                    self.access_token = login_response.json().get("access_token")
                    return True
                    
                return False
                
        except Exception as e:
            print(f"Auth setup error: {e}")
            return False

    async def test_dashboard_service_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç health check Dashboard Service"""
        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.get(f"{self.base_url}/health")
                return {
                    "status": "‚úÖ OK" if response.status_code == 200 else "‚ùå FAIL",
                    "response_code": response.status_code,
                    "response_time": f"{response.elapsed.total_seconds():.2f}s"
                }
        except Exception as e:
            return {
                "status": "‚ùå FAIL",
                "error": str(e)
            }

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Dashboard —Å–∏—Å—Ç–µ–º—ã"""
        print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Dashboard —Å–∏—Å—Ç–µ–º—ã DevAssist Pro...")
        
        health_result = await self.test_dashboard_service_health()
        print(f"Health check: {health_result['status']}")

async def main():
    test = DashboardSystemTest()
    await test.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())