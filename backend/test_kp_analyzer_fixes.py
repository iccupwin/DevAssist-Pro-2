#!/usr/bin/env python3
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö endpoint'–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ —Å–±–æ—è
"""
import requests
import json
import sys

def test_health():
    """–¢–µ—Å—Ç health endpoint"""
    try:
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...")
        response = requests.get("http://127.0.0.1:8000/health", timeout=5)
        print(f"‚úÖ Health Status: {response.status_code}")
        print(f"   Response: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå Health endpoint failed: {e}")
        return False

def test_llm_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ LLM endpoint /api/llm/analyze"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/llm/analyze...")
        
        test_data = {
            "prompt": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã AI —Å–µ—Ä–≤–∏—Å–∞",
            "max_tokens": 100,
            "temperature": 0.1,
            "model": "claude-3-5-sonnet-20241022"
        }
        
        response = requests.post(
            "http://127.0.0.1:8000/api/llm/analyze",
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"‚úÖ LLM Analyze Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Content: {result.get('content', 'No content')[:100]}...")
            return True
        else:
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå LLM analyze endpoint failed: {e}")
        return False

def test_llm_detailed():
    """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ endpoint /api/llm/analyze-detailed"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ù–û–í–´–ô /api/llm/analyze-detailed (–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)...")
        
        test_data = {
            "tz_content": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–æ–∑–¥–∞—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            "kp_content": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ö–æ–º–ø–∞–Ω–∏—è –¢–µ—Ö–°–æ—Ñ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞ 1,000,000 —Ä—É–±–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–µ—Å—è—Ü–µ–≤.",
            "model": "claude-3-5-sonnet-20241022"
        }
        
        response = requests.post(
            "http://127.0.0.1:8000/api/llm/analyze-detailed",
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"‚úÖ LLM Analyze-Detailed Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Success: {result.get('success', False)}")
            print(f"   Analysis ID: {result.get('analysis_id', 'No ID')}")
            print(f"   Fallback Mode: {result.get('fallback_mode', False)}")
            if result.get('detailed_analysis'):
                print(f"   Overall Score: {result['detailed_analysis'].get('overall_score', 'N/A')}")
            return True
        else:
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå LLM analyze-detailed test failed: {e}")
        return False

def test_v3_kp_analyzer():
    """–¢–µ—Å—Ç V3 API endpoint /api/v3/kp-analyzer/analyze"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º /api/v3/kp-analyzer/analyze...")
        
        test_data = {
            "tz_document_id": 1,
            "kp_document_ids": [2],
            "analysis_config": {
                "model": "claude-3-5-sonnet-20241022",
                "criteria_weights": {
                    "budget_compliance": 15,
                    "timeline_compliance": 15,
                    "technical_compliance": 20,
                    "team_expertise": 15,
                    "functional_coverage": 10,
                    "security_quality": 10,
                    "methodology_processes": 5,
                    "scalability_support": 5,
                    "communication_reporting": 3,
                    "additional_value": 2
                }
            }
        }
        
        response = requests.post(
            "http://127.0.0.1:8000/api/v3/kp-analyzer/analyze",
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=30
        )
        
        print(f"‚úÖ V3 KP Analyzer Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Success: {result.get('success', False)}")
            print(f"   Analysis ID: {result.get('analysis_id', 'No ID')}")
            return True
        else:
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå V3 KP analyzer endpoint failed: {e}")
        return False

def test_document_upload():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = "–¢–µ—Å—Ç–æ–≤–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã."
        files = {"file": ("test_tz.txt", test_content, "text/plain")}
        
        response = requests.post(
            "http://127.0.0.1:8000/api/documents/upload",
            files=files,
            timeout=15
        )
        
        print(f"‚úÖ Document Upload Status: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Document ID: {result.get('document_id', 'No ID')}")
            return True
        else:
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Document upload failed: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("=" * 60)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–ü –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê - –ü–û–ò–°–ö –¢–û–ß–ö–ò –°–ë–û–Ø")
    print("=" * 60)
    
    tests = [
        ("Health Check", test_health),
        ("Document Upload", test_document_upload),
        ("LLM Basic Analyze", test_llm_basic),
        ("LLM Detailed (FIXED)", test_llm_detailed),
        ("V3 KP Analyzer", test_v3_kp_analyzer),
    ]
    
    results = {}
    for test_name, test_func in tests:
        print(f"\n{'‚îÄ' * 50}")
        print(f"üß™ –¢–ï–°–¢: {test_name}")
        print(f"{'‚îÄ' * 50}")
        results[test_name] = test_func()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 60)
    
    for test_name, passed in results.items():
        status = "‚úÖ PASS" if passed else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if not results.get("Health Check"):
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    elif not results.get("LLM Basic Analyze"):
        print("\nüö® –ü–†–û–ë–õ–ï–ú–ê: LLM —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (ANTHROPIC_API_KEY?)")
    elif results.get("LLM Detailed (404 Expected)"):
        print("\n‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: /api/llm/analyze-detailed –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
        print("   Frontend –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint!")
    
    if results.get("V3 KP Analyzer"):
        print("\nüí° –†–ï–®–ï–ù–ò–ï: –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å V3 API –≤–º–µ—Å—Ç–æ analyze-detailed")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()