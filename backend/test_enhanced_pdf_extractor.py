#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import os
import sys
from pathlib import Path
import logging

# Add backend to path
sys.path.append(str(Path(__file__).parent))

from services.documents.core.enhanced_pdf_extractor import EnhancedPDFExtractor, extract_pdf_data

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_pdf_extractor():
    """Test the enhanced PDF extractor with sample data"""
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞")
    print("=" * 50)
    
    # Create sample PDF content for testing (mock data)
    sample_pdf_content = create_sample_pdf_content()
    
    try:
        # Test the extractor
        extractor = EnhancedPDFExtractor()
        
        result = await extractor.extract_comprehensive_data(
            sample_pdf_content, 
            "test_commercial_proposal.pdf"
        )
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
        print(f"‚úÖ –§–∞–π–ª: {result['filename']}")
        print(f"‚úÖ –ú–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {', '.join(result['extraction_methods'])}")
        print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(result['tables'])}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–æ–≤: {len(result['budgets'])}")
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç: {len(result['currencies'])}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ: {result['metadata']['extraction_success']}")
        print(f"‚úÖ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['metadata']['processing_time']:.2f}—Å")
        
        # Show budgets found
        if result['budgets']:
            print("\nüí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã:")
            for i, budget in enumerate(result['budgets'][:5], 1):  # Show top 5
                print(f"  {i}. {budget['formatted']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {budget['confidence']:.1f})")
                if budget.get('context'):
                    context_preview = budget['context'][:100].replace('\n', ' ')
                    print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_preview}...")
        
        # Show tables found
        if result['tables']:
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for i, table in enumerate(result['tables'][:3], 1):  # Show top 3
                print(f"  {i}. –ò—Å—Ç–æ—á–Ω–∏–∫: {table['source']}, –†–∞–∑–º–µ—Ä: {table['row_count']}x{table['col_count']}")
                if table.get('has_numbers'):
                    print(f"     –°–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞: ‚úÖ")
        
        # Show structured data
        if result['structured_data']:
            print(f"\nüìà –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            struct = result['structured_data']
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ –±—é–¥–∂–µ—Ç–æ–≤: {struct.get('total_budgets', 0)}")
            print(f"  ‚Ä¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {len(struct.get('high_confidence_budgets', []))}")
            print(f"  ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã: {'‚úÖ' if struct.get('has_structured_pricing') else '‚ùå'}")
            
            if struct.get('currency_breakdown'):
                print("  ‚Ä¢ –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –≤–∞–ª—é—Ç–∞–º:")
                for curr, data in struct['currency_breakdown'].items():
                    print(f"    - {curr}: {data['count']} –∑–∞–ø–∏—Å–µ–π, —Å—É–º–º–∞: {data['total_amount']:,.2f}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_sample_pdf_content() -> bytes:
    """Create sample PDF content for testing"""
    
    # This would normally be actual PDF bytes
    # For testing, we'll simulate what PDF content might look like
    sample_text = """
    –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
    
    –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ "–°–æ–ª–Ω–µ—á–Ω—ã–µ –•–æ–ª–º—ã"
    
    –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
    - –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: 15,000 –º¬≤
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä: 120 –µ–¥–∏–Ω–∏—Ü
    - –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 24 –º–µ—Å—è—Ü–∞
    - –ë—é–¥–∂–µ—Ç –¢–ó: 150,000,000 —Ä—É–±–ª–µ–π
    
    –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
    - –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç: 145 500 000,00 ‚ÇΩ
    - –ù–î–° 20%: 29 100 000,00 ‚ÇΩ
    - –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: 174 600 000 —Ä—É–±–ª–µ–π
    
    –°–ú–ï–¢–ê –†–ê–°–•–û–î–û–í:
    | –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç       | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞ –∑–∞ –µ–¥. | –°—É–º–º–∞      |
    |--------------------------|------------|-------------|------------|
    | –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã          | 1000 –º¬≥    | 2 500 ‚ÇΩ     | 2 500 000  |
    | –§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã      | 500 –º¬≥     | 15 000 ‚ÇΩ    | 7 500 000  |
    | –°—Ç–µ–Ω–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏     | 800 –º¬≤     | 8 500 ‚ÇΩ     | 6 800 000  |
    | –ö—Ä–æ–≤–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã        | 1200 –º¬≤    | 3 200 ‚ÇΩ     | 3 840 000  |
    
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê:
    –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $1,850,000 USD
    
    –û–ø–ª–∞—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –≤ —Ç–µ–Ω–≥–µ:
    –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: 850 000 000 —Ç–µ–Ω–≥–µ
    """
    
    # For actual testing, this would be real PDF bytes
    # Here we return the text as bytes for simulation
    return sample_text.encode('utf-8')

async def test_number_parsing():
    """Test number parsing capabilities"""
    
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª:")
    print("=" * 30)
    
    extractor = EnhancedPDFExtractor()
    
    test_numbers = [
        "1 000 000,50",      # Russian format
        "1,000,000.50",      # US format  
        "1.000.000,50",      # European format
        "1000000",           # Simple format
        "2 500 000 ‚ÇΩ",       # With currency
        "$1,850,000",        # Dollar format
        "150,000,000 —Ä—É–±–ª–µ–π", # Russian with text
    ]
    
    for number_str in test_numbers:
        parsed = extractor._parse_number(number_str)
        print(f"  '{number_str}' -> {parsed:,.2f}" if parsed else f"  '{number_str}' -> FAILED")

async def test_currency_extraction():
    """Test currency extraction"""
    
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∞–ª—é—Ç:")
    print("=" * 35)
    
    extractor = EnhancedPDFExtractor()
    
    test_text = """
    –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: 25 000 000 —Ä—É–±–ª–µ–π
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: $350,000
    –í –µ–≤—Ä–æ —ç—Ç–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ‚Ç¨320,000
    –û–ø–ª–∞—Ç–∞ –≤ —Ç–µ–Ω–≥–µ: 185 000 000 KZT
    –ò–ª–∏ –≤ —Å–æ–º–∞—Ö: 3 500 000 —Å–æ–º
    """
    
    currencies = extractor._extract_currencies(test_text)
    
    print(f"  –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç: {len(currencies)}")
    for curr in currencies:
        print(f"  ‚Ä¢ {curr['formatted']} –≤ –ø–æ–∑–∏—Ü–∏–∏ {curr['position']}")

async def main():
    """Main test function"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ PDF —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞")
    
    success = await test_pdf_extractor()
    await test_number_parsing()
    await test_currency_extraction()
    
    if success:
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞:")
        print("  ‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (PyMuPDF, pdfplumber, camelot, OCR)")
        print("  ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π")
        print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
        print("  ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 5+ –≤–∞–ª—é—Ç (RUB, USD, EUR, KZT, KGS)")
        print("  ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        print("  ‚Ä¢ OCR –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return 0
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)