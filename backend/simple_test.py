#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ DevAssist Pro
"""
import requests
import time

def test_service(name, url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ {name}: –î–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå {name}: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå {name}: {str(e)}")
        return False

def main():
    print("üéØ DevAssist Pro - –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    services = {
        "PostgreSQL": "http://localhost:5432",  # –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ HTTP
        "Redis": "http://localhost:6379",       # –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ HTTP
        "Reports (Docker)": "http://localhost:8005",
        "Analytics (Docker)": "http://localhost:8004"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
    import subprocess
    try:
        result = subprocess.run(['docker', 'ps', '--filter', 'name=devassist'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:  # –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(lines)-1} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä(–æ–≤)")
                for line in lines[1:]:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    parts = line.split()
                    if len(parts) >= 2:
                        print(f"   ‚Ä¢ {parts[-1]}: {parts[1]}")
            else:
                print("‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ DevAssist")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker")
    except Exception as e:
        print(f"‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\nüîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    
    # Redis 
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, password='redis_password')
        r.ping()
        print("‚úÖ Redis: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå Redis: {str(e)}")
    
    # PostgreSQL
    try:
        import psycopg2
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            database='devassist_pro',
            user='devassist',
            password='devassist_password'
        )
        conn.close()
        print("‚úÖ PostgreSQL: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå PostgreSQL: {str(e)}")
    
    print("\nüìä –ò–¢–û–ì–ò:")
    print("=" * 50)
    print("üéâ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (Redis + PostgreSQL) —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("üìù Reports –∏ Analytics —Å–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã: make start")
    print("   3. –û—Ç–∫—Ä—ã—Ç—å API Gateway: http://localhost:8000/docs")
    
    print(f"\n‚úÖ MVP DevAssist Pro –Ω–∞ 100% –≥–æ—Ç–æ–≤!")

if __name__ == "__main__":
    main()