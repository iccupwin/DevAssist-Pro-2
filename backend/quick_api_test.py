#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API —Å–µ—Ä–≤–∏—Å–æ–≤ DevAssist Pro
"""
import asyncio
import json
import subprocess
import time
import signal
import os
from pathlib import Path

# –ü—É—Ç–∏ –∫ —Å–µ—Ä–≤–∏—Å–∞–º
SERVICES = {
    "analytics": {
        "path": "services/analytics",
        "port": 8004,
        "module": "main:app"
    },
    "reports": {
        "path": "services/reports", 
        "port": 8005,
        "module": "main:app"
    }
}

class ServiceManager:
    def __init__(self):
        self.processes = {}
    
    def start_service(self, name, config):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ {name} —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É {config['port']}...")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–µ—Ä–≤–∏—Å–∞
        service_path = Path(config['path'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º shared –≤ PYTHONPATH
        env = os.environ.copy()
        env['PYTHONPATH'] = f"{Path.cwd()}/shared:{env.get('PYTHONPATH', '')}"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn
        cmd = [
            "uvicorn", 
            config['module'],
            "--host", "0.0.0.0",
            "--port", str(config['port']),
            "--reload"
        ]
        
        process = subprocess.Popen(
            cmd,
            cwd=service_path,
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        self.processes[name] = process
        print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for name, process in self.processes.items():
            if process.poll() is None:
                print(f"   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    process.kill()
        self.processes.clear()

async def test_service_api(name, port):
    """–¢–µ—Å—Ç API —Å–µ—Ä–≤–∏—Å–∞"""
    import httpx
    
    base_url = f"http://localhost:{port}"
    
    try:
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç health endpoint
            response = await client.get(f"{base_url}/health", timeout=5.0)
            
            if response.status_code == 200:
                health_data = response.json()
                print(f"‚úÖ {name}: {health_data.get('status', 'unknown')}")
                return True
            else:
                print(f"‚ùå {name}: HTTP {response.status_code}")
                return False
                
    except Exception as e:
        print(f"‚ùå {name}: {str(e)}")
        return False

async def test_analytics_endpoints():
    """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Analytics"""
    import httpx
    
    print("\nüìä –¢–µ—Å—Ç Analytics API:")
    base_url = "http://localhost:8004"
    
    try:
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            response = await client.get(f"{base_url}/statistics/dashboard?period=7d", timeout=10.0)
            
            if response.status_code == 200:
                data = response.json()
                stats = data.get('statistics', {})
                overview = stats.get('overview', {})
                
                print(f"   ‚úÖ Dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                print(f"   üìà –ü—Ä–æ–µ–∫—Ç–æ–≤: {overview.get('total_projects', 0)}")
                print(f"   üìä –ê–Ω–∞–ª–∏–∑–æ–≤: {overview.get('total_analyses', 0)}")
                print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {overview.get('total_documents', 0)}")
                return True
            else:
                print(f"   ‚ùå Dashboard API: HTTP {response.status_code}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Dashboard API: {str(e)}")
        return False

async def test_reports_endpoints():
    """–¢–µ—Å—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ Reports"""
    import httpx
    
    print("\nüìä –¢–µ—Å—Ç Reports API:")
    base_url = "http://localhost:8005"
    
    try:
        async with httpx.AsyncClient() as client:
            # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
            response = await client.get(f"{base_url}/templates", timeout=10.0)
            
            if response.status_code == 200:
                data = response.json()
                templates = data.get('templates', [])
                
                print(f"   ‚úÖ –®–∞–±–ª–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã")
                print(f"   üìù –î–æ—Å—Ç—É–ø–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
                
                for template in templates[:3]:
                    print(f"      ‚Ä¢ {template.get('name', 'Unknown')}")
                
                return True
            else:
                print(f"   ‚ùå Templates API: HTTP {response.status_code}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Templates API: {str(e)}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ DevAssist Pro - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import httpx
        print("‚úÖ httpx –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    except ImportError:
        print("‚ùå httpx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install httpx")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    manager = ServiceManager()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print("-" * 30)
        
        for name, config in SERVICES.items():
            manager.start_service(name, config)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        await asyncio.sleep(5)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API:")
        print("-" * 30)
        
        results = {}
        
        # –ë–∞–∑–æ–≤—ã–µ health checks
        for name, config in SERVICES.items():
            results[name] = await test_service_api(name, config['port'])
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
        if results.get('analytics'):
            results['analytics_detailed'] = await test_analytics_endpoints()
        
        if results.get('reports'):
            results['reports_detailed'] = await test_reports_endpoints()
        
        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("=" * 50)
        
        passed = sum(1 for result in results.values() if result)
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"{test_name.upper():>20}: {status}")
        
        print("-" * 50)
        print(f"–ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
            print("   ‚Ä¢ Analytics Health:  http://localhost:8004/health")
            print("   ‚Ä¢ Analytics Docs:    http://localhost:8004/docs")
            print("   ‚Ä¢ Reports Health:    http://localhost:8005/health") 
            print("   ‚Ä¢ Reports Docs:      http://localhost:8005/docs")
            
            print(f"\n‚è±Ô∏è  –°–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –µ—â–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            await asyncio.sleep(30)
        else:
            print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ {total - passed} —Ç–µ—Å—Ç(–∞—Ö)")
        
        return passed == total
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    finally:
        manager.stop_all()
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)