#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PDF Export API Endpoint –¥–ª—è DevAssist Pro
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
"""

from fastapi import APIRouter, HTTPException, Depends
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel, Field
from typing import Dict, List, Any, Optional
import logging
import tempfile
import os
from datetime import datetime

# –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
try:
    from services.reports.core.professional_kp_pdf_generator import ProfessionalKPPDFGenerator
    from services.reports.core.advanced_chart_generator import AdvancedChartGenerator
except ImportError:
    # Fallback import
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent / "services" / "reports" / "core"))
    from professional_kp_pdf_generator import ProfessionalKPPDFGenerator
    from advanced_chart_generator import AdvancedChartGenerator

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/reports", tags=["PDF Export"])


class KPAnalysisExportRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF –∞–Ω–∞–ª–∏–∑–∞ –ö–ü"""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∞–Ω–∞–ª–∏–∑–∞")
    tz_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
    kp_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
    company_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    
    # –û—Ü–µ–Ω–∫–∏
    overall_score: int = Field(0, ge=0, le=100, description="–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ (0-100)")
    confidence_level: int = Field(85, ge=0, le=100, description="–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
    analysis_duration: int = Field(30, ge=1, description="–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    model_used: str = Field("claude-3-5-sonnet-20241022", description="–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è AI –º–æ–¥–µ–ª—å")
    analysis_version: str = Field("2.0", description="–í–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
    created_at: str = Field(default_factory=lambda: datetime.now().isoformat(), description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    pricing: Optional[str] = Field(None, description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    timeline: Optional[str] = Field(None, description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–∞—Ö")
    tech_stack: Optional[str] = Field(None, description="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫")
    
    # –í–∞–ª—é—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    primary_currency: Optional[Dict[str, Any]] = Field(None, description="–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞")
    currencies_detected: Optional[List[Dict[str, Any]]] = Field(None, description="–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
    
    # –†–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞
    budget_compliance: Optional[Dict[str, Any]] = Field(None, description="–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    timeline_compliance: Optional[Dict[str, Any]] = Field(None, description="–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏")
    technical_compliance: Optional[Dict[str, Any]] = Field(None, description="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ")
    team_expertise: Optional[Dict[str, Any]] = Field(None, description="–ö–æ–º–∞–Ω–¥–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    final_recommendation: str = Field("conditional_accept", description="–ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
    executive_summary: Optional[str] = Field(None, description="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ")
    key_strengths: Optional[List[str]] = Field(None, description="–ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
    critical_concerns: Optional[List[str]] = Field(None, description="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    next_steps: Optional[List[str]] = Field(None, description="–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏")


class PDFExportResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    success: bool = Field(..., description="–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞")
    pdf_url: Optional[str] = Field(None, description="URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF")
    filename: Optional[str] = Field(None, description="–ò–º—è —Ñ–∞–π–ª–∞")
    error: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    details: Optional[str] = Field(None, description="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏")


@router.post("/export/kp-analysis-pdf-professional", response_model=PDFExportResponse)
async def export_kp_analysis_to_pdf_professional(request: KPAnalysisExportRequest):
    """
    –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –ö–ü –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ McKinsey/BCG
    - 15+ —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º
    - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
    - –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        
    Returns:
        PDFExportResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        logger.info(f"üéØ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {request.id}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        analysis_data = _convert_request_to_analysis_data(request)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        logger.info("üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô PDF –ì–ï–ù–ï–†–ê–¢–û–†")
        pdf_generator = ProfessionalKPPDFGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
        pdf_buffer = pdf_generator.generate_report(analysis_data)
        pdf_content = pdf_buffer.read()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(
            delete=False,
            suffix='.pdf',
            prefix=f'professional_kp_analysis_{request.id}_'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PDF –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_file.name, 'wb') as f:
            f.write(pdf_content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        safe_company_name = _sanitize_filename(request.company_name)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"DevAssist_Pro_Professional_Report_{safe_company_name}_{timestamp}.pdf"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info(f"‚úÖ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF —Å–æ–∑–¥–∞–Ω: {filename}")
        
        return PDFExportResponse(
            success=True,
            pdf_url=f"/api/reports/download/{os.path.basename(temp_file.name)}",
            filename=filename
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        
        return PDFExportResponse(
            success=False,
            error=str(e),
            details="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞"
        )


@router.post("/export/kp-analysis-pdf", response_model=PDFExportResponse)
async def export_kp_analysis_to_pdf(request: KPAnalysisExportRequest):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –ö–ü –≤ PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        
    Returns:
        PDFExportResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        logger.info(f"üéØ –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {request.id}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
        analysis_data = _convert_request_to_analysis_data(request)
        
        # –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        logger.info("üéØ –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
        pdf_generator = ProfessionalKPPDFGenerator()
        pdf_buffer = pdf_generator.generate_report(analysis_data)
        pdf_content = pdf_buffer.read()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(
            delete=False,
            suffix='.pdf',
            prefix=f'kp_analysis_{request.id}_'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PDF –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_file.name, 'wb') as f:
            f.write(pdf_content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        safe_company_name = _sanitize_filename(request.company_name)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"DevAssist_Pro_KP_Analysis_{safe_company_name}_{timestamp}.pdf"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info(f"‚úÖ PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}")
        
        return PDFExportResponse(
            success=True,
            pdf_url=f"/api/reports/download/{os.path.basename(temp_file.name)}",
            filename=filename
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF: {e}")
        import traceback
        traceback.print_exc()
        
        return PDFExportResponse(
            success=False,
            error=str(e),
            details="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF"
        )


@router.post("/export/kp-analysis-pdf-tender", response_model=PDFExportResponse)
async def export_kp_analysis_to_pdf_tender_style(request: KPAnalysisExportRequest):
    """
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –ö–ü –≤ PDF –≤ —Å—Ç–∏–ª–µ Tender —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        
    Returns:
        PDFExportResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    try:
        logger.info(f"üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Tender Style PDF —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {request.id}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
        analysis_data = _convert_request_to_analysis_data(request)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Tender Style PDF Exporter
        logger.info("üî• –ò–°–ü–û–õ–¨–ó–£–Æ TENDER STYLE EXPORTER —Å matplotlib")
        pdf_buffer = tender_pdf_exporter.generate_kp_analysis_pdf(analysis_data)
        pdf_content = pdf_buffer.getvalue()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(
            delete=False,
            suffix='.pdf',
            prefix=f'tender_style_kp_analysis_{request.id}_'
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PDF –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(temp_file.name, 'wb') as f:
            f.write(pdf_content)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        safe_company_name = _sanitize_filename(request.company_name)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"DevAssist_Pro_TENDER_STYLE_{safe_company_name}_{timestamp}.pdf"
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info(f"‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: PDF Tender Style —Å–æ–∑–¥–∞–Ω: {filename}")
        
        return PDFExportResponse(
            success=True,
            pdf_url=f"/api/reports/download/{os.path.basename(temp_file.name)}",
            filename=filename
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê Tender Style PDF —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        
        return PDFExportResponse(
            success=False,
            error=str(e),
            details="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –≤ —Å—Ç–∏–ª–µ Tender"
        )


@router.get("/download/{file_id}")
async def download_pdf(file_id: str):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞
    
    Args:
        file_id: ID —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
    Returns:
        FileResponse: PDF —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    """
    try:
        # –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        temp_path = os.path.join(tempfile.gettempdir(), file_id)
        
        if not os.path.exists(temp_path):
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"DevAssist_Pro_Report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        
        return FileResponse(
            path=temp_path,
            filename=filename,
            media_type='application/pdf'
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {file_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")


def _convert_request_to_analysis_data(request: KPAnalysisExportRequest) -> Dict[str, Any]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        
    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
    """
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    analysis_data = {
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "id": request.id,
        "tz_name": request.tz_name,
        "kp_name": request.kp_name,
        "company_name": request.company_name,
        "overall_score": request.overall_score,
        "confidence_level": request.confidence_level,
        "analysis_duration": request.analysis_duration,
        "model_used": request.model_used,
        "analysis_version": request.analysis_version,
        "created_at": request.created_at,
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        "pricing": request.pricing,
        "timeline": request.timeline,
        "tech_stack": request.tech_stack,
        
        # –í–∞–ª—é—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        "primary_currency": request.primary_currency or {
            "code": "RUB",
            "symbol": "‚ÇΩ",
            "name": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
            "detected": True
        },
        "currencies_detected": request.currencies_detected or [
            {
                "code": "RUB",
                "symbol": "‚ÇΩ", 
                "name": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
                "detected": True
            }
        ],
        
        # –†–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        "budget_compliance": request.budget_compliance or _create_default_section(
            "budget_compliance", "–ë—é–¥–∂–µ—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", request.overall_score
        ),
        "timeline_compliance": request.timeline_compliance or _create_default_section(
            "timeline_compliance", "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏", request.overall_score
        ),
        "technical_compliance": request.technical_compliance or _create_default_section(
            "technical_compliance", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", request.overall_score
        ),
        "team_expertise": request.team_expertise or _create_default_section(
            "team_expertise", "–ö–æ–º–∞–Ω–¥–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞", request.overall_score - 5
        ),
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        "final_recommendation": request.final_recommendation,
        "executive_summary": request.executive_summary or _generate_default_summary(
            request.company_name, request.overall_score
        ),
        "key_strengths": request.key_strengths or [
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó",
            "–ê–¥–µ–∫–≤–∞—Ç–Ω–æ–µ —Ü–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        ],
        "critical_concerns": request.critical_concerns or [
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤"
        ],
        "next_steps": request.next_steps or [
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–æ–º–∞–Ω–¥–æ–π",
            "–£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
            "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
        ]
    }
    
    return analysis_data


def _create_default_section(section_id: str, title: str, base_score: int) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    
    Args:
        section_id: ID —Å–µ–∫—Ü–∏–∏
        title: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
        base_score: –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
    Returns:
        Dict: –î–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    """
    return {
        "id": section_id,
        "title": title,
        "score": base_score,
        "description": f"–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '{title}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.",
        "key_findings": [
            f"–ê–Ω–∞–ª–∏–∑ {title.lower()} –ø–æ–∫–∞–∑–∞–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º",
            "–í—ã—è–≤–ª–µ–Ω—ã –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è"
        ],
        "recommendations": [
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {title.lower()}",
            "–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"
        ],
        "risk_level": "low" if base_score >= 80 else "medium" if base_score >= 60 else "high"
    }


def _generate_default_summary(company_name: str, score: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    Args:
        company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        score: –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        
    Returns:
        str: –†–µ–∑—é–º–µ
    """
    if score >= 80:
        status = "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞"
        recommendation = "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—è—Ç–∏—é"
    elif score >= 60:
        status = "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞"
        recommendation = "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—è—Ç–∏—é —Å —É—Å–ª–æ–≤–∏—è–º–∏"
    else:
        status = "—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π"
        recommendation = "—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    
    return f"""
    –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {company_name} –ø–æ–ª—É—á–∏–ª–æ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É {score}/100 –±–∞–ª–ª–æ–≤.
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç {status} –∏ {recommendation}.
    
    –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã DevAssist Pro —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º PDF –æ—Ç—á–µ—Ç–æ–≤.
    """


def _sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    import re
    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    sanitized = re.sub(r'[<>:"/\\|?*]', '_', filename)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    return sanitized[:50] if len(sanitized) > 50 else sanitized


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
def setup_pdf_export_routes(app):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞
    
    Args:
        app: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    app.include_router(router)
    logger.info("üîó PDF Export API routes –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞
    import asyncio
    
    async def test_pdf_export():
        """–¢–µ—Å—Ç PDF —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        test_request = KPAnalysisExportRequest(
            id="test_123",
            tz_name="–¢–µ—Å—Ç –¢–ó",
            kp_name="–¢–µ—Å—Ç –ö–ü",
            company_name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –û–û–û",
            overall_score=85,
            pricing="2,500,000 —Ä—É–±–ª–µ–π",
            timeline="6 –º–µ—Å—è—Ü–µ–≤",
            tech_stack="React, Node.js",
            executive_summary="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF —ç–∫—Å–ø–æ—Ä—Ç–∞."
        )
        
        result = await export_kp_analysis_to_pdf(test_request)
        print("‚úÖ –¢–µ—Å—Ç PDF —ç–∫—Å–ø–æ—Ä—Ç–∞:", result)
    
    asyncio.run(test_pdf_export())