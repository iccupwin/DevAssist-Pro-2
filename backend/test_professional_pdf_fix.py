#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test script for ProfessionalKPPDFGenerator fix
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# Add the backend directory to the Python path
sys.path.append('/mnt/f/DevAssitPro/DevAssist-Pro/backend')

# Import the generator
from services.reports.core.professional_kp_pdf_generator import ProfessionalKPPDFGenerator

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_professional_pdf_generator():
    """Test the professional PDF generator with the new method"""
    
    try:
        logger.info("üéØ Testing ProfessionalKPPDFGenerator with generate_professional_report method")
        
        # Create the generator
        generator = ProfessionalKPPDFGenerator()
        
        # Test data similar to what the backend sends
        test_data = {
            "id": "test_analysis_001",
            "company_name": "–¢–µ—Å—Ç–æ–≤–∞—è IT –ö–æ–º–ø–∞–Ω–∏—è –û–û–û",
            "tz_name": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞",
            "kp_name": "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚Ññ 2024-TEST",
            "overall_score": 85,
            "confidence_level": 92,
            "analysis_duration": 45,
            "model_used": "claude-3-5-sonnet-20241022",
            "analysis_version": "2.0",
            "created_at": datetime.now().isoformat(),
            
            "pricing": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 2,500,000 —Ä—É–±–ª–µ–π (–±–µ–∑ –ù–î–°)",
            "timeline": "–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: 4 –º–µ—Å—è—Ü–∞",
            "tech_stack": "React 18, FastAPI, PostgreSQL, Docker",
            
            "primary_currency": {
                "code": "RUB",
                "symbol": "‚ÇΩ",
                "name": "–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å",
                "detected": True
            },
            
            "budget_compliance": {
                "score": 88,
                "description": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±—é–¥–∂–µ—Ç—É –ø—Ä–æ–µ–∫—Ç–∞.",
                "key_findings": ["–¶–µ–Ω–∞ –≤ —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞", "–•–æ—Ä–æ—à–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤"],
                "recommendations": ["–£—Ç–æ—á–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏"]
            },
            
            "technical_compliance": {
                "score": 82,
                "description": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏.",
                "key_findings": ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–•–æ—Ä–æ—à–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"],
                "recommendations": ["–£—Å–∏–ª–∏—Ç—å –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"]
            },
            
            "team_expertise": {
                "score": 90,
                "description": "–ö–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫—É—é –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é.",
                "key_findings": ["–û–ø—ã—Ç–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç"],
                "recommendations": ["–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é"]
            },
            
            "final_recommendation": "accept",
            "executive_summary": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø—Ä–∏–Ω—è—Ç–∏—é —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏.",
            
            "key_strengths": [
                "–í—ã—Å–æ–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã",
                "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –±—é–¥–∂–µ—Ç—É",
                "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫"
            ],
            
            "critical_concerns": [
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–ª–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
            ],
            
            "next_steps": [
                "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é",
                "–£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä"
            ]
        }
        
        # Test the new generate_professional_report method
        logger.info("üìÑ Calling generate_professional_report method...")
        result = await generator.generate_professional_report(test_data)
        
        # Check the result
        if result["success"]:
            logger.info(f"‚úÖ Professional PDF generated successfully!")
            logger.info(f"üìÅ File path: {result.get('file_path')}")
            logger.info(f"üìÑ Filename: {result.get('filename')}")
            logger.info(f"üíæ File size: {result.get('file_size', 0):,} bytes")
            logger.info(f"üåê PDF URL: {result.get('pdf_url')}")
            logger.info(f"‚ÑπÔ∏è Details: {result.get('details')}")
            
            # Verify the file exists
            file_path = result.get('file_path')
            if file_path and os.path.exists(file_path):
                actual_size = os.path.getsize(file_path)
                logger.info(f"‚úÖ File verification successful: {actual_size:,} bytes")
                return True
            else:
                logger.error(f"‚ùå File not found at: {file_path}")
                return False
                
        else:
            logger.error(f"‚ùå PDF generation failed: {result.get('error')}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Test failed with exception: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    """Run the test"""
    print("=" * 60)
    print("Testing Professional KP PDF Generator Fix")
    print("=" * 60)
    
    # Run the async test
    success = asyncio.run(test_professional_pdf_generator())
    
    if success:
        print("\n‚úÖ TEST PASSED: Professional PDF generator is working correctly!")
        print("üéØ The generate_professional_report method has been successfully implemented.")
    else:
        print("\n‚ùå TEST FAILED: There are still issues with the PDF generator.")
        
    print("=" * 60)