#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è DevAssist Pro
"""
import requests
import json
import time
import os
from pathlib import Path

BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç health check"""
    print("üîç –¢–µ—Å—Ç Health Check...")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health Check: {data['status']}")
            return True
        else:
            print(f"‚ùå Health Check: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health Check: {e}")
        return False

def test_admin_status():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ API"""
    print("üîç –¢–µ—Å—Ç Admin Status...")
    try:
        response = requests.get(f"{BASE_URL}/api/admin/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Admin Status: {data['status']}")
            return True
        else:
            print(f"‚ùå Admin Status: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Admin Status: {e}")
        return False

def test_analytics():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üîç –¢–µ—Å—Ç Analytics API...")
    try:
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        payload = {
            "data_type": "analyses",
            "aggregation_type": "count",
            "period": "30d"
        }
        response = requests.post(f"{BASE_URL}/api/analytics/process", 
                               json=payload, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            results = data.get('results', {})
            print(f"‚úÖ Analytics: {results.get('total_analyses', 0)} –∞–Ω–∞–ª–∏–∑–æ–≤")
            return True
        else:
            print(f"‚ùå Analytics: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Analytics: {e}")
        return False

def test_dashboard():
    """–¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞"""
    print("üîç –¢–µ—Å—Ç Dashboard API...")
    try:
        response = requests.get(f"{BASE_URL}/api/analytics/dashboard?period=30d", 
                              timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            stats = data.get('data', {}).get('overview', {})
            print(f"‚úÖ Dashboard: {stats.get('total_projects', 0)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            return True
        else:
            print(f"‚ùå Dashboard: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Dashboard: {e}")
        return False

def test_reports():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç Reports API...")
    try:
        # –¢–µ—Å—Ç PDF –æ—Ç—á–µ—Ç–∞
        payload = {
            "analysis_id": 12345,
            "report_format": "pdf",
            "template_name": "kp_analysis_default",
            "include_charts": True
        }
        response = requests.post(f"{BASE_URL}/api/reports/generate/pdf", 
                               json=payload, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ PDF Report: {data.get('download_url', 'generated')}")
            return True
        else:
            print(f"‚ùå PDF Report: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå PDF Report: {e}")
        return False

def test_kp_analyzer():
    """–¢–µ—Å—Ç –ö–ü –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    print("üîç –¢–µ—Å—Ç –ö–ü Analyzer API...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file_content = """
        –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï
        
        –ù–∞–∑–≤–∞–Ω–∏–µ: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞
        –°—Ä–æ–∫–∏: 3 –º–µ—Å—è—Ü–∞
        –°—Ç–æ–∏–º–æ—Å—Ç—å: 500,000 —Ä—É–±–ª–µ–π
        
        –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
        –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é.
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        test_file_path = Path("test_kp.txt")
        with open(test_file_path, 'w', encoding='utf-8') as f:
            f.write(test_file_content)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑
        with open(test_file_path, 'rb') as f:
            files = {'file': ('test_kp.txt', f, 'text/plain')}
            response = requests.post(f"{BASE_URL}/api/kp-analyzer/full-analysis", 
                                   files=files, timeout=30)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file_path.unlink(missing_ok=True)
        
        if response.status_code == 200:
            data = response.json()
            analysis = data.get('data', {}).get('analysis', {})
            quality_score = analysis.get('results', {}).get('quality_score', 0)
            print(f"‚úÖ –ö–ü Analyzer: –ö–∞—á–µ—Å—Ç–≤–æ {quality_score}%")
            return True
        else:
            print(f"‚ùå –ö–ü Analyzer: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ö–ü Analyzer: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ DevAssist Pro - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 60)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    time.sleep(3)
    
    tests = [
        ("Health Check", test_health),
        ("Admin Status", test_admin_status), 
        ("Analytics API", test_analytics),
        ("Dashboard API", test_dashboard),
        ("Reports API", test_reports),
        ("–ö–ü Analyzer", test_kp_analyzer)
    ]
    
    results = {}
    passed = 0
    total = len(tests)
    
    print(f"\nüß™ –ó–∞–ø—É—Å–∫ {total} —Ç–µ—Å—Ç–æ–≤:")
    print("-" * 40)
    
    for name, test_func in tests:
        try:
            result = test_func()
            results[name] = result
            if result:
                passed += 1
        except Exception as e:
            print(f"‚ùå {name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
            results[name] = False
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ò—Ç–æ–≥–∏
    print("=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{test_name:>20}: {status}")
    
    print("-" * 60)
    print(f"–ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
        print("   ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:     http://localhost:8000")
        print("   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:     http://localhost:8000/docs")
        print("   ‚Ä¢ Health Check:         http://localhost:8000/health")
        print("   ‚Ä¢ –ö–ü –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä:        http://localhost:8000/api/kp-analyzer/")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:            http://localhost:8000/api/analytics/")
        print("   ‚Ä¢ –û—Ç—á–µ—Ç—ã:               http://localhost:8000/api/reports/")
        print("   ‚Ä¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:         http://localhost:8000/api/admin/")
        
        print("\n‚úÖ DevAssist Pro —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} —Ç–µ—Å—Ç(–æ–≤) –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: python3 app.py")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)