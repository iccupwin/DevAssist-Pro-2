#!/usr/bin/env python3
"""
DevAssist Pro - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
–ó–∞–ø—É—Å–∫ Reports –∏ Analytics —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import json
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append('/Users/atai/Documents/DevAssist-Pro-1/backend/services/reports')
sys.path.append('/Users/atai/Documents/DevAssist-Pro-1/backend/services/analytics')
sys.path.append('/Users/atai/Documents/DevAssist-Pro-1/backend/shared')

async def test_reports_service():
    """–¢–µ—Å—Ç Reports Service"""
    print("\nüóÇÔ∏è  Reports Service Demo")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Reports Service
        from core.report_generator import ReportGenerator
        from core.pdf_generator import PDFGenerator
        from core.excel_generator import ExcelGenerator
        from core.template_manager import TemplateManager
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        report_gen = ReportGenerator()
        pdf_gen = PDFGenerator()
        excel_gen = ExcelGenerator()
        template_mgr = TemplateManager()
        
        print("‚úÖ Reports Service –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        print("\nüìä –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:")
        analysis_id = 12345
        
        report_data = await report_gen.generate_report(
            analysis_id=analysis_id,
            report_format="pdf",
            template_name="kp_analysis_default",
            include_charts=True,
            include_raw_data=False
        )
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {analysis_id}")
        print(f"   –°–µ–∫—Ü–∏–π: {len(report_data.get('sections', {}))}")
        print(f"   –í–∫–ª—é—á–µ–Ω—ã –¥–∏–∞–≥—Ä–∞–º–º—ã: {report_data.get('metadata', {}).get('include_charts', False)}")
        
        # –¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤
        print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
        templates = await template_mgr.list_templates()
        for i, template in enumerate(templates[:3], 1):
            print(f"   {i}. {template['name']} ({len(template['sections'])} —Å–µ–∫—Ü–∏–π)")
        
        # –¢–µ—Å—Ç PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–∫ –≤–µ—Ä—Å–∏—è)
        print("\nüìÑ –¢–µ—Å—Ç PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        pdf_path = await pdf_gen.generate_kp_analysis_report(
            analysis_id=analysis_id,
            template_name="kp_analysis_default",
            include_charts=True
        )
        print(f"‚úÖ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {pdf_path}")
        
        # –¢–µ—Å—Ç Excel –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–∫ –≤–µ—Ä—Å–∏—è)
        print("\nüìä –¢–µ—Å—Ç Excel –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        excel_path = await excel_gen.generate_kp_analysis_report(
            analysis_id=analysis_id,
            include_charts=True
        )
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {excel_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Reports Service: {str(e)}")
        return False

async def test_analytics_service():
    """–¢–µ—Å—Ç Analytics Service"""
    print("\nüìà Analytics Service Demo")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Analytics Service
        from core.analytics_processor import AnalyticsProcessor
        from core.metrics_calculator import MetricsCalculator
        from core.data_aggregator import DataAggregator
        from core.statistics_generator import StatisticsGenerator
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        analytics_proc = AnalyticsProcessor()
        metrics_calc = MetricsCalculator()
        data_agg = DataAggregator()
        stats_gen = StatisticsGenerator()
        
        print("‚úÖ Analytics Service –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        print("\nüìä –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:")
        analytics_result = await analytics_proc.process_analytics(
            data_type="analyses",
            aggregation_type="count"
        )
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:")
        print(f"   –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {analytics_result.get('total_analyses', 0)}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {analytics_result.get('successful_analyses', 0)}")
        print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {analytics_result.get('success_rate', 0)}%")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
        print("\n‚ö° –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫:")
        metrics_result = await metrics_calc.calculate_metrics(
            metric_types=["success_rate", "avg_processing_time", "cost_per_analysis"],
            entity_type="global",
            period="30d"
        )
        
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:")
        for metric, data in metrics_result.items():
            if metric != "metadata" and isinstance(data, dict):
                value = data.get('value', 'N/A')
                unit = data.get('unit', '')
                print(f"   {metric}: {value} {unit}")
        
        # –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\nüîÑ –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
        user_analytics = await data_agg.aggregate_user_data(period="30d")
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã:")
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_analytics.get('total_users', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_analytics.get('active_users', 0)}")
        print(f"   –ù–æ–≤—ã—Ö: {user_analytics.get('new_users', 0)}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
        print("\nüìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞:")
        dashboard_stats = await stats_gen.generate_dashboard_statistics(period="30d")
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:")
        print(f"   –†–∞–∑–¥–µ–ª–æ–≤: {len(dashboard_stats)}")
        
        overview = dashboard_stats.get('overview', {})
        if overview:
            print(f"   –ü—Ä–æ–µ–∫—Ç–æ–≤: {overview.get('total_projects', 0)}")
            print(f"   –ê–Ω–∞–ª–∏–∑–æ–≤: {overview.get('total_analyses', 0)}")
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {overview.get('total_documents', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ Analytics Service: {str(e)}")
        return False

async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîó Integration Test")
    print("=" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        from core.analytics_processor import AnalyticsProcessor
        from core.report_generator import ReportGenerator
        
        analytics_proc = AnalyticsProcessor()
        report_gen = ReportGenerator()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        analytics_data = await analytics_proc.process_analytics(
            data_type="analyses",
            aggregation_type="count"
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        analysis_id = analytics_data.get('total_analyses', 100)
        report_data = await report_gen.generate_report(
            analysis_id=analysis_id,
            report_format="pdf",
            include_charts=True
        )
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ‚Üí –û—Ç—á–µ—Ç: –∞–Ω–∞–ª–∏–∑ #{analysis_id}")
        print(f"   –°–µ–∫—Ü–∏–π –≤ –æ—Ç—á–µ—Ç–µ: {len(report_data.get('sections', {}))}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    print("üéØ DevAssist Pro - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, password='redis_password')
        r.ping()
        print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∑–∞–ø—É—Å—Ç–∏—Ç–µ 'docker-compose up -d redis'")
    
    try:
        import asyncpg
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL
        print("‚úÖ PostgreSQL –¥—Ä–∞–π–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print("‚ùå PostgreSQL –¥—Ä–∞–π–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = {}
    
    results['reports'] = await test_reports_service()
    results['analytics'] = await test_analytics_service()
    results['integration'] = await test_integration()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 50)
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    
    for service, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{service.upper():>15}: {status}")
    
    print("-" * 50)
    print(f"–ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É: make start")
        print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")
        print("   3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    else:
        print(f"\n‚ö†Ô∏è  {total_tests - passed_tests} —Ç–µ—Å—Ç(–æ–≤) –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)