#!/bin/bash

echo "üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï BACKEND"
echo "============================="
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "backend/docker-compose.monolith.yml" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

echo "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:"
echo "   1. CORS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - No 'Access-Control-Allow-Origin' header"
echo "   2. Backend –ø–∞–¥–∞–µ—Ç - Could not parse SQLAlchemy URL from string ''"
echo "   3. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
echo ""

echo "üõë –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
cd backend
docker compose -f docker-compose.monolith.yml down --remove-orphans
docker stop $(docker ps -q) 2>/dev/null || true

echo ""
echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤..."
docker system prune -f
docker container prune -f

echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.monolith.yml..."
echo "   –¢–µ–∫—É—â–∏–π POSTGRES_URL:"
grep -A 3 -B 1 "POSTGRES_URL" docker-compose.monolith.yml

echo ""
echo "   –¢–µ–∫—É—â–∏–π ALLOWED_ORIGINS:"
grep -A 1 -B 1 "ALLOWED_ORIGINS" docker-compose.monolith.yml

echo ""
echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º POSTGRES_URL
if grep -q "POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro" docker-compose.monolith.yml; then
    echo "   ‚úÖ POSTGRES_URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ POSTGRES_URL..."
    sed -i 's|POSTGRES_URL: .*|POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro|' docker-compose.monolith.yml
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º CORS
if grep -q "ALLOWED_ORIGINS: http://46.149.71.162:3000" docker-compose.monolith.yml; then
    echo "   ‚úÖ CORS –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CORS..."
    sed -i 's|ALLOWED_ORIGINS: .*|ALLOWED_ORIGINS: http://46.149.71.162:3000,http://46.149.71.162,http://localhost:3000,http://localhost:3001|' docker-compose.monolith.yml
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º ADMIN_PASSWORD
if grep -q "ADMIN_PASSWORD: admin123" docker-compose.monolith.yml; then
    echo "   ‚úÖ ADMIN_PASSWORD —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    echo "   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ADMIN_PASSWORD..."
    sed -i '/# Authentication/a\      ADMIN_PASSWORD: admin123' docker-compose.monolith.yml
fi

echo ""
echo "üìã –ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "   POSTGRES_URL: $(grep 'POSTGRES_URL:' docker-compose.monolith.yml | cut -d: -f2-)"
echo "   ALLOWED_ORIGINS: $(grep 'ALLOWED_ORIGINS:' docker-compose.monolith.yml | cut -d: -f2-)"
echo "   ADMIN_PASSWORD: $(grep 'ADMIN_PASSWORD:' docker-compose.monolith.yml | cut -d: -f2-)"

echo ""
echo "üê≥ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π..."

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ —à–∞–≥–∞–º –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
echo "   üóÑÔ∏è  –ó–∞–ø—É—Å–∫ PostgreSQL..."
docker compose -f docker-compose.monolith.yml up -d postgres
sleep 10

echo "   üî¥ –ó–∞–ø—É—Å–∫ Redis..."
docker compose -f docker-compose.monolith.yml up -d redis
sleep 5

echo "   üêç –ó–∞–ø—É—Å–∫ Backend App..."
docker compose -f docker-compose.monolith.yml up -d --build app
sleep 30

echo ""
echo "üìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose -f docker-compose.monolith.yml ps

echo ""
echo "üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
echo "üóÑÔ∏è  PostgreSQL:"
if docker exec $(docker ps -q --filter "name=postgres") pg_isready -U devassist 2>/dev/null; then
    echo "   ‚úÖ PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    PG_OK=true
else
    echo "   ‚ùå PostgreSQL: –ø—Ä–æ–±–ª–µ–º–∞"
    PG_OK=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
echo "üî¥ Redis:"
if docker exec $(docker ps -q --filter "name=redis") redis-cli --raw incr ping 2>/dev/null; then
    echo "   ‚úÖ Redis: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    REDIS_OK=true
else
    echo "   ‚ùå Redis: –ø—Ä–æ–±–ª–µ–º–∞"
    REDIS_OK=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend
echo "üêç Backend App:"
APP_CONTAINER=$(docker ps -q --filter "name=app")
if [ -n "$APP_CONTAINER" ]; then
    echo "   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –∑–∞–ø—É—â–µ–Ω ($APP_CONTAINER)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏
    LOGS=$(docker logs $APP_CONTAINER 2>&1 | tail -5)
    if echo "$LOGS" | grep -q "Could not parse SQLAlchemy URL"; then
        echo "   ‚ùå Backend: –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        echo "   –õ–æ–≥–∏: $LOGS"
        APP_OK=false
    elif echo "$LOGS" | grep -q "Application startup complete"; then
        echo "   ‚úÖ Backend: –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        APP_OK=true
    else
        echo "   ‚è≥ Backend: –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
        echo "   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏: $LOGS"
        APP_OK=unknown
    fi
else
    echo "   ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –Ω–µ –Ω–∞–π–¥–µ–Ω"
    APP_OK=false
fi

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."

# –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –µ—Å–ª–∏ backend –µ—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
if [ "$APP_OK" = "unknown" ]; then
    echo "‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend (30 —Å–µ–∫)..."
    sleep 30
fi

# Health Check
if curl -f -s --max-time 10 "http://localhost:8000/health" >/dev/null 2>&1; then
    echo "   ‚úÖ Health Check: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    HEALTH_OK=true
else
    echo "   ‚ùå Health Check: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    HEALTH_OK=false
fi

# CORS Preflight Test
if [ "$HEALTH_OK" = true ]; then
    echo "üåê –¢–µ—Å—Ç CORS..."
    CORS_RESPONSE=$(curl -s -i -X OPTIONS \
        -H "Origin: http://46.149.71.162:3000" \
        -H "Access-Control-Request-Method: POST" \
        -H "Access-Control-Request-Headers: Content-Type" \
        "http://localhost:8000/api/auth/login" 2>/dev/null)
    
    if echo "$CORS_RESPONSE" | grep -q "Access-Control-Allow-Origin"; then
        echo "   ‚úÖ CORS: –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
        CORS_OK=true
    else
        echo "   ‚ùå CORS: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        echo "   –û—Ç–≤–µ—Ç: $(echo "$CORS_RESPONSE" | head -3)"
        CORS_OK=false
    fi
    
    # Auth Test
    echo "üîê –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
    AUTH_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -H "Origin: http://46.149.71.162:3000" \
        -d '{"email":"admin@devassist.pro","password":"admin123"}' \
        "http://localhost:8000/api/auth/login" 2>/dev/null)
    
    if echo "$AUTH_RESPONSE" | grep -q "access_token"; then
        echo "   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç"
        AUTH_OK=true
    else
        echo "   ‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø—Ä–æ–±–ª–µ–º–∞"
        echo "   –û—Ç–≤–µ—Ç: $AUTH_RESPONSE"
        AUTH_OK=false
    fi
else
    CORS_OK=false
    AUTH_OK=false
fi

echo ""
echo "üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:"
echo "====================="

if [ "$PG_OK" = true ] && [ "$REDIS_OK" = true ] && [ "$HEALTH_OK" = true ] && [ "$CORS_OK" = true ] && [ "$AUTH_OK" = true ]; then
    echo "üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!"
    echo ""
    echo "‚úÖ PostgreSQL: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ Redis: —Ä–∞–±–æ—Ç–∞–µ—Ç" 
    echo "‚úÖ Backend API: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "‚úÖ CORS: –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    echo "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo ""
    echo "üåê –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:"
    echo "   Frontend: http://46.149.71.162:3000"
    echo "   Backend:  http://46.149.71.162:8000"
    echo "   API Docs: http://46.149.71.162:8000/docs"
    echo ""
    echo "üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"
    echo "   admin@devassist.pro / admin123"
    echo "   test@example.com / testpass123"
    
elif [ "$HEALTH_OK" = true ]; then
    echo "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Backend —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
    echo ""
    echo "‚úÖ Backend API: —Ä–∞–±–æ—Ç–∞–µ—Ç"
    if [ "$CORS_OK" != true ]; then
        echo "‚ùå CORS: —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    fi
    if [ "$AUTH_OK" != true ]; then
        echo "‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    fi
    
else
    echo "‚ùå –°–ï–†–¨–ï–ó–ù–´–ï –ü–†–û–ë–õ–ï–ú–´!"
    echo ""
    if [ "$PG_OK" != true ]; then
        echo "‚ùå PostgreSQL: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    if [ "$REDIS_OK" != true ]; then
        echo "‚ùå Redis: –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    if [ "$HEALTH_OK" != true ]; then
        echo "‚ùå Backend: –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    echo ""
    echo "üîß –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:"
    echo "   docker compose -f docker-compose.monolith.yml logs"
    echo "   docker compose -f docker-compose.monolith.yml ps"
fi

echo ""
echo "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
echo "   –õ–æ–≥–∏ backend:    docker compose -f docker-compose.monolith.yml logs app"
echo "   –õ–æ–≥–∏ postgres:   docker compose -f docker-compose.monolith.yml logs postgres"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ app:  docker compose -f docker-compose.monolith.yml restart app"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞:       docker compose -f docker-compose.monolith.yml down"

cd ..