#!/bin/bash

# Quick Fix - –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
set -e

log() {
    echo -e "\033[0;32m[$(date +'%Y-%m-%d %H:%M:%S')] $1\033[0m"
}

error() {
    echo -e "\033[0;31m[ERROR] $1\033[0m" >&2
}

warning() {
    echo -e "\033[1;33m[WARNING] $1\033[0m"
}

log "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DevAssist Pro"

# 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.real.yml down --remove-orphans 2>/dev/null || true
docker compose -f docker-compose.production.yml down --remove-orphans 2>/dev/null || true

# 2. –û—á–∏—Å—Ç–∫–∞
log "–û—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -f

# 3. –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ Dockerfile
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
sed 's/dockerfile: Dockerfile.working/dockerfile: Dockerfile.fixed/g' docker-compose.real.yml > docker-compose.fixed.yml

# 4. –°–±–æ—Ä–∫–∞ backend (–æ–Ω —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ backend..."
if ! docker compose -f docker-compose.fixed.yml build app --quiet; then
    error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ backend"
    exit 1
fi

# 5. –°–±–æ—Ä–∫–∞ frontend —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
log "–°–±–æ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ frontend..."
cd frontend

# –£–¥–∞–ª—è–µ–º package-lock.json –¥–ª—è —á–∏—Å—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
rm -f package-lock.json

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π package.json –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
cp package.json package.json.backup

cd ..

if docker compose -f docker-compose.fixed.yml build frontend; then
    log "‚úÖ Frontend —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
else
    warning "Frontend –Ω–µ —Å–æ–±—Ä–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é..."
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π Dockerfile
    cat > frontend/Dockerfile.simple << 'EOF'
FROM nginx:1.25-alpine

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º curl
RUN apk add --no-cache curl

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
COPY nginx.production.conf /etc/nginx/conf.d/default.conf

# –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π index.html —Å –≤–∞—à–∏–º –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–º
RUN mkdir -p /usr/share/nginx/html && \
    cat > /usr/share/nginx/html/index.html << 'HTMLEOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DevAssist Pro - AI-powered Real Estate Platform</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container { 
            text-align: center; 
            max-width: 800px; 
            padding: 2rem;
            background: rgba(255,255,255,0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        h1 { 
            font-size: 3rem; 
            margin-bottom: 1rem; 
            background: linear-gradient(45deg, #fff, #f0f0f0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .subtitle { 
            font-size: 1.2rem; 
            margin-bottom: 2rem; 
            opacity: 0.9;
        }
        .features { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 1rem; 
            margin: 2rem 0;
        }
        .feature { 
            background: rgba(255,255,255,0.1); 
            padding: 1rem; 
            border-radius: 10px; 
            border: 1px solid rgba(255,255,255,0.2);
        }
        .api-status { 
            margin-top: 2rem; 
            padding: 1rem; 
            background: rgba(0,0,0,0.2); 
            border-radius: 10px;
        }
        .status-indicator { 
            display: inline-block; 
            width: 10px; 
            height: 10px; 
            border-radius: 50%; 
            margin-right: 8px;
        }
        .online { background: #4ade80; }
        .offline { background: #f87171; }
        .btn {
            background: linear-gradient(45deg, #4ade80, #22c55e);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin: 0.5rem;
            transition: transform 0.2s;
        }
        .btn:hover { transform: translateY(-2px); }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ DevAssist Pro</h1>
        <div class="subtitle">AI-Powered Real Estate Development Platform</div>
        
        <div class="features">
            <div class="feature">
                <h3>üìä –ö–ü –ê–Ω–∞–ª–∏–∑</h3>
                <p>–ò–ò –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</p>
            </div>
            <div class="feature">
                <h3>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                <p>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
            </div>
            <div class="feature">
                <h3>ü§ñ –ò–ò –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
                <p>–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤</p>
            </div>
            <div class="feature">
                <h3>üìë –û—Ç—á–µ—Ç—ã</h3>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤</p>
            </div>
        </div>

        <div class="api-status">
            <h3>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
            <div id="backend-status">
                <span class="status-indicator offline"></span>
                Backend API: –ü—Ä–æ–≤–µ—Ä–∫–∞...
            </div>
            <div style="margin-top: 0.5rem;">
                <span class="status-indicator online"></span>
                Frontend: –û–Ω–ª–∞–π–Ω
            </div>
        </div>

        <div style="margin-top: 2rem;">
            <a href="/api/health" class="btn">üîó API Health Check</a>
            <a href="/health.json" class="btn">üìä Frontend Status</a>
        </div>

        <div style="margin-top: 2rem; opacity: 0.7; font-size: 0.9rem;">
            DevAssist Pro v1.0 - –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
        </div>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ backend
        fetch('/api/health')
            .then(response => response.json())
            .then(data => {
                document.getElementById('backend-status').innerHTML = 
                    '<span class="status-indicator online"></span>Backend API: –û–Ω–ª–∞–π–Ω (' + (data.status || 'OK') + ')';
            })
            .catch(error => {
                document.getElementById('backend-status').innerHTML = 
                    '<span class="status-indicator offline"></span>Backend API: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
            });
    </script>
</body>
</html>
HTMLEOF

# –°–æ–∑–¥–∞–µ–º health.json
RUN echo '{"status":"healthy","service":"devassist-pro-frontend","version":"1.0.0","timestamp":"'$(date -Iseconds)'"}' > /usr/share/nginx/html/health.json

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health.json || exit 1

CMD ["nginx", "-g", "daemon off;"]
EOF

    # –û–±–Ω–æ–≤–ª—è–µ–º docker-compose –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏
    sed 's/dockerfile: Dockerfile.fixed/dockerfile: Dockerfile.simple/g' docker-compose.fixed.yml > docker-compose.simple.yml
    
    if ! docker compose -f docker-compose.simple.yml build frontend; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é"
        exit 1
    fi
    
    COMPOSE_FILE="docker-compose.simple.yml"
    SIMPLE_MODE=true
else
    COMPOSE_FILE="docker-compose.fixed.yml"
    SIMPLE_MODE=false
fi

# 6. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if ! docker compose -f "$COMPOSE_FILE" up -d; then
    error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞"
    exit 1
fi

# 7. –û–∂–∏–¥–∞–Ω–∏–µ
log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (45 —Å–µ–∫)..."
sleep 45

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose -f "$COMPOSE_FILE" ps

# Backend check
BACKEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/api/health || echo "000")
if [ "$BACKEND_CODE" = "200" ]; then
    log "‚úÖ Backend –º–æ–Ω–æ–ª–∏—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $BACKEND_CODE)"
else
    warning "‚ö†Ô∏è Backend: HTTP $BACKEND_CODE"
fi

# Frontend check
FRONTEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://46.149.71.162/ || echo "000")
if [ "$FRONTEND_CODE" = "200" ]; then
    log "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç! (HTTP $FRONTEND_CODE)"
else
    warning "‚ö†Ô∏è Frontend: HTTP $FRONTEND_CODE"
fi

# 9. –†–µ–∑—É–ª—å—Ç–∞—Ç
echo
log "üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:"
echo
if [ "$SIMPLE_MODE" = true ]; then
    log "üåê DevAssist Pro (–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è): http://46.149.71.162/"
    log "‚öôÔ∏è Backend API (–ú–æ–Ω–æ–ª–∏—Ç): http://46.149.71.162/api/health"
    echo
    log "üìù –ó–∞–ø—É—â–µ–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"
    log "‚úÖ Backend –º–æ–Ω–æ–ª–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω"
    log "üí° Frontend –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å API"
else
    log "üåê DevAssist Pro (React): http://46.149.71.162/"
    log "‚öôÔ∏è Backend API (–ú–æ–Ω–æ–ª–∏—Ç): http://46.149.71.162/api/health"
    echo
    log "üìù –ü–æ–ª–Ω–∞—è React –≤–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!"
fi

if [ "$BACKEND_CODE" = "200" ] && [ "$FRONTEND_CODE" = "200" ]; then
    log "üéä –í–°–ï –†–ê–ë–û–¢–ê–ï–¢! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è DevAssist Pro!"
else
    warning "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose -f $COMPOSE_FILE logs"
fi

echo
log "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
log "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: docker compose -f $COMPOSE_FILE down"
log "   –õ–æ–≥–∏: docker compose -f $COMPOSE_FILE logs"
log "   –°—Ç–∞—Ç—É—Å: docker compose -f $COMPOSE_FILE ps"