#!/bin/bash

set -e

echo "üîê –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò DevAssist Pro"
echo "========================================"

SERVER_IP="46.149.71.162"
FRONTEND_URL="http://$SERVER_IP:3000"
BACKEND_URL="http://$SERVER_IP:8000"

echo ""
echo "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:"
echo "  Server IP: $SERVER_IP"
echo "  Frontend: $FRONTEND_URL"
echo "  Backend:  $BACKEND_URL"

echo ""
echo "üîß 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
echo -n "  Frontend (port 3000): "
if curl -f -s --max-time 5 "$FRONTEND_URL" >/dev/null 2>&1; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    FRONTEND_OK=true
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    FRONTEND_OK=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend API Gateway
echo -n "  Backend API Gateway (port 8000): "
if curl -f -s --max-time 5 "$BACKEND_URL/health" >/dev/null 2>&1; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    BACKEND_OK=true
else
    echo "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    BACKEND_OK=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth Module –≤ –º–æ–Ω–æ–ª–∏—Ç–µ
echo -n "  Auth Module (–≤ —Å–æ—Å—Ç–∞–≤–µ backend): "
if curl -f -s --max-time 5 "$BACKEND_URL/api/auth/login" -X OPTIONS >/dev/null 2>&1; then
    echo "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω"
    AUTH_SERVICE_OK=true
else
    echo "‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ backend)"
    AUTH_SERVICE_OK=$BACKEND_OK
fi

echo ""
echo "üåê 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

# –¢–µ—Å—Ç CORS —á–µ—Ä–µ–∑ preflight –∑–∞–ø—Ä–æ—Å
echo -n "  CORS Preflight Test: "
CORS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
    -H "Origin: $FRONTEND_URL" \
    -H "Access-Control-Request-Method: POST" \
    -H "Access-Control-Request-Headers: Content-Type,Authorization" \
    -X OPTIONS \
    "$BACKEND_URL/api/auth/login" 2>/dev/null || echo "000")

if [ "$CORS_RESPONSE" = "200" ] || [ "$CORS_RESPONSE" = "204" ]; then
    echo "‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (HTTP $CORS_RESPONSE)"
    CORS_OK=true
else
    echo "‚ùå CORS –æ—à–∏–±–∫–∞ (HTTP $CORS_RESPONSE)"
    CORS_OK=false
fi

echo ""
echo "üîë 3. –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."

# –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
echo "  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏..."
REGISTER_DATA='{"email":"test@example.com","password":"testpass123","username":"testuser","full_name":"Test User"}'
REGISTER_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -H "Content-Type: application/json" \
    -H "Origin: $FRONTEND_URL" \
    -d "$REGISTER_DATA" \
    -X POST "$BACKEND_URL/api/auth/register" 2>/dev/null || echo "HTTPSTATUS:000")

REGISTER_HTTP_CODE=$(echo "$REGISTER_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
REGISTER_BODY=$(echo "$REGISTER_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')

echo -n "    Registration Test: "
if [ "$REGISTER_HTTP_CODE" = "201" ] || [ "$REGISTER_HTTP_CODE" = "200" ]; then
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ (HTTP $REGISTER_HTTP_CODE)"
    REGISTER_OK=true
elif [ "$REGISTER_HTTP_CODE" = "409" ]; then
    echo "‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (HTTP $REGISTER_HTTP_CODE)"
    REGISTER_OK=true
else
    echo "‚ùå –û—à–∏–±–∫–∞ (HTTP $REGISTER_HTTP_CODE)"
    echo "    Response: $REGISTER_BODY"
    REGISTER_OK=false
fi

# –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞
echo "  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞..."
LOGIN_DATA='{"email":"test@example.com","password":"testpass123"}'
LOGIN_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    -H "Content-Type: application/json" \
    -H "Origin: $FRONTEND_URL" \
    -d "$LOGIN_DATA" \
    -X POST "$BACKEND_URL/api/auth/login" 2>/dev/null || echo "HTTPSTATUS:000")

LOGIN_HTTP_CODE=$(echo "$LOGIN_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
LOGIN_BODY=$(echo "$LOGIN_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]*$//')

echo -n "    Login Test: "
if [ "$LOGIN_HTTP_CODE" = "200" ]; then
    echo "‚úÖ –£—Å–ø–µ—à–Ω–æ (HTTP $LOGIN_HTTP_CODE)"
    LOGIN_OK=true
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω
    ACCESS_TOKEN=$(echo "$LOGIN_BODY" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)
    if [ -n "$ACCESS_TOKEN" ]; then
        echo "    ‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω"
        TOKEN_OK=true
    else
        echo "    ‚ùå JWT —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        TOKEN_OK=false
    fi
else
    echo "‚ùå –û—à–∏–±–∫–∞ (HTTP $LOGIN_HTTP_CODE)"
    echo "    Response: $LOGIN_BODY"
    LOGIN_OK=false
    TOKEN_OK=false
fi

echo ""
echo "üß™ 4. –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤..."

if [ "$TOKEN_OK" = true ]; then
    # –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    echo -n "  Protected Endpoint Test: "
    PROTECTED_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
        -H "Authorization: Bearer $ACCESS_TOKEN" \
        -H "Origin: $FRONTEND_URL" \
        -X GET "$BACKEND_URL/api/auth/me" 2>/dev/null || echo "HTTPSTATUS:000")
    
    PROTECTED_HTTP_CODE=$(echo "$PROTECTED_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    
    if [ "$PROTECTED_HTTP_CODE" = "200" ]; then
        echo "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $PROTECTED_HTTP_CODE)"
        PROTECTED_OK=true
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (HTTP $PROTECTED_HTTP_CODE)"
        PROTECTED_OK=false
    fi
else
    echo "  ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)"
    PROTECTED_OK=false
fi

echo ""
echo "üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:"
echo "======================"

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
TOTAL_TESTS=7
PASSED_TESTS=0

[ "$FRONTEND_OK" = true ] && ((PASSED_TESTS++))
[ "$BACKEND_OK" = true ] && ((PASSED_TESTS++))
[ "$AUTH_SERVICE_OK" = true ] && ((PASSED_TESTS++))
[ "$CORS_OK" = true ] && ((PASSED_TESTS++))
[ "$REGISTER_OK" = true ] && ((PASSED_TESTS++))
[ "$LOGIN_OK" = true ] && ((PASSED_TESTS++))
[ "$PROTECTED_OK" = true ] && ((PASSED_TESTS++))

echo "–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: $PASSED_TESTS/$TOTAL_TESTS"
echo ""

[ "$FRONTEND_OK" = true ] && echo "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
[ "$BACKEND_OK" = true ] && echo "‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω" || echo "‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
[ "$AUTH_SERVICE_OK" = true ] && echo "‚úÖ Auth Service —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå Auth Service –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
[ "$CORS_OK" = true ] && echo "‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ" || echo "‚ùå CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
[ "$REGISTER_OK" = true ] && echo "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
[ "$LOGIN_OK" = true ] && echo "‚úÖ –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå –í—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
[ "$PROTECTED_OK" = true ] && echo "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" || echo "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"

echo ""
if [ "$PASSED_TESTS" -eq "$TOTAL_TESTS" ]; then
    echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    echo ""
    echo "üåê –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
    echo "   Frontend: $FRONTEND_URL"
    echo "   Backend API: $BACKEND_URL"
    exit 0
elif [ "$PASSED_TESTS" -ge 5 ]; then
    echo "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    exit 1
else
    echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò! –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
    [ "$FRONTEND_OK" = false ] && echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: docker-compose up -d frontend"
    [ "$BACKEND_OK" = false ] && echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: docker-compose up -d api-gateway"
    [ "$AUTH_SERVICE_OK" = false ] && echo "   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ auth service: docker-compose up -d auth-service"
    [ "$CORS_OK" = false ] && echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env.production"
    [ "$REGISTER_OK" = false ] && echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ auth service –ª–æ–≥–∏"
    [ "$LOGIN_OK" = false ] && echo "   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ auth service"
    exit 2
fi