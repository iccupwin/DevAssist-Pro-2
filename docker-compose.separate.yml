version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist-postgres
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: secure_postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist -d devassist_pro"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devassist-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devassist-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend-separate
    container_name: devassist-backend
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app/backend
      - DATABASE_URL=postgresql://devassist:secure_postgres_password@postgres:5432/devassist_pro
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=devassist_pro
      - DB_USER=devassist
      - DB_PASSWORD=secure_postgres_password
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .env.production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devassist-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend-separate
    container_name: devassist-frontend
    environment:
      - REACT_APP_API_URL=http://backend:8000
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - devassist-network

networks:
  devassist-network:
    driver: bridge

volumes:
  postgres_data: