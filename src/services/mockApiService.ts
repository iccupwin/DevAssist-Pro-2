/**
 * Mock API Service –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import { AnalysisResult, ComplianceAnalysis, KPSummary, PreliminaryRecommendation } from './apiClient';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const generateMockAnalysis = (kpName: string, companyName: string): AnalysisResult => {
  const complianceScore = Math.floor(Math.random() * 40) + 60; // 60-100%
  
  const mockCompliance: ComplianceAnalysis = {
    compliance_score: complianceScore,
    missing_requirements: [
      '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
      '–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      '–ü–ª–∞–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    ].slice(0, Math.floor(Math.random() * 3)),
    additional_features: [
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏',
      '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    ].slice(0, Math.floor(Math.random() * 3)),
    sections: [
      { name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ', compliance: complianceScore + Math.random() * 10 - 5, details: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏' },
      { name: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', compliance: complianceScore + Math.random() * 10 - 5, details: '–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è' },
      { name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', compliance: complianceScore + Math.random() * 10 - 5, details: '–ë–∞–∑–æ–≤—ã–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã' },
    ]
  };

  const mockRecommendation: PreliminaryRecommendation = {
    strength: [
      '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
      '–û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
      '–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã'
    ].slice(0, Math.floor(Math.random() * 3) + 1),
    weakness: [
      '–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
      '–î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    ].slice(0, Math.floor(Math.random() * 2)),
    summary: `${companyName} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ${complianceScore > 80 ? '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ' : '–ø—Ä–∏–µ–º–ª–µ–º–æ–µ'} —Ä–µ—à–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º ${complianceScore}% —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¢–ó.`
  };

  return {
    tz_name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞',
    kp_name: kpName,
    company_name: companyName,
    tech_stack: 'React, Node.js, PostgreSQL, Docker',
    pricing: `${Math.floor(Math.random() * 500 + 800)} —Ç—ã—Å. —Ä—É–±.`,
    timeline: `${Math.floor(Math.random() * 3 + 2)} –º–µ—Å—è—Ü–∞`,
    comparison_result: mockCompliance,
    preliminary_recommendation: mockRecommendation,
    ratings: {
      technical: Math.floor(Math.random() * 3) + 3,
      price: Math.floor(Math.random() * 3) + 3,
      timeline: Math.floor(Math.random() * 3) + 3,
      experience: Math.floor(Math.random() * 3) + 3,
    },
    comments: {
      technical: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º',
      price: '–¶–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ä—ã–Ω–∫–∞',
      timeline: '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
      experience: '–ö–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç',
    }
  };
};

const mockCompanies = [
  '–û–û–û "–¢–µ—Ö–Ω–æ–°–æ—Ñ—Ç"',
  '–û–û–û "–î–∏–¥–∂–∏—Ç–∞–ª–ü—Ä–æ"',
  '–û–û–û "–ò–Ω—Ñ–æ–°–∏—Å—Ç–µ–º—ã"',
  '–û–û–û "–ö–æ–¥–õ–∞–±"',
  '–û–û–û "–í–µ–±–°—Ç—É–¥–∏—è"',
];

export const mockApiService = {
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  async uploadFiles(files: {
    tzFile?: File;
    kpFiles?: File[];
    additionalFiles?: File[];
  }): Promise<{
    success: boolean;
    data: {
      tz_file: { filePath: string; originalName: string } | null;
      kp_files: { filePath: string; originalName: string }[];
      additional_files: { filePath: string; originalName: string }[];
    };
    error?: string;
  }> {
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
      success: true,
      data: {
        tz_file: files.tzFile ? {
          filePath: `/uploads/tz/${files.tzFile.name}`,
          originalName: files.tzFile.name
        } : null,
        kp_files: files.kpFiles?.map(file => ({
          filePath: `/uploads/kp/${file.name}`,
          originalName: file.name
        })) || [],
        additional_files: files.additionalFiles?.map(file => ({
          filePath: `/uploads/additional/${file.name}`,
          originalName: file.name
        })) || []
      }
    };
  },

  // –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ö–ü
  async analyzeKP(
    tzFile: string,
    kpFile: string,
    additionalFiles?: string[],
    modelId?: string
  ): Promise<{ success: boolean; data: AnalysisResult; error?: string }> {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ API
    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));
    
    const kpName = `–ö–ü_${Math.floor(Math.random() * 100)}.pdf`;
    const companyName = mockCompanies[Math.floor(Math.random() * mockCompanies.length)];
    
    return {
      success: true,
      data: generateMockAnalysis(kpName, companyName)
    };
  },

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ö–ü
  async compareAllKP(
    analysisResults: AnalysisResult[],
    modelId?: string
  ): Promise<{ success: boolean; data: string; error?: string }> {
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const sorted = [...analysisResults].sort((a, b) => 
      b.comparison_result.compliance_score - a.comparison_result.compliance_score
    );

    const comparisonText = `
## üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

### üèÜ –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:

${sorted.map((result, index) => `
**${index + 1}. ${result.company_name}**
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó: ${result.comparison_result.compliance_score}%
- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.pricing}
- –°—Ä–æ–∫–∏: ${result.timeline}
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${result.tech_stack}

*–ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞:* ${result.preliminary_recommendation.summary}
`).join('\n')}

### üìã –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã:

- –õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: **${sorted[0].company_name}** —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º ${sorted[0].comparison_result.compliance_score}%
- –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${Math.round(sorted.reduce((sum, r) => sum + parseInt(r.pricing.replace(/\D/g, '')), 0) / sorted.length)} —Ç—ã—Å. —Ä—É–±.
- –°—Ä–µ–¥–Ω–∏–µ —Å—Ä–æ–∫–∏: ${Math.round(sorted.reduce((sum, r) => sum + parseInt(r.timeline.replace(/\D/g, '')), 0) / sorted.length)} –º–µ—Å—è—Ü–µ–≤

### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

1. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞**: –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏
2. **–ë—é–¥–∂–µ—Ç**: –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞ —Å –ª–∏–¥–∏—Ä—É—é—â–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏
3. **–°—Ä–æ–∫–∏**: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫
    `;

    return {
      success: true,
      data: comparisonText
    };
  },

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async generateReport(
    analysisResults: AnalysisResult[],
    modelId?: string
  ): Promise<{ success: boolean; data: string; error?: string }> {
    await new Promise(resolve => setTimeout(resolve, 4000));

    const bestResult = analysisResults.reduce((best, current) => 
      current.comparison_result.compliance_score > best.comparison_result.compliance_score ? current : best
    );

    const reportText = `
# üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

## üéØ –¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞
–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø–æ—Ä—Ç–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é.

## üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ **${analysisResults.length}** –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.

## üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ

### ${bestResult.company_name}
- **–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó:** ${bestResult.comparison_result.compliance_score}%
- **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${bestResult.pricing}
- **–°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:** ${bestResult.timeline}
- **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:** ${bestResult.tech_stack}

### –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
${bestResult.preliminary_recommendation.strength.map(s => `- ${s}`).join('\n')}

### –†–∏—Å–∫–∏:
${bestResult.preliminary_recommendation.weakness.map(w => `- ${w}`).join('\n')}

## üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑

### –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
1. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ** (40%)
2. **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏** (25%)
3. **–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è** (20%)
4. **–û–ø—ã—Ç –∫–æ–º–∞–Ω–¥—ã** (15%)

### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º:
${analysisResults.map((result, index) => `
#### ${index + 1}. ${result.company_name}
- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${result.comparison_result.compliance_score}%
- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.pricing}
- –°—Ä–æ–∫: ${result.timeline}
- –ó–∞–º–µ—á–∞–Ω–∏—è: ${result.preliminary_recommendation.summary}
`).join('\n')}

## üéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:** –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${bestResult.company_name} –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø—Ä–æ–µ–∫—Ç–∞.

2. **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
   - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∫–æ–º–∞–Ω–¥–æ–π
   - –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Ä–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
   - –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –ø–ª–∞–Ω –ø–æ—ç—Ç–∞–ø–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   - –ó–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏

3. **–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤:**
   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
   - –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å —à—Ç—Ä–∞—Ñ–Ω—ã–µ —Å–∞–Ω–∫—Ü–∏–∏ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤
   - –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–¥–∞

---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI-–∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤*
    `;

    return {
      success: true,
      data: reportText
    };
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
  async checkHealth(): Promise<{ status: string; timestamp: string }> {
    await new Promise(resolve => setTimeout(resolve, 500));
    return {
      status: 'ok',
      timestamp: new Date().toISOString()
    };
  }
};