#!/bin/bash

# Unified DevAssist Pro Deployment - Backend + Frontend
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ backend API, –∏ frontend –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üöÄ –ó–∞–ø—É—Å–∫ Unified DevAssist Pro Deployment - Backend + Frontend"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down --remove-orphans 2>/dev/null || true
docker stop $(docker ps -aq) 2>/dev/null || true

# –°–æ–∑–¥–∞–Ω–∏–µ unified docker-compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log "–°–æ–∑–¥–∞–Ω–∏–µ unified deployment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cat > docker-compose.unified.yml << 'EOF'
services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_unified
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - devassist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_unified
    command: redis-server --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - devassist-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.monolith
    container_name: devassist_backend_unified
    ports:
      - "8000:8000"  # Backend API –Ω–∞ –ø–æ—Ä—Ç—É 8000
    environment:
      # Database Configuration
      POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      
      # Redis Configuration
      REDIS_URL: redis://:redis_password@redis:6379/0
      
      # Application Settings
      DEBUG: false
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      
      # CORS Settings - —Ä–∞–∑—Ä–µ—à–∞–µ–º frontend –Ω–∞ –ø–æ—Ä—Ç—É 3000
      ALLOWED_ORIGINS: http://46.149.71.162,http://46.149.71.162:3000,http://localhost:3000,http://frontend:3000
      
      # File Upload Settings
      MAX_FILE_SIZE: 50MB
      SUPPORTED_FORMATS: pdf,docx,txt
      
      # AI Provider API Keys
      ANTHROPIC_API_KEY: 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
      OPENAI_API_KEY: ${OPENAI_API_KEY:-dummy_key}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-dummy_key}
      USE_REAL_API: true
      
      # Server Configuration
      HOST: 0.0.0.0
      PORT: 8000
      
    volumes:
      - app_data:/app/data
    networks:
      - devassist-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devassist_frontend_unified
    ports:
      - "3000:3000"  # Frontend –Ω–∞ –ø–æ—Ä—Ç—É 3000
    environment:
      # API URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      REACT_APP_API_URL: http://46.149.71.162:8000
      REACT_APP_WS_URL: ws://46.149.71.162:8000/ws
      REACT_APP_ENVIRONMENT: production
      NODE_ENV: development  # –ò—Å–ø–æ–ª—å–∑—É–µ–º development mode –¥–ª—è live reload
      CHOKIDAR_USEPOLLING: true
      WATCHPACK_POLLING: true
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package.json:/app/package.json:ro
    networks:
      - devassist-network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  nginx:
    image: nginx:alpine
    container_name: devassist_nginx_unified
    ports:
      - "80:80"  # –ì–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç 80
    volumes:
      - ./nginx/unified.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - devassist-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

networks:
  devassist-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è unified deployment
log "–°–æ–∑–¥–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
mkdir -p nginx
cat > nginx/unified.conf << 'EOF'
server {
    listen 80;
    server_name 46.149.71.162 localhost;

    # Frontend - –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –Ω–∞ React dev server
    location / {
        proxy_pass http://frontend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Hot reload support
        proxy_read_timeout 86400;
    }

    # Backend API
    location /api/ {
        proxy_pass http://backend:8000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # WebSocket support
    location /ws/ {
        proxy_pass http://backend:8000/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check
    location /health {
        proxy_pass http://backend:8000/health;
        proxy_set_header Host $host;
    }
}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ Dockerfile –¥–ª—è frontend –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if [ ! -f "./frontend/Dockerfile" ]; then
    log "–°–æ–∑–¥–∞–Ω–∏–µ Dockerfile –¥–ª—è frontend..."
    cat > frontend/Dockerfile << 'EOF'
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Expose port
EXPOSE 3000

# Start development server
CMD ["npm", "start"]
EOF
fi

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "–ó–∞–ø—É—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
docker compose -f docker-compose.unified.yml up -d postgres redis

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
sleep 20

# –ó–∞–ø—É—Å–∫–∞–µ–º backend
log "–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–∏—Å–∞..."
docker compose -f docker-compose.unified.yml up -d backend

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend
log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend..."
sleep 15

# –ó–∞–ø—É—Å–∫–∞–µ–º frontend
log "–ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–∏—Å–∞..."
docker compose -f docker-compose.unified.yml up -d frontend

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend
log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend..."
sleep 20

# –ó–∞–ø—É—Å–∫–∞–µ–º nginx
log "–ó–∞–ø—É—Å–∫ Nginx reverse proxy..."
docker compose -f docker-compose.unified.yml up -d nginx

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose -f docker-compose.unified.yml ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ backend:"
docker compose -f docker-compose.unified.yml logs --tail=10 backend

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ frontend:"
docker compose -f docker-compose.unified.yml logs --tail=10 frontend

# Health checks
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
if curl -f -s "http://localhost:8000/health" > /dev/null 2>&1; then
    info "‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000"
else
    warning "‚ö†Ô∏è  Backend –Ω–∞ –ø–æ—Ä—Ç—É 8000 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    docker compose -f docker-compose.unified.yml logs backend | tail -5
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
if curl -f -s "http://localhost:3000" > /dev/null 2>&1; then
    info "‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000"
else
    warning "‚ö†Ô∏è  Frontend –Ω–∞ –ø–æ—Ä—Ç—É 3000 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    docker compose -f docker-compose.unified.yml logs frontend | tail -5
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
if curl -f -s "http://localhost/" > /dev/null 2>&1; then
    info "‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 80"
else
    warning "‚ö†Ô∏è  Nginx –Ω–∞ –ø–æ—Ä—Ç—É 80 –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    docker compose -f docker-compose.unified.yml logs nginx | tail -5
fi

# –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
log "üéâ Unified Deployment –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo
info "üìç –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:"
info "   üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç:    http://46.149.71.162/      (—á–µ—Ä–µ–∑ Nginx)"
info "   ‚öõÔ∏è  Frontend –ø—Ä—è–º–æ:   http://46.149.71.162:3000/ (React dev server)"
info "   üîß Backend API:      http://46.149.71.162:8000/ (FastAPI)"
info "   ‚ù§Ô∏è  Health check:    http://46.149.71.162:8000/health"
echo
info "üê≥ –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
docker compose -f docker-compose.unified.yml ps
echo
info "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
echo
info "üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
info "   –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏:     docker compose -f docker-compose.unified.yml logs -f"
info "   –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:          docker compose -f docker-compose.unified.yml down"
info "   –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å:       docker compose -f docker-compose.unified.yml restart"
info "   –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å:         docker compose -f docker-compose.unified.yml up -d --build"
echo

log "‚ú® –¢–µ–ø–µ—Ä—å —É –≤–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç –ò backend –ò frontend –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!"
info "Backend API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://46.149.71.162:8000"
info "Frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://46.149.71.162:3000"
info "Unified –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Nginx –Ω–∞ http://46.149.71.162"