# DevAssist Pro - Unified Docker Compose для production deployment
# Объединяет backend, frontend и nginx в единой конфигурации

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: devassist_postgres_unified
    environment:
      POSTGRES_DB: devassist_pro
      POSTGRES_USER: devassist
      POSTGRES_PASSWORD: devassist_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devassist"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # Кеш Redis
  redis:
    image: redis:7-alpine
    container_name: devassist_redis_unified
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # Backend API - базовая конфигурация из monolith
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.monolith
    container_name: devassist_backend_unified
    environment:
      # База данных
      POSTGRES_URL: postgresql://devassist:devassist_password@postgres:5432/devassist_pro
      
      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      
      # Настройки приложения
      DEBUG: false
      LOG_LEVEL: INFO
      ENVIRONMENT: production
      
      # CORS - разрешаем nginx и frontend
      ALLOWED_ORIGINS: http://localhost,http://localhost:80,http://frontend
      
      # Файлы
      MAX_FILE_SIZE: 100MB
      SUPPORTED_FORMATS: pdf,docx,txt
      
      # AI Provider API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      USE_REAL_API: true
      
      # Дополнительные настройки для unified deployment
      HOST: 0.0.0.0
      PORT: 8000
      
    volumes:
      - app_data:/app/data
      - ./backend/data/uploads:/app/uploads
      - ./backend/data/reports:/app/reports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network
    # Expose не нужен, так как доступ только через nginx

  # Frontend - production build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: devassist_frontend_unified
    environment:
      # Frontend environment для nginx конфигурации
      NGINX_HOST: localhost
      NGINX_PORT: 80
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network
    # Expose не нужен, так как доступ только через nginx

  # Nginx - Reverse Proxy + Static Files
  nginx:
    image: nginx:alpine
    container_name: devassist_nginx_unified
    ports:
      - "8080:80"  # Изменен порт чтобы избежать конфликта с существующим веб-сервером
      - "8443:443"  # Для будущей SSL поддержки
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl  # Для SSL сертификатов
      - nginx_logs:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - devassist_network

  # Monitoring - Опциональный сервис для мониторинга
  monitoring:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: devassist_monitoring_unified
    command:
      - -nginx.scrape-uri=http://nginx:80/nginx_status
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    restart: unless-stopped
    networks:
      - devassist_network
    profiles:
      - monitoring  # Запускается только при указании профиля

# Volumes для persistent data
volumes:
  postgres_data:
    driver: local
    name: devassist_postgres_data
  redis_data:
    driver: local 
    name: devassist_redis_data
  app_data:
    driver: local
    name: devassist_app_data
  nginx_logs:
    driver: local
    name: devassist_nginx_logs
  nginx_cache:
    driver: local
    name: devassist_nginx_cache

# Networks для изоляции сервисов
networks:
  devassist_network:
    driver: bridge
    name: devassist_unified_network
    ipam:
      config:
        - subnet: 172.20.0.0/16