# Frontend Production Dockerfile для DevAssist Pro
# Оптимизированная сборка для Ubuntu 22.04 production

FROM node:18-alpine AS builder

# Установка зависимостей для оптимизации
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Копирование package files
COPY package*.json ./

# Установка зависимостей
RUN npm ci --only=production --silent

# Копирование исходного кода
COPY . .

# Создание production build
ARG REACT_APP_API_URL=http://46.149.71.162/api
ARG REACT_APP_WS_URL=ws://46.149.71.162/ws
ARG REACT_APP_USE_REAL_API=true

ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_WS_URL=$REACT_APP_WS_URL
ENV REACT_APP_USE_REAL_API=$REACT_APP_USE_REAL_API
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false

# Оптимизированная сборка
RUN npm run build

# Production stage - только статические файлы
FROM nginx:alpine AS production

# Установка инструментов для healthcheck
RUN apk add --no-cache curl

# Удаление дефолтных файлов nginx
RUN rm -rf /usr/share/nginx/html/*

# Копирование собранного приложения
COPY --from=builder /app/build /usr/share/nginx/html

# Создание nginx конфигурации для SPA
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # SPA routing - все запросы отправляем на index.html
    location / {
        try_files $uri $uri/ /index.html;
        
        # No caching for index.html
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Health check endpoint
    location /frontend-health {
        access_log off;
        return 200 "Frontend OK\n";
        add_header Content-Type text/plain;
    }
}
EOF

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/frontend-health || exit 1

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]