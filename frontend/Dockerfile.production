# Frontend Dockerfile для production build
# Multi-stage build для оптимизации размера образа

# Stage 1: Build React приложения
FROM node:18-alpine AS builder

# Установка зависимостей для native modules
RUN apk add --no-cache python3 make g++

# Рабочая директория
WORKDIR /app

# Копируем package files для кэширования зависимостей
COPY package*.json ./

# Устанавливаем зависимости
RUN npm ci --silent

# Копируем исходный код
COPY . .

# Переменные окружения для production build
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_API_URL=/api
ENV REACT_APP_WS_URL=/ws

# Сборка production версии
RUN npm run build

# Stage 2: Production образ с Nginx
FROM nginx:alpine AS production

# Установка дополнительных утилит
RUN apk add --no-cache curl

# Удаляем дефолтную конфигурацию Nginx
RUN rm /etc/nginx/conf.d/default.conf

# Копируем production build
COPY --from=builder /app/build /usr/share/nginx/html

# Копируем кастомную конфигурацию Nginx (создадим отдельно)
COPY nginx.frontend.conf /etc/nginx/conf.d/default.conf

# Создаем директории для логов
RUN mkdir -p /var/log/nginx

# Создаем health check endpoint
RUN echo '{"status":"healthy","service":"frontend","timestamp":"'$(date -Iseconds)'"}' > /usr/share/nginx/html/health

# Выставляем порт
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Запускаем Nginx
CMD ["nginx", "-g", "daemon off;"]