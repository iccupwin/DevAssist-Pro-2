/**
 * Currency and Budget Extraction Utilities - DevAssist Pro
 * üí∞ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º –∏ –≤–∞–ª—é—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 * 
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —á–∏—Å–µ–ª –∏ –≤–∞–ª—é—Ç
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
 * - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤ –∏–∑ –¢–ó –∏ –ö–ü
 * - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export interface CurrencyAmount {
  amount: number;
  currency: string;
  formatted: string;
  position: number;
}

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç
const CURRENCY_PATTERNS = {
  // –†—É–±–ª–∏
  RUB: /(?:—Ä—É–±\.?|—Ä—É–±–ª–µ–π?|‚ÇΩ|RUB)/gi,
  // –î–æ–ª–ª–∞—Ä—ã
  USD: /(?:\$|USD|–¥–æ–ª–ª–∞—Ä[–∞-—è]*)/gi,
  // –ï–≤—Ä–æ
  EUR: /(?:‚Ç¨|EUR|–µ–≤—Ä–æ)/gi,
  // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ
  KZT: /(?:‚Ç∏|—Ç–µ–Ω–≥–µ|KZT)/gi,
  // –ö–∏—Ä–≥–∏–∑—Å–∫–∏–π —Å–æ–º
  KGS: /(?:—Å–æ–º[–∞-—è]*|KGS)/gi,
};

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
const NUMBER_PATTERNS = [
  // –§–æ—Ä–º–∞—Ç: 1 000 000 –∏–ª–∏ 1,000,000
  /(\d{1,3}(?:[,\s]\d{3})+)/g,
  // –§–æ—Ä–º–∞—Ç: 1000000
  /(\d{4,})/g,
  // –§–æ—Ä–º–∞—Ç —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏: 1,500.50 –∏–ª–∏ 1 500,50
  /(\d{1,3}(?:[,\s]\d{3})*[.,]\d{1,2})/g,
];

// –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±—é–¥–∂–µ—Ç–∞/—Å—Ç–æ–∏–º–æ—Å—Ç–∏
const BUDGET_KEYWORDS = [
  '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
  '—Ü–µ–Ω–∞',
  '–±—é–¥–∂–µ—Ç',
  '–∑–∞—Ç—Ä–∞—Ç[—ã]?',
  '—Ä–∞—Å—Ö–æ–¥[—ã]?',
  '—Å—É–º–º–∞',
  'cost',
  'price',
  'budget',
  'amount',
  '–≤—Å–µ–≥–æ',
  '–∏—Ç–æ–≥–æ',
  '–æ–±—â–∞—è',
  '–ø–æ–ª–Ω–∞—è',
  '–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è'
];

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const BUDGET_CONTEXT_PATTERN = new RegExp(
  `(?:${BUDGET_KEYWORDS.join('|')})[:\\s-]*(?:—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç|—Ä–∞–≤–Ω–∞|—Ä–∞–≤–µ–Ω|is|equals?)?[:\\s-]*`,
  'gi'
);

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–∞
 */
export const normalizeNumber = (numberStr: string): number => {
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
  let normalized = numberStr.trim();
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø—É—Å—Ç–æ—Ç—É (–¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ 1 000 000)
  normalized = normalized.replace(/\s/g, '');
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
  if (normalized.includes(',') && !normalized.includes('.')) {
    // –ï—Å–ª–∏ –∑–∞–ø—è—Ç–∞—è –æ–¥–Ω–∞ –∏ –ø–æ—Å–ª–µ –Ω–µ—ë 1-2 —Ü–∏—Ñ—Ä—ã - —ç—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    const commaCount = (normalized.match(/,/g) || []).length;
    if (commaCount === 1 && normalized.match(/,\d{1,2}$/)) {
      normalized = normalized.replace(',', '.');
    } else {
      // –ò–Ω–∞—á–µ –∑–∞–ø—è—Ç—ã–µ - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á
      normalized = normalized.replace(/,/g, '');
    }
  }
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø—è—Ç—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ (—Ñ–æ—Ä–º–∞—Ç 1,000.50)
  if (normalized.includes('.')) {
    normalized = normalized.replace(/,/g, '');
  }
  
  return parseFloat(normalized) || 0;
};

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É
 */
export const detectCurrency = (text: string, position: number = 0, windowSize: number = 50): string => {
  // –ò—â–µ–º –≤–∞–ª—é—Ç—É –≤ –æ–∫–Ω–µ –≤–æ–∫—Ä—É–≥ –ø–æ–∑–∏—Ü–∏–∏
  const start = Math.max(0, position - windowSize);
  const end = Math.min(text.length, position + windowSize);
  const window = text.substring(start, end);
  
  for (const [currency, pattern] of Object.entries(CURRENCY_PATTERNS)) {
    if (pattern.test(window)) {
      return currency;
    }
  }
  
  return 'RUB'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É–±–ª–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç–Ω–æ–π —Å—É–º–º—ã
 */
export const formatCurrency = (amount: number, currency: string): string => {
  const currencySymbols: Record<string, string> = {
    'RUB': '‚ÇΩ',
    'USD': '$',
    'EUR': '‚Ç¨',
    'KZT': '‚Ç∏',
    'KGS': '—Å–æ–º'
  };

  const symbol = currencySymbols[currency] || currency;
  
  return new Intl.NumberFormat('ru-RU', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount) + ' ' + symbol;
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞–ª—é—Ç–Ω—ã—Ö —Å—É–º–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
 */
export const extractCurrencyAmounts = (text: string): CurrencyAmount[] => {
  const results: CurrencyAmount[] = [];
  
  // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º —á–∏—Å–µ–ª
  for (const pattern of NUMBER_PATTERNS) {
    let match;
    const patternCopy = new RegExp(pattern.source, pattern.flags);
    
    while ((match = patternCopy.exec(text)) !== null) {
      const numberStr = match[1];
      const amount = normalizeNumber(numberStr);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –±—é–¥–∂–µ—Ç)
      if (amount < 1000) continue;
      
      const position = match.index;
      const currency = detectCurrency(text, position);
      const formatted = formatCurrency(amount, currency);
      
      results.push({
        amount,
        currency,
        formatted,
        position
      });
    }
  }
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—É–º–º—ã
  const uniqueResults = results.filter((item, index, arr) => 
    arr.findIndex(other => 
      Math.abs(other.amount - item.amount) < 100 && other.currency === item.currency
    ) === index
  );
  
  return uniqueResults.sort((a, b) => b.amount - a.amount);
};

/**
 * –ü–æ–∏—Å–∫ –±—é–¥–∂–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
export const extractBudgetFromContext = (text: string): CurrencyAmount | null => {
  const allAmounts = extractCurrencyAmounts(text);
  if (allAmounts.length === 0) return null;
  
  // –ò—â–µ–º —Å—É–º–º—ã —Ä—è–¥–æ–º —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –±—é–¥–∂–µ—Ç–∞
  const budgetContextMatches: Array<{amount: CurrencyAmount, score: number}> = [];
  
  let match;
  const contextPattern = new RegExp(BUDGET_CONTEXT_PATTERN.source, BUDGET_CONTEXT_PATTERN.flags);
  
  while ((match = contextPattern.exec(text)) !== null) {
    const contextPos = match.index;
    
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å—É–º–º—É –∫ —ç—Ç–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    for (const amount of allAmounts) {
      const distance = Math.abs(amount.position - contextPos);
      
      // –ï—Å–ª–∏ —Å—É–º–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (distance <= 200) {
        const score = Math.max(0, 200 - distance) + amount.amount / 1000000; // –ë–æ–Ω—É—Å –∑–∞ –±–æ–ª—å—à—É—é —Å—É–º–º—É
        budgetContextMatches.push({ amount, score });
      }
    }
  }
  
  if (budgetContextMatches.length > 0) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É —Å –ª—É—á—à–∏–º score
    budgetContextMatches.sort((a, b) => b.score - a.score);
    return budgetContextMatches[0].amount;
  }
  
  // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à—É—é —Å—É–º–º—É
  return allAmounts[0] || null;
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ –¢–ó
 */
export const extractTZBudget = (tzText: string): CurrencyAmount | null => {
  if (!tzText) return null;
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –¢–ó –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const tzSpecificPatterns = [
    /–±—é–¥–∂–µ—Ç[–∞-—è]*\s*–ø—Ä–æ–µ–∫—Ç–∞?[:\s-]*([^.;!?]*)/gi,
    /–ø–ª–∞–Ω–∏—Ä—É–µ–º[–∞-—è]*\s*–±—é–¥–∂–µ—Ç[:\s-]*([^.;!?]*)/gi,
    /–≤—ã–¥–µ–ª–µ–Ω[–∞-—è]*\s*—Å—Ä–µ–¥—Å—Ç–≤?[–∞-—è]*[:\s-]*([^.;!?]*)/gi,
    /–ª–∏–º–∏—Ç[–∞-—è]*\s*–∑–∞—Ç—Ä–∞—Ç[:\s-]*([^.;!?]*)/gi,
  ];
  
  // –ò—â–µ–º –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  for (const pattern of tzSpecificPatterns) {
    let match;
    while ((match = pattern.exec(tzText)) !== null) {
      const context = match[1];
      const amounts = extractCurrencyAmounts(context);
      if (amounts.length > 0) {
        return amounts[0];
      }
    }
  }
  
  // Fallback –∫ –æ–±—â–µ–º—É –º–µ—Ç–æ–¥—É
  return extractBudgetFromContext(tzText);
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ –ö–ü
 */
export const extractKPBudget = (kpText: string): CurrencyAmount | null => {
  if (!kpText) return null;
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ö–ü –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const kpSpecificPatterns = [
    /–æ–±—â–∞—è\s*—Å—Ç–æ–∏–º–æ—Å—Ç—å[–∞-—è]*[:\s-]*([^.;!?]*)/gi,
    /–∏—Ç–æ–≥–æ[–≤]?[–∞-—è]*[:\s-]*([^.;!?]*)/gi,
    /–≤—Å–µ–≥–æ\s*–∫\s*–æ–ø–ª–∞—Ç–µ[:\s-]*([^.;!?]*)/gi,
    /–ø–æ–ª–Ω–∞—è\s*—Å—Ç–æ–∏–º–æ—Å—Ç—å[–∞-—è]*[:\s-]*([^.;!?]*)/gi,
    /–æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è\s*—Ü–µ–Ω–∞[:\s-]*([^.;!?]*)/gi,
  ];
  
  // –ò—â–µ–º –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  for (const pattern of kpSpecificPatterns) {
    let match;
    while ((match = pattern.exec(kpText)) !== null) {
      const context = match[1];
      const amounts = extractCurrencyAmounts(context);
      if (amounts.length > 0) {
        return amounts[0];
      }
    }
  }
  
  // Fallback –∫ –æ–±—â–µ–º—É –º–µ—Ç–æ–¥—É
  return extractBudgetFromContext(kpText);
};

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
 */
export const compareBudgets = (tzBudget: CurrencyAmount | null, kpBudget: CurrencyAmount | null) => {
  if (!tzBudget || !kpBudget) {
    return {
      deviation_amount: 0,
      deviation_percentage: 0,
      status: 'unknown' as const,
      comparable: false
    };
  }
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–µ–Ω API –∫—É—Ä—Å–æ–≤)
  const conversionRates: Record<string, number> = {
    'USD': 90, // –ö —Ä—É–±–ª—é
    'EUR': 100,
    'KZT': 0.2,
    'KGS': 1.1,
    'RUB': 1
  };
  
  const tzAmountInRub = tzBudget.amount * (conversionRates[tzBudget.currency] || 1);
  const kpAmountInRub = kpBudget.amount * (conversionRates[kpBudget.currency] || 1);
  
  const deviationAmount = kpAmountInRub - tzAmountInRub;
  const deviationPercentage = tzAmountInRub > 0 ? (deviationAmount / tzAmountInRub) * 100 : 0;
  
  const absDeviation = Math.abs(deviationPercentage);
  let status: 'excellent' | 'good' | 'warning' | 'critical';
  
  if (absDeviation <= 5) status = 'excellent';
  else if (absDeviation <= 15) status = 'good';
  else if (absDeviation <= 30) status = 'warning';
  else status = 'critical';
  
  return {
    deviation_amount: deviationAmount,
    deviation_percentage: deviationPercentage,
    status,
    comparable: true
  };
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export const extractBudgetData = (tzText: string, kpText: string) => {
  const tzBudget = extractTZBudget(tzText);
  const kpBudget = extractKPBudget(kpText);
  const comparison = compareBudgets(tzBudget, kpBudget);
  
  return {
    tz_budget: tzBudget,
    kp_budget: kpBudget,
    deviation_amount: comparison.deviation_amount,
    deviation_percentage: comparison.deviation_percentage,
    status: comparison.status,
    comparable: comparison.comparable
  };
};