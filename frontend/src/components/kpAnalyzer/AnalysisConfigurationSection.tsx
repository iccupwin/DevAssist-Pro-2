/**
 * –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
 */

import React from 'react';
import { Settings, Brain, Zap, ChevronLeft } from 'lucide-react';
import { AIModelConfig, TechnicalSpecification, CommercialProposal } from '../../types/kpAnalyzer';

interface AnalysisConfigurationSectionProps {
  selectedModels: {
    analysis: string;
    comparison: string;
  };
  availableModels: AIModelConfig[];
  technicalSpec: TechnicalSpecification | null;
  commercialProposals: CommercialProposal[];
  onUpdateModelSelection: (type: 'analysis' | 'comparison', modelId: string) => void;
  onStartAnalysis: () => void;
  onGoBack: () => void;
  canStartAnalysis: boolean;
  isProcessing: boolean;
}

const AnalysisConfigurationSection: React.FC<AnalysisConfigurationSectionProps> = ({
  selectedModels,
  availableModels,
  technicalSpec,
  commercialProposals,
  onUpdateModelSelection,
  onStartAnalysis,
  onGoBack,
  canStartAnalysis,
  isProcessing,
}) => {
  const getModelIcon = (provider: string) => {
    switch (provider) {
      case 'anthropic':
        return 'ü§ñ';
      case 'openai':
        return 'üß†';
      case 'google':
        return '‚ö°';
      default:
        return 'üî¨';
    }
  };

  const getProviderColor = (provider: string) => {
    switch (provider) {
      case 'anthropic':
        return 'text-purple-400';
      case 'openai':
        return 'text-green-400';
      case 'google':
        return 'text-blue-400';
      default:
        return 'text-gray-400';
    }
  };

  const renderModelSelector = (
    title: string,
    description: string,
    type: 'analysis' | 'comparison',
    selectedModelId: string
  ) => (
    <div className="bg-gray-800 border border-gray-700 rounded-lg p-6">
      <h3 className="text-lg font-medium text-white mb-2">{title}</h3>
      <p className="text-gray-400 text-sm mb-4">{description}</p>
      
      <div className="space-y-3">
        {availableModels.map((model) => (
          <label
            key={model.id}
            className={`flex items-center p-3 rounded-lg border cursor-pointer transition-colors ${
              selectedModelId === model.id
                ? 'border-blue-500 bg-blue-500/10'
                : 'border-gray-600 hover:border-gray-500'
            }`}
          >
            <input
              type="radio"
              name={`model-${type}`}
              value={model.id}
              checked={selectedModelId === model.id}
              onChange={() => onUpdateModelSelection(type, model.id)}
              className="sr-only"
            />
            <div className="flex items-center space-x-3 flex-1">
              <span className="text-2xl">{getModelIcon(model.provider)}</span>
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <span className="text-white font-medium">{model.name}</span>
                  {!model.available && (
                    <span className="text-xs bg-gray-700 text-gray-300 px-2 py-1 rounded">
                      –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    </span>
                  )}
                </div>
                <div className="flex items-center space-x-4 text-sm text-gray-400 mt-1">
                  <span className={getProviderColor(model.provider)}>
                    {model.provider.toUpperCase()}
                  </span>
                  <span>Temp: {model.temperature}</span>
                  <span>Max tokens: {model.maxTokens}</span>
                </div>
              </div>
            </div>
            {selectedModelId === model.id && (
              <div className="w-5 h-5 bg-blue-500 rounded-full flex items-center justify-center">
                <div className="w-2 h-2 bg-white rounded-full" />
              </div>
            )}
          </label>
        ))}
      </div>
    </div>
  );

  return (
    <div className="space-y-8">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      <div className="flex items-center space-x-3">
        <Settings className="w-6 h-6 text-blue-400" />
        <h2 className="text-xl font-semibold text-white">
          –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        </h2>
      </div>

      {/* –û–±–∑–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="bg-gray-900 border border-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-medium text-white mb-4">–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 className="text-sm font-medium text-gray-300 mb-2">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h4>
            {technicalSpec ? (
              <div className="bg-gray-800 border border-gray-700 rounded p-3">
                <div className="text-white font-medium">{technicalSpec.name}</div>
                <div className="text-sm text-gray-400">
                  {(technicalSpec.size / 1024 / 1024).toFixed(2)} –ú–ë ‚Ä¢ {technicalSpec.type.toUpperCase()}
                </div>
              </div>
            ) : (
              <div className="text-gray-500">–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</div>
            )}
          </div>
          
          <div>
            <h4 className="text-sm font-medium text-gray-300 mb-2">
              –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({commercialProposals.length})
            </h4>
            <div className="space-y-2 max-h-32 overflow-y-auto">
              {commercialProposals.map((kp) => (
                <div key={kp.id} className="bg-gray-800 border border-gray-700 rounded p-2">
                  <div className="text-white text-sm font-medium truncate">{kp.name}</div>
                  <div className="text-xs text-gray-400">
                    {(kp.size / 1024 / 1024).toFixed(2)} –ú–ë
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –ò–ò */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {renderModelSelector(
          '–ú–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
          '–ò–ò –º–æ–¥–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –ö–ü –æ—Ç–¥–µ–ª—å–Ω–æ',
          'analysis',
          selectedModels.analysis
        )}
        
        {renderModelSelector(
          '–ú–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è',
          '–ò–ò –º–æ–¥–µ–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ö–ü –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
          'comparison',
          selectedModels.comparison
        )}
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
      <div className="bg-gray-900 border border-gray-800 rounded-lg p-6">
        <h3 className="text-lg font-medium text-white mb-4">–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <label className="flex items-center space-x-3">
            <input 
              type="checkbox" 
              defaultChecked 
              className="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-gray-300">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ</span>
          </label>
          <label className="flex items-center space-x-3">
            <input 
              type="checkbox" 
              defaultChecked 
              className="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-gray-300">–¶–µ–Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</span>
          </label>
          <label className="flex items-center space-x-3">
            <input 
              type="checkbox" 
              defaultChecked 
              className="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-gray-300">–°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</span>
          </label>
          <label className="flex items-center space-x-3">
            <input 
              type="checkbox" 
              defaultChecked 
              className="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-gray-300">–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã</span>
          </label>
          <label className="flex items-center space-x-3">
            <input 
              type="checkbox" 
              defaultChecked 
              className="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-gray-300">–û–ø—ã—Ç –∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</span>
          </label>
          <label className="flex items-center space-x-3">
            <input 
              type="checkbox" 
              defaultChecked 
              className="rounded border-gray-600 text-blue-600 focus:ring-blue-500"
            />
            <span className="text-gray-300">–ì–∞—Ä–∞–Ω—Ç–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</span>
          </label>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ */}
      <div className="bg-blue-900/20 border border-blue-700 rounded-lg p-6">
        <div className="flex items-start space-x-3">
          <Brain className="w-6 h-6 text-blue-400 mt-1" />
          <div>
            <h3 className="text-lg font-medium text-blue-300 mb-2">–ü—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞</h3>
            <ul className="text-blue-200 text-sm space-y-1">
              <li>‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</li>
              <li>‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ö–ü –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏–∑ –¢–ó</li>
              <li>‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (0-100 –±–∞–ª–ª–æ–≤)</li>
              <li>‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</li>
              <li>‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞</li>
            </ul>
            <div className="text-blue-300 text-sm mt-3">
              <strong>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</strong> 2-5 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—ä–µ–º–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            </div>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex items-center justify-between">
        <button
          onClick={onGoBack}
          className="flex items-center space-x-2 px-4 py-2 text-gray-400 hover:text-white transition-colors"
        >
          <ChevronLeft className="w-4 h-4" />
          <span>–ù–∞–∑–∞–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ</span>
        </button>

        <button
          onClick={onStartAnalysis}
          disabled={!canStartAnalysis || isProcessing}
          className={`flex items-center space-x-3 px-8 py-3 rounded-lg font-medium transition-colors ${
            canStartAnalysis && !isProcessing
              ? 'bg-blue-600 hover:bg-blue-700 text-white'
              : 'bg-gray-700 text-gray-400 cursor-not-allowed'
          }`}
        >
          <Zap className="w-5 h-5" />
          <span>{isProcessing ? '–ó–∞–ø—É—Å–∫...' : '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑'}</span>
        </button>
      </div>
    </div>
  );
};

export default AnalysisConfigurationSection;