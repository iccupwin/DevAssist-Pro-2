/**
 * Real KP Analysis Service - –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ü
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª–æ–≥–∏–∫–µ –∏–∑ tender/src/components/analysis.py –∏ comparison_service.py
 */

import { unifiedApiClient } from '../unifiedApiClient';
import { getBackendApiUrl } from '../../config/app';
import {
  RealKPSummaryData,
  RealComparisonResult, 
  RealAnalysisResult,
  RealKPAnalysisProgress
} from '../../types/kpAnalyzer';

export interface PDFProcessingResult {
  text: string;
  filename: string;
  fileSize: number;
  pageCount?: number;
}

export interface AIAnalysisRequest {
  tzText: string;
  kpText: string;
  fileName: string;
  selectedModel: string;
  comparisonModel?: string;
}

export interface AIAnalysisResponse {
  kpSummary: RealKPSummaryData;
  comparison: RealComparisonResult;
  recommendation: string;
  confidence: number;
}

class RealKpAnalysisService {
  private readonly MAX_TEXT_LENGTH = 30000; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
  // –£–±—Ä–∞–Ω mock-—Ä–µ–∂–∏–º - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ AI –≤—ã–∑–æ–≤—ã
  private textCache = new Map<string, PDFProcessingResult>(); // –ö—ç—à –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
   */
  clearCache(): void {
    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞–Ω–∞–ª–∏–∑–∞');
    this.textCache.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  getCacheSize(): number {
    return this.textCache.size;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: PDF, DOCX, DOC, TXT
   */
  async extractTextFromPDF(file: File): Promise<PDFProcessingResult> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${file.name}_${file.size}_${file.lastModified}`;
    if (this.textCache.has(cacheKey)) {
      console.log(`üìã –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞: ${file.name}`);
      return this.textCache.get(cacheKey)!;
    }

    console.log(`üìÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${file.name} (—Ç–∏–ø: ${file.type})`);

    try {
      let extractedText = '';
      const pageCount = 1;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
      if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        extractedText = await this.readTextFile(file);
        console.log(`üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω: ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      } else if (file.type === 'application/pdf' || file.name.endsWith('.pdf')) {
        // PDF —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ API –∏–ª–∏ fallback
        extractedText = await this.extractFromPDFFile(file);
        console.log(`üìÑ PDF —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      } else if (
        file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' ||
        file.type === 'application/msword' ||
        file.name.endsWith('.docx') ||
        file.name.endsWith('.doc')
      ) {
        // DOCX/DOC —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ API –∏–ª–∏ fallback
        extractedText = await this.extractFromWordFile(file);
        console.log(`üìÑ Word —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
        console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.type}, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç`);
        extractedText = await this.readTextFile(file);
      }

      const processedResult = {
        text: extractedText || `–§–∞–π–ª: ${file.name}`,
        filename: file.name,
        fileSize: file.size,
        pageCount,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.textCache.set(cacheKey, processedResult);
      console.log(`‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ ${file.name}: ${extractedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      return processedResult;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
      
      // Fallback: —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      try {
        const text = await this.readTextFile(file);
        const fallbackResult = {
          text,
          filename: file.name,
          fileSize: file.size,
          pageCount: 1,
        };
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.textCache.set(cacheKey, fallbackResult);
        console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è ${file.name}`);
        return fallbackResult;
      } catch (fallbackError) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ ${file.name}: ${error}`);
      }
    }
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  private async readTextFile(file: File): Promise<string> {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        const text = event.target?.result as string;
        resolve(text || '');
      };
      reader.onerror = () => {
        reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
      };
      reader.readAsText(file, 'utf-8');
    });
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
   */
  private async extractFromPDFFile(file: File): Promise<string> {
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('document_type', 'kp');

      const response = await fetch(`${getBackendApiUrl()}/api/documents/upload`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      return result.data?.content || '';
    } catch (error) {
      console.error('PDF extraction via API failed:', error);
      // Fallback: —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      return await this.readTextFile(file);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Word —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ API
   */
  private async extractFromWordFile(file: File): Promise<string> {
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('document_type', 'kp');

      const response = await fetch(`${getBackendApiUrl()}/api/documents/upload`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      return result.data?.content || '';
    } catch (error) {
      console.error('Word extraction via API failed:', error);
      // Fallback: —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      return await this.readTextFile(file);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ö–ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
   * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ ai_service.extract_kp_summary_data()
   */
  async extractKPSummaryData(kpText: string, fileName: string): Promise<RealKPSummaryData> {
    const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ö–ü —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–¢–ï–ö–°–¢ –ö–ü:
${this.truncateText(kpText)}

–ò–∑–≤–ª–µ–∫–∏ –∏ –≤–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "company_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
  "tech_stack": "–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–¥—Ö–æ–¥—ã",
  "pricing": "—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã", 
  "timeline": "—Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
  "team_size": "—Ä–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
  "experience": "–æ–ø—ã—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö",
  "key_features": ["–∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1", "–∫–ª—é—á–µ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2"],
  "contact_info": "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
}

–ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–∫–∞–∂–∏ "–ù–µ —É–∫–∞–∑–∞–Ω–æ".`;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç
      const response = await fetch(`${getBackendApiUrl()}/api/llm/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          max_tokens: 1000,
          temperature: 0.1,
          model: 'claude-3-5-sonnet-20240620'
        }),
      });

      if (!response.ok) {
        throw new Error(`AI API Error: ${response.status}`);
      }

      const aiResponse = await response.json();
      const parsedData = JSON.parse(aiResponse.content);

      return {
        company_name: parsedData.company_name || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        tech_stack: parsedData.tech_stack || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        pricing: parsedData.pricing || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        timeline: parsedData.timeline || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        team_size: parsedData.team_size || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        experience: parsedData.experience || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        key_features: parsedData.key_features || [],
        contact_info: parsedData.contact_info || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      };
    } catch (error) {
      console.error('Error extracting KP summary:', error);
      return {
        company_name: '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
        tech_stack: '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è', 
        pricing: '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
        timeline: '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
      };
    }
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¢–ó –∏ –ö–ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
   * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ ai_service.compare_tz_kp()
   */
  async compareKPWithTZ(tzText: string, kpText: string): Promise<RealComparisonResult> {
    const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –°—Ä–∞–≤–Ω–∏ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ó–∞–¥–∞–Ω–∏–µ (–¢–ó) –∏ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–ö–ü) –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ö–ü —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó.

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
${this.truncateText(tzText)}

–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
${this.truncateText(kpText)}

–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—É–Ω–∫—Ç–∞–º:
1. –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ö–ü —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)
2. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
3. –ü–µ—Ä–µ—á–µ–Ω—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¢–ó, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É—á—Ç–µ–Ω—ã –≤ –ö–ü
4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –ö–ü, –Ω–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –≤ –¢–ó
5. –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "compliance_score": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "sections": [
    {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞", "compliance": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100, "details": "–ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"},
    ...
  ],
  "missing_requirements": ["—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2", ...],
  "additional_features": ["—Ñ—É–Ω–∫—Ü–∏—è 1", "—Ñ—É–Ω–∫—Ü–∏—è 2", ...],
  "risks": ["—Ä–∏—Å–∫ 1", "—Ä–∏—Å–∫ 2", ...],
  "advantages": ["–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2", ...],
  "overall_assessment": "–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö"
}`;

    try {
      const response = await fetch(`${getBackendApiUrl()}/api/llm/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          max_tokens: 2000,
          temperature: 0.1,
          model: 'claude-3-5-sonnet-20240620'
        }),
      });

      if (!response.ok) {
        throw new Error(`AI API Error: ${response.status}`);
      }

      const aiResponse = await response.json();
      const parsedData = JSON.parse(aiResponse.content);

      return {
        compliance_score: parsedData.compliance_score || 0,
        sections: parsedData.sections || [],
        missing_requirements: parsedData.missing_requirements || [],
        additional_features: parsedData.additional_features || [],
        risks: parsedData.risks || [],
        advantages: parsedData.advantages || [],
        overall_assessment: parsedData.overall_assessment || '–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω',
        strengths: parsedData.advantages || [],
        weaknesses: parsedData.risks || [],
        recommendation: this.generateRecommendation(parsedData.compliance_score || 0),
      };
    } catch (error) {
      console.error('Error comparing KP with TZ:', error);
      return {
        compliance_score: 0,
        sections: [],
        missing_requirements: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
        additional_features: [],
        risks: ['–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∏—Å–∫–∏'],
        advantages: [],
        overall_assessment: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞',
        strengths: [],
        weaknesses: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
        recommendation: 'conditional',
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ ai_service.generate_recommendation()
   */
  async generateFinalRecommendation(
    comparisonResult: RealComparisonResult,
    kpSummary: RealKPSummaryData,
    additionalNotes?: string
  ): Promise<string> {
    const prompt = `
–¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç–µ–Ω–¥–µ—Ä–∞–º —Å –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –°—Ñ–æ—Ä–º–∏—Ä—É–π –∏—Ç–æ–≥–æ–≤–æ–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:
- –û–±—â–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó: ${comparisonResult.compliance_score}%
- –ö–æ–º–ø–∞–Ω–∏—è: ${kpSummary.company_name}
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${kpSummary.tech_stack}
- –°—Ç–æ–∏–º–æ—Å—Ç—å: ${kpSummary.pricing}
- –°—Ä–æ–∫–∏: ${kpSummary.timeline}
- –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: ${comparisonResult.advantages?.join(', ')}
- –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏: ${comparisonResult.risks?.join(', ')}
- –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${comparisonResult.overall_assessment}

${additionalNotes ? `–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–ß–ê–ù–ò–Ø: ${additionalNotes}` : ''}

–°—Ñ–æ—Ä–º–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ (3-5 –∞–±–∑–∞—Ü–µ–≤) —Å —á–µ—Ç–∫–æ–π –∏—Ç–æ–≥–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π:
- "–†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –ö –î–ê–õ–¨–ù–ï–ô–®–ï–ú–£ –†–ê–°–°–ú–û–¢–†–ï–ù–ò–Æ" (–ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏)
- "–†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –° –û–ì–û–í–û–†–ö–ê–ú–ò" (–ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏)
- "–û–¢–ö–õ–û–ù–ò–¢–¨" (–ø—Ä–∏ –Ω–∏–∑–∫–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏)

–í–µ—Ä–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "detailed_conclusion": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –≤ 3-5 –∞–±–∑–∞—Ü–µ–≤",
  "final_recommendation": "–æ–¥–Ω–∞ –∏–∑ —Ç—Ä–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤—ã—à–µ",
  "key_points": ["–∫–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç 1", "–∫–ª—é—á–µ–≤–æ–π –ø—É–Ω–∫—Ç 2", ...],
  "next_steps": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"
}`;

    try {
      const response = await fetch(`${getBackendApiUrl()}/api/llm/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          max_tokens: 1500,
          temperature: 0.2,
          model: 'gpt-4o' // –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π
        }),
      });

      if (!response.ok) {
        throw new Error(`AI API Error: ${response.status}`);
      }

      const aiResponse = await response.json();
      const parsedData = JSON.parse(aiResponse.content);

      return `${parsedData.detailed_conclusion}

–ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: ${parsedData.final_recommendation}

–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:
${parsedData.key_points?.map((point: string) => `‚Ä¢ ${point}`).join('\n')}

–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
${parsedData.next_steps}`;

    } catch (error) {
      console.error('Error generating recommendation:', error);
      return `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. 
      
–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó: ${comparisonResult.compliance_score}%
- –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª—é—á–µ–Ω–∏—è.`;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ö–ü
   */
  async runFullAnalysis(
    tzFile: File,
    kpFile: File,
    selectedModel: string = 'claude-3-5-sonnet-20240620',
    onProgress?: (progress: RealKPAnalysisProgress) => void
  ): Promise<RealAnalysisResult> {
    try {
      // 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤
      onProgress?.({ stage: 'extracting', message: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤...', progress: 10 });
      
      const [tzResult, kpResult] = await Promise.all([
        this.extractTextFromPDF(tzFile),
        this.extractTextFromPDF(kpFile)
      ]);

      // 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ö–ü
      onProgress?.({ stage: 'analyzing', message: '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ö–ü...', progress: 30 });
      const kpSummary = await this.extractKPSummaryData(kpResult.text, kpFile.name);

      // 3. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¢–ó
      onProgress?.({ stage: 'comparing', message: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –¢–ó...', progress: 60 });
      const comparison = await this.compareKPWithTZ(tzResult.text, kpResult.text);

      // 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      onProgress?.({ stage: 'generating', message: '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...', progress: 80 });
      const finalRecommendation = await this.generateFinalRecommendation(comparison, kpSummary);

      onProgress?.({ stage: 'completed', message: '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', progress: 100 });

      return {
        id: `analysis_${Date.now()}`,
        tz_name: tzFile.name,
        kp_name: kpFile.name,
        company_name: kpSummary.company_name,
        tech_stack: kpSummary.tech_stack,
        pricing: kpSummary.pricing,
        timeline: kpSummary.timeline,
        summary: kpSummary,
        comparison: comparison,
        recommendation: finalRecommendation,
        created_at: new Date().toISOString(),
        model_used: selectedModel,
        confidence_score: this.calculateConfidenceScore(comparison),
      };
    } catch (error) {
      console.error('Error in full analysis:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ö–ü –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–æ–≥–æ –¢–ó (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ 3-4 —Ä–∞–∑–∞
   */
  async analyzeMultipleKP(
    tzFile: File,
    kpFiles: File[],
    selectedModel: string = 'claude-3-5-sonnet-20240620',
    onProgress?: (overall: number, current: string) => void
  ): Promise<RealAnalysisResult[]> {
    const total = kpFiles.length;
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ${total} –ö–ü –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¢–ó –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    onProgress?.(5, '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¢–ó...');
    const tzText = await this.extractTextFromPDF(tzFile);

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    const batchSize = Math.min(12, total); // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 12 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const batches: File[][] = [];
    
    for (let i = 0; i < kpFiles.length; i += batchSize) {
      batches.push(kpFiles.slice(i, i + batchSize));
    }

    const allResults: RealAnalysisResult[] = [];
    let processedCount = 0;

    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –°–ö–û–†–û–°–¢–¨: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –º–∞–ª—ã—Ö –æ–±—ä–µ–º–æ–≤
    if (total <= 6) {
      console.log(`üöÄ –ü–æ–ª–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${total} —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º AI`);
      onProgress?.(15, '–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –ö–ü...');
      
      try {
        const allPromises = kpFiles.map((kpFile, index) => 
          this.runOptimizedAnalysis(tzText.text, kpFile, selectedModel, index)
        );

        const results = await Promise.all(allPromises);
        allResults.push(...results);
        
        onProgress?.(90, `–í—Å–µ ${total} –ö–ü –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã AI –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
        // Fallback –∫ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
        return this.fallbackBatchProcessing(tzFile, kpFiles, selectedModel, onProgress, tzText);
      }
    } else {
      // –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
      for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
        const batch = batches[batchIndex];
        
        onProgress?.(
          10 + (batchIndex / batches.length) * 80, 
          `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã ${batchIndex + 1}/${batches.length} (${batch.length} —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...`
        );

        try {
          const batchPromises = batch.map((kpFile, index) => 
            this.runOptimizedAnalysis(tzText.text, kpFile, selectedModel, batchIndex * batchSize + index)
          );

          const batchResults = await Promise.all(batchPromises);
          allResults.push(...batchResults);
          
          processedCount += batch.length;
          onProgress?.(
            10 + (processedCount / total) * 80,
            `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}/${total} –ö–ü`
          );

        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ ${batchIndex + 1}:`, error);
          
          batch.forEach((kpFile, index) => {
            allResults.push(this.createErrorResult(tzFile, kpFile, selectedModel, error, batchIndex * batchSize + index));
          });
        }
      }
    }

    onProgress?.(100, `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${allResults.length} –ö–ü`);
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    
    return allResults;
  }

  /**
   * –°–£–ü–ï–†-–ë–´–°–¢–†–´–ô –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –ö–ü (–æ–¥–∏–Ω AI –≤—ã–∑–æ–≤ –¥–ª—è –≤—Å–µ–≥–æ)
   */
  private async runOptimizedAnalysis(
    tzText: string,
    kpFile: File,
    selectedModel: string,
    index: number
  ): Promise<RealAnalysisResult> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ö–ü
      const kpResult = await this.extractTextFromPDF(kpFile);

      // –ï–¥–∏–Ω—ã–π AI –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–≤–º–µ—Å—Ç–æ 2-3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
      const fullAnalysis = await this.runSinglePassAnalysis(tzText, kpResult.text, kpFile.name);

      return {
        id: `analysis_${Date.now()}_${index}`,
        tz_name: '',
        kp_name: kpFile.name,
        company_name: fullAnalysis.company_name,
        tech_stack: fullAnalysis.tech_stack,
        pricing: fullAnalysis.pricing,
        timeline: fullAnalysis.timeline,
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
        total_cost: fullAnalysis.total_cost,
        currency: fullAnalysis.currency,
        cost_breakdown: fullAnalysis.cost_breakdown,
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        competitive_advantages: fullAnalysis.competitive_advantages,
        team_expertise: fullAnalysis.team_expertise,
        methodology: fullAnalysis.methodology,
        quality_assurance: fullAnalysis.quality_assurance,
        post_launch_support: fullAnalysis.post_launch_support,
        document_quality: fullAnalysis.document_quality,
        file_format: fullAnalysis.file_format,
        summary: {
          company_name: fullAnalysis.company_name,
          tech_stack: fullAnalysis.tech_stack,
          pricing: fullAnalysis.pricing,
          timeline: fullAnalysis.timeline,
        },
        comparison: {
          compliance_score: fullAnalysis.compliance_score,
          sections: [],
          missing_requirements: fullAnalysis.missing_requirements,
          additional_features: fullAnalysis.additional_features,
          risks: fullAnalysis.risks,
          advantages: fullAnalysis.advantages,
          overall_assessment: fullAnalysis.overall_assessment,
          strengths: fullAnalysis.advantages,
          weaknesses: fullAnalysis.risks,
          recommendation: 'conditional',
        },
        recommendation: fullAnalysis.recommendation,
        created_at: new Date().toISOString(),
        model_used: selectedModel,
        confidence_score: fullAnalysis.compliance_score,
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${kpFile.name}:`, error);
      throw error;
    }
  }

  /**
   * –ï–¥–∏–Ω—ã–π AI –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–º–µ–Ω—è–µ—Ç 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–∞)
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ö–ü —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
   */
  private async runSinglePassAnalysis(tzText: string, kpText: string, fileName: string): Promise<any> {
    console.log(`ü§ñ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è ${fileName}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const fileFormat = fileName.split('.').pop()?.toLowerCase() || 'unknown';
    const formatHint = this.getFileFormatHint(fileFormat);
    
    const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–Ω–¥–µ—Ä–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 10 –ª–µ—Ç. –ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.

–í–ê–ñ–ù–û: –î–∞–Ω–Ω–æ–µ –ö–ü –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (${formatHint}), –ø–æ—ç—Ç–æ–º—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï:
${this.truncateText(tzText)}

–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï (—Ñ–∞–π–ª: ${fileName}):
${this.truncateText(kpText)}

–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó (—É—á–∏—Ç—ã–≤–∞–π –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)
2. –ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø–æ–¥—Ö–æ–¥—ã)
3. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ)
4. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Å—Ä–æ–∫–æ–≤ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (–ø–ª–∞–Ω—ã, —ç—Ç–∞–ø—ã, –∫–æ–º–∞–Ω–¥–∞)
5. –û–ø—ã—Ç –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ, –∫–µ–π—Å—ã)
6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
7. –†–∏—Å–∫–∏ –∏ –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–ü –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
- –í—ã–¥–µ–ª—è–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
- –û—Ü–µ–Ω–∏–≤–∞–π –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó, –Ω–æ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
- –£—á–∏—Ç—ã–≤–∞–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ (–±–µ–∑ markdown):
{
  "company_name": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
  "tech_stack": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π",
  "pricing": "–ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è—Ö –æ–ø–ª–∞—Ç—ã",
  "total_cost": —á–∏—Å–ª–æ - –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –±–µ–∑ –≤–∞–ª—é—Ç—ã),
  "currency": "–≤–∞–ª—é—Ç–∞ (—Ä—É–±., USD, EUR)",
  "cost_breakdown": {
    "development": —á–∏—Å–ª–æ - —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏,
    "testing": —á–∏—Å–ª–æ - —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
    "deployment": —á–∏—Å–ª–æ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è,
    "support": —á–∏—Å–ª–æ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏,
    "maintenance": —á–∏—Å–ª–æ - —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è,
    "other": —á–∏—Å–ª–æ - –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
  },
  "timeline": "–¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —ç—Ç–∞–ø–∞–º–∏ –∏ –≤–µ—Ö–∞–º–∏",
  "compliance_score": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 (–≥–¥–µ 100 = –ø–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó),
  "advantages": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 3"],
  "risks": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∏—Å–∫ 1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∏—Å–∫ 2"],
  "missing_requirements": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2"],
  "additional_features": ["–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è 1", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è 2", "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è 3"],
  "competitive_advantages": ["—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1", "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2"],
  "team_expertise": "–æ—Ü–µ–Ω–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
  "methodology": "–æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
  "quality_assurance": "–ø–æ–¥—Ö–æ–¥—ã –∫ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é",
  "post_launch_support": "—É—Å–ª–æ–≤–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞",
  "overall_assessment": "—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å",
  "recommendation": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–∏–Ω—è—Ç—å/–¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
  "document_quality": "–æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞",
  "file_format": "${fileFormat}"
}

–ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω –∏ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –≤ –æ—Ü–µ–Ω–∫–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –∞—Å–ø–µ–∫—Ç–∞—Ö, –≤–∞–∂–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ö–ü.`;

    try {
      const response = await fetch(`${getBackendApiUrl()}/api/llm/analyze`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          prompt,
          max_tokens: 2000, // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
          temperature: 0.05, // –ï—â–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          model: 'claude-3-5-sonnet-20240620'
        }),
      });

      if (!response.ok) {
        throw new Error(`AI API Error: ${response.status}`);
      }

      const aiResponse = await response.json();
      return JSON.parse(aiResponse.content);
    } catch (error) {
      console.error('Error in single-pass analysis:', error);
      return {
        company_name: fileName.replace(/\.[^/.]+$/, ''),
        tech_stack: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        pricing: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        timeline: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        compliance_score: 50,
        advantages: ['–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'],
        risks: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
        missing_requirements: ['–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'],
        additional_features: [],
        overall_assessment: '–ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω',
        recommendation: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞'
      };
    }
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ AI –≤—ã–∑–æ–≤–∞
   */
  private generateSimpleRecommendation(
    comparison: RealComparisonResult,
    kpSummary: RealKPSummaryData
  ): string {
    const score = comparison.compliance_score;
    
    if (score >= 80) {
      return `–í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó (${score}%). –ö–æ–º–ø–∞–Ω–∏—è ${kpSummary.company_name} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é.`;
    } else if (score >= 60) {
      return `–•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó (${score}%). –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${kpSummary.company_name} —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø—É–Ω–∫—Ç–∞–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å –æ–≥–æ–≤–æ—Ä–∫–∞–º–∏.`;
    } else if (score >= 40) {
      return `–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó (${score}%). –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ${kpSummary.company_name} –∏–º–µ–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏. –¢—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.`;
    } else {
      return `–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó (${score}%). –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${kpSummary.company_name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é.`;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
   */
  private createErrorResult(
    tzFile: File,
    kpFile: File,
    selectedModel: string,
    error: any,
    index: number
  ): RealAnalysisResult {
    return {
      id: `error_${Date.now()}_${index}`,
      tz_name: tzFile.name,
      kp_name: kpFile.name,
      company_name: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      tech_stack: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      pricing: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      timeline: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      summary: {
        company_name: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        tech_stack: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        pricing: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        timeline: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
      },
      comparison: {
        compliance_score: 0,
        sections: [],
        missing_requirements: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
        additional_features: [],
        risks: ['–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞'],
        advantages: [],
        overall_assessment: '–ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏',
        strengths: [],
        weaknesses: ['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
        recommendation: 'conditional',
      },
      recommendation: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ ${kpFile.name}: ${error}`,
      created_at: new Date().toISOString(),
      model_used: selectedModel,
      confidence_score: 0,
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private truncateText(text: string): string {
    return text.length > this.MAX_TEXT_LENGTH 
      ? text.substring(0, this.MAX_TEXT_LENGTH) + '...'
      : text;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ñ–∞–π–ª–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
   */
  private getFileFormatHint(fileFormat: string): string {
    switch (fileFormat) {
      case 'pdf':
        return 'PDF –¥–æ–∫—É–º–µ–Ω—Ç - –æ–±—ã—á–Ω–æ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏';
      case 'docx':
      case 'doc':
        return 'Word –¥–æ–∫—É–º–µ–Ω—Ç - –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–∏—Å–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ';
      case 'txt':
        return '—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
      default:
        return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç';
    }
  }

  private generateRecommendation(score: number): 'accept' | 'conditional' | 'reject' {
    if (score >= 75) return 'accept';
    if (score >= 50) return 'conditional';
    return 'reject';
  }

  private calculateConfidenceScore(comparison: RealComparisonResult): number {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    const sectionsScore = comparison.sections?.length > 0 ? 0.3 : 0;
    const requirementsScore = comparison.missing_requirements?.length !== undefined ? 0.2 : 0;
    const featuresScore = comparison.additional_features?.length !== undefined ? 0.2 : 0;
    const assessmentScore = comparison.overall_assessment?.length > 10 ? 0.3 : 0;
    
    return Math.round((sectionsScore + requirementsScore + featuresScore + assessmentScore) * 100);
  }

  private extractCompanyFromFileName(fileName: string): string {
    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    const nameWithoutExt = fileName.replace(/\.[^/.]+$/, '');
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–º–ø–∞–Ω–∏–π
    const patterns = [
      /(?:–ö–ü|kp)[_\s-]*(.+)/i,
      /(.+?)(?:_–∫–ø|_kp)/i,
      /–∫–æ–º–ø–∞–Ω–∏—è[_\s-]*(.+)/i,
      /(.+?)(?:_–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)/i
    ];
    
    for (const pattern of patterns) {
      const match = nameWithoutExt.match(pattern);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    
    // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
    const words = nameWithoutExt.split(/[\s_-]+/);
    return words.slice(0, 2).join(' ') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è';
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π
   */
  private async fallbackBatchProcessing(
    tzFile: File,
    kpFiles: File[],
    selectedModel: string,
    onProgress?: (overall: number, current: string) => void,
    tzText?: PDFProcessingResult
  ): Promise<RealAnalysisResult[]> {
    console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∫ fallback –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ');
    
    const results: RealAnalysisResult[] = [];
    const total = kpFiles.length;
    
    for (let i = 0; i < total; i++) {
      const kpFile = kpFiles[i];
      onProgress?.((i / total) * 100, `Fallback: –∞–Ω–∞–ª–∏–∑ ${i + 1}/${total}: ${kpFile.name}`);
      
      try {
        if (!tzText) {
          tzText = await this.extractTextFromPDF(tzFile);
        }
        const result = await this.runOptimizedAnalysis(tzText.text, kpFile, selectedModel, i);
        results.push(result);
      } catch (error) {
        results.push(this.createErrorResult(tzFile, kpFile, selectedModel, error, i));
      }
    }
    
    return results;
  }
}

export const realKpAnalysisService = new RealKpAnalysisService();
export default realKpAnalysisService;