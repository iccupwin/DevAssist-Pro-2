/**
 * Activity Service - API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –°–æ–≥–ª–∞—Å–Ω–æ –¢–ó DevAssist Pro
 */

import { Activity, ActivityFeedRequest, ActivityFeedResponse, ActivityType } from '../types/shared';
import { apiClient } from './apiClient';

export class ActivityService {
  private baseUrl = '/activity';

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª–µ–Ω—Ç—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getActivityFeed(params: ActivityFeedRequest = {}): Promise<ActivityFeedResponse> {
    try {
      const response = await apiClient.get<ActivityFeedResponse>(this.baseUrl, params);
      return response.data;
    } catch (error) {
      console.error('Error fetching activity feed:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      return this.getMockActivityFeed(params);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async getProjectActivity(projectId: number, params: ActivityFeedRequest = {}): Promise<ActivityFeedResponse> {
    try {
      const response = await apiClient.get<ActivityFeedResponse>(`${this.baseUrl}/project/${projectId}`, params);
      return response.data;
    } catch (error) {
      console.error('Error fetching project activity:', error);
      return this.getMockActivityFeed({ ...params, project_id: projectId });
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  async createActivity(activity: Omit<Activity, 'id' | 'created_at' | 'updated_at'>): Promise<Activity> {
    try {
      const response = await apiClient.post<Activity>(this.baseUrl, activity);
      return response.data;
    } catch (error) {
      console.error('Error creating activity:', error);
      throw error;
    }
  }

  /**
   * Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  private getMockActivityFeed(params: ActivityFeedRequest): ActivityFeedResponse {
    const mockActivities: Activity[] = [
      {
        id: 1,
        type: ActivityType.ANALYSIS_COMPLETED,
        title: '–ê–Ω–∞–ª–∏–∑ –ö–ü –∑–∞–≤–µ—Ä—à—ë–Ω',
        description: '–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –û–û–û "–°—Ç—Ä–æ–π–ö–æ–º–ø–ª–µ–∫—Ç" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω',
        user_id: 1,
        project_id: 1,
        document_id: 15,
        analysis_id: 5,
        created_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(), // 30 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        updated_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
        project_metadata: {
          compliance_score: 85,
          total_amount: 2500000
        }
      },
      {
        id: 2,
        type: ActivityType.DOCUMENT_UPLOADED,
        title: '–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω',
        description: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞" –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É',
        user_id: 1,
        project_id: 1,
        document_id: 14,
        created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        updated_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
        project_metadata: {
          document_size: 2456789,
          pages_count: 45
        }
      },
      {
        id: 3,
        type: ActivityType.REPORT_GENERATED,
        title: '–û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω',
        description: '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞ –ö–ü —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PDF',
        user_id: 1,
        project_id: 1,
        analysis_id: 4,
        created_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(), // 4 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        updated_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
        project_metadata: {
          report_type: 'comparative_analysis',
          format: 'pdf',
          file_size: 1234567
        }
      },
      {
        id: 4,
        type: ActivityType.ANALYSIS_STARTED,
        title: '–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω',
        description: '–ù–∞—á–∞—Ç –∞–Ω–∞–ª–∏–∑ 3 –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Claude-3.5-Sonnet',
        user_id: 1,
        project_id: 1,
        analysis_id: 4,
        created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), // 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        updated_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),
        project_metadata: {
          ai_model: 'claude-3.5-sonnet',
          documents_count: 3,
          analysis_type: 'comprehensive'
        }
      },
      {
        id: 5,
        type: ActivityType.PROJECT_CREATED,
        title: '–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω',
        description: '–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç "–ñ–ö –°–µ–≤–µ—Ä–Ω—ã–π" —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ü',
        user_id: 1,
        project_id: 1,
        created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        updated_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        project_metadata: {
          project_type: 'residential',
          budget_range: '50M-100M'
        }
      },
      {
        id: 6,
        type: ActivityType.SETTINGS_UPDATED,
        title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
        description: '–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ü',
        user_id: 1,
        created_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
        updated_at: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),
        project_metadata: {
          settings_changed: ['ai_model', 'analysis_depth', 'notification_preferences']
        }
      }
    ];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    let filteredActivities = mockActivities;
    
    if (params.project_id) {
      filteredActivities = filteredActivities.filter(a => a.project_id === params.project_id);
    }
    
    if (params.activity_type) {
      filteredActivities = filteredActivities.filter(a => a.type === params.activity_type);
    }

    if (params.user_id) {
      filteredActivities = filteredActivities.filter(a => a.user_id === params.user_id);
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const limit = params.limit || 10;
    const offset = params.offset || 0;
    const paginatedActivities = filteredActivities.slice(offset, offset + limit);

    return {
      activities: paginatedActivities,
      total: filteredActivities.length,
      has_more: offset + limit < filteredActivities.length
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  getActivityIcon(type: ActivityType): string {
    const icons = {
      [ActivityType.DOCUMENT_UPLOADED]: 'üìÑ',
      [ActivityType.ANALYSIS_STARTED]: 'üîÑ',
      [ActivityType.ANALYSIS_COMPLETED]: '‚úÖ',
      [ActivityType.REPORT_GENERATED]: 'üìä',
      [ActivityType.USER_REGISTERED]: 'üë§',
      [ActivityType.PROJECT_CREATED]: 'üèóÔ∏è',
      [ActivityType.SETTINGS_UPDATED]: '‚öôÔ∏è',
    };
    return icons[type] || 'üìã';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Ç–∏–ø–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  getActivityColor(type: ActivityType): string {
    const colors = {
      [ActivityType.DOCUMENT_UPLOADED]: 'text-blue-600',
      [ActivityType.ANALYSIS_STARTED]: 'text-yellow-600',
      [ActivityType.ANALYSIS_COMPLETED]: 'text-green-600',
      [ActivityType.REPORT_GENERATED]: 'text-purple-600',
      [ActivityType.USER_REGISTERED]: 'text-indigo-600',
      [ActivityType.PROJECT_CREATED]: 'text-emerald-600',
      [ActivityType.SETTINGS_UPDATED]: 'text-gray-600',
    };
    return colors[type] || 'text-gray-500';
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatRelativeTime(dateString: string): string {
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

    if (diffInSeconds < 60) {
      return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return `${hours} —á –Ω–∞–∑–∞–¥`;
    } else if (diffInSeconds < 2592000) {
      const days = Math.floor(diffInSeconds / 86400);
      return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    } else {
      return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short',
        year: 'numeric'
      });
    }
  }
}

export const activityService = new ActivityService();