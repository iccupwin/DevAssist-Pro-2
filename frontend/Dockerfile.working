# Working Dockerfile - Рабочая сборка настоящего React проекта
FROM node:18-alpine AS builder

WORKDIR /app

# Устанавливаем только необходимые пакеты системы
RUN apk add --no-cache python3 make g++

# Ограничиваем память Node.js  
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV CI=true

# Копируем package files
COPY package*.json ./

# Устанавливаем зависимости (используем npm install вместо ci для гибкости)
RUN npm install --silent --legacy-peer-deps --no-optional

# Копируем исходный код
COPY . .

# Переменные окружения для production
ENV NODE_ENV=production
ENV GENERATE_SOURCEMAP=false
ENV REACT_APP_API_URL=/api
ENV REACT_APP_WS_URL=/ws

# Собираем проект с fallback
RUN npm run build || (echo "Build failed, trying with reduced memory..." && NODE_OPTIONS="--max-old-space-size=512" npm run build)

# Production stage
FROM nginx:1.25-alpine

# Устанавливаем curl для health check
RUN apk add --no-cache curl

# Копируем собранное React приложение
COPY --from=builder /app/build /usr/share/nginx/html

# Копируем nginx конфигурацию
COPY nginx.frontend.conf /etc/nginx/conf.d/default.conf

# Устанавливаем права
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Создаем health endpoint
RUN echo '{"status":"healthy","service":"frontend","timestamp":"'$(date -Iseconds)'"}' > /usr/share/nginx/html/health.json

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health.json || exit 1

CMD ["nginx", "-g", "daemon off;"]