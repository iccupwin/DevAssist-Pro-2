#!/bin/bash

# DevAssist Pro - –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
# –†–∞–±–æ—Ç–∞–µ—Ç —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–º backend

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

echo -e "${BLUE}üîê DevAssist Pro - –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ú–æ–Ω–æ–ª–∏—Ç)${NC}"
echo ""

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
EMAIL="admin@devassist.pro"
PASSWORD="admin123456"
FULL_NAME="System Administrator"

print_info "–°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
print_info "  Email: $EMAIL"
print_info "  –ò–º—è: $FULL_NAME"
print_info "  –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend API
print_info "1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Backend API..."
if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
    print_success "‚úì Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
    health_info=$(curl -s http://localhost:8000/health 2>/dev/null)
    echo "   $health_info"
else
    print_error "‚úó Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: docker compose restart"
    exit 1
fi
echo ""

# 2. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API
print_info "2. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ Backend API..."

# –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints
endpoints=(
    "/api/admin/users/create-admin"
    "/admin/users/create-admin"
    "/api/auth/create-admin"
    "/auth/create-admin"
    "/api/users/create-admin"
    "/users/create-admin"
)

admin_created=false

for endpoint in "${endpoints[@]}"; do
    print_info "   –ü—Ä–æ–±—É–µ–º endpoint: $endpoint"
    
    response=$(curl -s -w "%{http_code}" -o /tmp/admin_response.txt \
        -X POST "http://localhost:8000$endpoint" \
        -H "Content-Type: application/json" \
        -d "{
            \"email\": \"$EMAIL\",
            \"password\": \"$PASSWORD\",
            \"full_name\": \"$FULL_NAME\",
            \"company\": \"DevAssist Pro\",
            \"position\": \"System Administrator\"
        }" 2>/dev/null)
    
    http_code="${response: -3}"
    
    if [ "$http_code" = "200" ] || [ "$http_code" = "201" ]; then
        print_success "‚úì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ $endpoint"
        response_body=$(cat /tmp/admin_response.txt 2>/dev/null)
        echo "   –û—Ç–≤–µ—Ç: $response_body"
        admin_created=true
        break
    elif [ "$http_code" = "400" ]; then
        response_body=$(cat /tmp/admin_response.txt 2>/dev/null)
        if echo "$response_body" | grep -q "already exists\|—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; then
            print_warning "‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            admin_created=true
            break
        else
            print_warning "‚ö† –û—à–∏–±–∫–∞ 400: $response_body"
        fi
    elif [ "$http_code" = "404" ]; then
        print_info "   404 - endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω"
    else
        print_warning "   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $http_code"
        response_body=$(cat /tmp/admin_response.txt 2>/dev/null)
        if [ -n "$response_body" ]; then
            echo "   –û—Ç–≤–µ—Ç: $response_body"
        fi
    fi
done

rm -f /tmp/admin_response.txt
echo ""

# 3. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ API, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
if [ "$admin_created" = false ]; then
    print_info "3. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."
    
    # –ù–∞—Ö–æ–¥–∏–º backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    BACKEND_CONTAINER=$(docker ps --format "table {{.Names}}" | grep -E "(app|backend|devassist)" | head -1)
    
    if [ -n "$BACKEND_CONTAINER" ]; then
        print_info "   –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $BACKEND_CONTAINER"
        
        # –°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞
        cat > /tmp/create_admin.py << EOF
import sys
sys.path.append('/app')

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
    from sqlalchemy import create_engine, text
    from passlib.context import CryptContext
    import os
    
    print("–ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
    
    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_password = pwd_context.hash("$PASSWORD")
    print(f"–ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_url = os.getenv("DATABASE_URL", "sqlite:///./devassist.db")
    print(f"Database URL: {db_url}")
    
    engine = create_engine(db_url)
    
    # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    create_table_sql = '''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email VARCHAR(255) UNIQUE NOT NULL,
        hashed_password VARCHAR(255) NOT NULL,
        full_name VARCHAR(255) NOT NULL,
        is_active BOOLEAN DEFAULT 1,
        is_superuser BOOLEAN DEFAULT 0,
        is_verified BOOLEAN DEFAULT 1,
        company VARCHAR(255),
        position VARCHAR(255),
        phone VARCHAR(50),
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    '''
    
    # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
    upsert_admin_sql = '''
    INSERT OR REPLACE INTO users (
        email, hashed_password, full_name, is_active, is_superuser, is_verified,
        company, position, created_at, updated_at
    ) VALUES (
        '$EMAIL', :hashed_password, '$FULL_NAME', 1, 1, 1,
        'DevAssist Pro', 'System Administrator', 
        datetime('now'), datetime('now')
    );
    '''
    
    with engine.connect() as conn:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        conn.execute(text(create_table_sql))
        print("–¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        conn.execute(text(upsert_admin_sql), {"hashed_password": hashed_password})
        conn.commit()
        print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = conn.execute(text("SELECT email, full_name, is_superuser FROM users WHERE email = '$EMAIL'")).fetchone()
        if result:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {result}")
            print("SUCCESS")
        else:
            print("ERROR: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")

except Exception as e:
    print(f"ERROR: {str(e)}")
    import traceback
    traceback.print_exc()
EOF
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        if docker exec -i "$BACKEND_CONTAINER" python3 /tmp/create_admin.py > /tmp/admin_output.txt 2>&1; then
            output=$(cat /tmp/admin_output.txt)
            if echo "$output" | grep -q "SUCCESS"; then
                print_success "‚úì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                admin_created=true
            else
                print_warning "‚ö† –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:"
                echo "$output"
            fi
        else
            print_error "‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
            cat /tmp/admin_output.txt 2>/dev/null
        fi
        
        rm -f /tmp/create_admin.py /tmp/admin_output.txt
    else
        print_error "‚úó Backend –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
fi
echo ""

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
print_info "4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..."

# –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
login_response=$(curl -s -w "%{http_code}" -o /tmp/login_response.txt \
    -X POST "http://localhost:8000/api/auth/login" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "username=$EMAIL&password=$PASSWORD" 2>/dev/null)

login_code="${login_response: -3}"

if [ "$login_code" = "200" ]; then
    print_success "‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
    response_body=$(cat /tmp/login_response.txt 2>/dev/null)
    echo "   –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"
elif [ "$login_code" = "400" ] || [ "$login_code" = "401" ]; then
    print_warning "‚ö† –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"
    
    # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
    login_response2=$(curl -s -w "%{http_code}" -o /tmp/login_response2.txt \
        -X POST "http://localhost:8000/api/auth/login" \
        -H "Content-Type: application/json" \
        -d "{\"email\": \"$EMAIL\", \"password\": \"$PASSWORD\"}" 2>/dev/null)
    
    login_code2="${login_response2: -3}"
    
    if [ "$login_code2" = "200" ]; then
        print_success "‚úì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç (JSON —Ñ–æ—Ä–º–∞—Ç)"
    else
        print_warning "‚ö† –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥—ã: $login_code, $login_code2)"
    fi
else
    print_warning "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: $login_code"
fi

rm -f /tmp/login_response.txt /tmp/login_response2.txt
echo ""

# 5. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
if [ "$admin_created" = true ]; then
    print_success "üéâ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –ì–û–¢–û–í!"
    echo ""
    print_info "üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:"
    print_info "   üåê URL: http://46.149.71.162/admin"
    print_info "   üìß Email: $EMAIL"
    print_info "   üîë –ü–∞—Ä–æ–ª—å: $PASSWORD"
    echo ""
    print_warning "‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!"
    echo ""
    print_info "üîç –ï—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:"
    print_info "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—ã –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ /admin (–Ω–µ /login)"
    print_info "   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É"
    print_info "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏"
    print_info "   4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: docker compose restart"
else
    print_error "‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–û–ó–î–ê–¢–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê"
    echo ""
    print_info "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:"
    print_info "   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: docker compose restart"
    print_info "   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: docker compose logs"
    print_info "   3. –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: ./fix-and-deploy.sh"
fi

echo ""
print_info "üìä –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: ./debug-admin.sh"