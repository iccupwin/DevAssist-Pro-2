#!/bin/bash

# DevAssist Pro - Deployment Test Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è unified –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[PASS]${NC} $1"
}

log_error() {
    echo -e "${RED}[FAIL]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

# –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
test_config_files() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    files=(
        "docker-compose.unified.yml"
        ".env.production"
        "nginx/nginx.conf" 
        "frontend/Dockerfile.production"
        "frontend/nginx.frontend.conf"
        "deploy.sh"
    )
    
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            log_success "–§–∞–π–ª $file —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        else
            log_error "–§–∞–π–ª $file –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            return 1
        fi
    done
}

# –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Docker Compose
test_docker_compose_syntax() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ docker-compose.unified.yml..."
    
    if docker-compose -f docker-compose.unified.yml config > /dev/null 2>&1; then
        log_success "Docker Compose —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
    else
        log_error "–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–µ Docker Compose!"
        docker-compose -f docker-compose.unified.yml config
        return 1
    fi
}

# –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
test_nginx_config() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ nginx.conf..."
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ temporary –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    if docker run --rm -v $(pwd)/nginx/nginx.conf:/etc/nginx/conf.d/default.conf nginx:alpine nginx -t > /dev/null 2>&1; then
        log_success "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
    else
        log_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx!"
        docker run --rm -v $(pwd)/nginx/nginx.conf:/etc/nginx/conf.d/default.conf nginx:alpine nginx -t
        return 1
    fi
}

# –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
test_environment_variables() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f ".env" ]; then
        log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ .env.production"
        cp .env.production .env
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars=(
        "POSTGRES_URL"
        "REDIS_URL"
        "JWT_SECRET"
    )
    
    for var in "${required_vars[@]}"; do
        if grep -q "^$var=" .env; then
            log_success "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        else
            log_error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!"
            return 1
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    if grep -q "your_real_anthropic_api_key_here" .env; then
        log_warning "ANTHROPIC_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç placeholder)"
    fi
    
    if grep -q "your_real_openai_api_key_here" .env; then
        log_warning "OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç placeholder)"
    fi
}

# –¢–µ—Å—Ç 5: –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
test_build() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤..."
    
    # –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ frontend –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    if docker-compose -f docker-compose.unified.yml build frontend > /dev/null 2>&1; then
        log_success "Frontend –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ frontend –æ–±—Ä–∞–∑–∞!"
        return 1
    fi
}

# –¢–µ—Å—Ç 6: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞
test_quick_start() {
    log_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–ø—É—â–µ–Ω–æ
    docker-compose -f docker-compose.unified.yml down > /dev/null 2>&1 || true
    
    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    if docker-compose -f docker-compose.unified.yml up -d postgres redis > /dev/null 2>&1; then
        log_success "–ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        sleep 10
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
        if docker exec devassist_postgres_unified pg_isready -U devassist > /dev/null 2>&1; then
            log_success "PostgreSQL –≥–æ—Ç–æ–≤"
        else
            log_error "PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤!"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        if docker exec devassist_redis_unified redis-cli ping > /dev/null 2>&1; then
            log_success "Redis –≥–æ—Ç–æ–≤"
        else
            log_error "Redis –Ω–µ –≥–æ—Ç–æ–≤!"
        fi
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        docker-compose -f docker-compose.unified.yml down > /dev/null 2>&1
        
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã!"
        return 1
    fi
}

# –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
test_ports() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."
    
    ports=(80 443 5432 6379)
    
    for port in "${ports[@]}"; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            log_warning "–ü–æ—Ä—Ç $port —É–∂–µ –∑–∞–Ω—è—Ç"
        else
            log_success "–ü–æ—Ä—Ç $port —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    done
}

# –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
test_requirements() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # Docker
    if command -v docker >/dev/null 2>&1; then
        log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
    else
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        return 1
    fi
    
    # Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker-compose --version)"
    else
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    total_mem=$(free -m | awk 'NR==2{printf "%.0f", $2/1024}')
    if [ $total_mem -ge 4 ]; then
        log_success "RAM: ${total_mem}GB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"
    else
        log_warning "RAM: ${total_mem}GB (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 4GB+)"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    available_space=$(df -h . | awk 'NR==2 {print $4}')
    log_info "–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: $available_space"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
run_all_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ DevAssist Pro deployment..."
    echo ""
    
    tests=(
        "test_requirements"
        "test_config_files"
        "test_docker_compose_syntax"
        "test_nginx_config"
        "test_environment_variables"
        "test_ports"
        "test_build"
        "test_quick_start"
    )
    
    passed=0
    total=${#tests[@]}
    
    for test in "${tests[@]}"; do
        if $test; then
            ((passed++))
        else
            log_error "–¢–µ—Å—Ç $test –Ω–µ –ø—Ä–æ—à–µ–ª!"
        fi
        echo ""
    done
    
    echo "=================== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ==================="
    echo -e "–ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$passed${NC}/$total —Ç–µ—Å—Ç–æ–≤"
    
    if [ $passed -eq $total ]; then
        log_success "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ì–æ—Ç–æ–≤ –∫ deployment."
        echo ""
        echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –≤ .env —Ñ–∞–π–ª–µ"
        echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy.sh deploy"
        echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost"
        return 0
    else
        log_error "–ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ deployment."
        return 1
    fi
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
cleanup_test_artifacts() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
    docker-compose -f docker-compose.unified.yml down --remove-orphans > /dev/null 2>&1 || true
    docker system prune -f > /dev/null 2>&1
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

show_deployment_info() {
    echo ""
    echo "================== DevAssist Pro Deployment Info =================="
    echo ""
    echo "üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:"
    echo "  ‚úÖ docker-compose.unified.yml  - –ì–ª–∞–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    echo "  ‚úÖ .env.production             - Production environment"
    echo "  ‚úÖ deploy.sh                   - –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
    echo "  ‚úÖ nginx/nginx.conf            - Reverse proxy config"
    echo "  ‚úÖ frontend/Dockerfile.production - Frontend build"
    echo ""
    echo "üöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è deployment:"
    echo "  ./deploy.sh deploy     - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
    echo "  ./deploy.sh quick      - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
    echo "  ./deploy.sh status     - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    echo "  ./deploy.sh logs       - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
    echo ""
    echo "üåê –ü–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ:"
    echo "  Frontend:    http://localhost"
    echo "  Backend API: http://localhost/api"
    echo "  API Docs:    http://localhost/api/docs"
    echo "  Health:      http://localhost/health"
    echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "$1" in
    "all"|"")
        run_all_tests
        ;;
    "config")
        test_config_files && test_docker_compose_syntax && test_nginx_config
        ;;
    "env")
        test_environment_variables
        ;;
    "build")
        test_build
        ;;
    "requirements")
        test_requirements
        ;;
    "cleanup")
        cleanup_test_artifacts
        ;;
    "info")
        show_deployment_info
        ;;
    *)
        echo "DevAssist Pro - Deployment Test Script"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  all          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  config       - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        echo "  env          - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å environment variables"
        echo "  build        - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É –æ–±—Ä–∞–∑–æ–≤"
        echo "  requirements - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
        echo "  cleanup      - –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"
        echo "  info         - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ deployment"
        echo ""
        ;;
esac