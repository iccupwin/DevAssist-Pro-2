#!/bin/bash

set -e

echo "üöÄ DevAssist Pro - –ú–û–ù–û–õ–ò–¢–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï"
echo "==========================================="
echo "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ CORS –¥–ª—è –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
echo ""

SERVER_IP="46.149.71.162"
LOG_FILE="/tmp/devassist-monolith-$(date +%Y%m%d-%H%M%S).log"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

log "üîß –ù–∞—á–∞–ª–æ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DevAssist Pro"

echo "üìã –≠—Ç–∞–ø—ã:"
echo "  1. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
echo "  2. üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "  3. üê≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
echo "  4. üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
echo ""

# –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log "üìä –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"

echo "üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CORS –≤ docker-compose.yml..."
if grep -q "http://46.149.71.162:3000" docker-compose.yml; then
    log "‚úÖ CORS –≤ docker-compose.yml —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω"
else
    log "‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CORS –≤ docker-compose.yml"
    sed -i 's|ALLOWED_ORIGINS:.*|ALLOWED_ORIGINS: http://46.149.71.162:3000,http://46.149.71.162,https://46.149.71.162,http://localhost:80,http://localhost:3000,http://localhost:3001|' docker-compose.yml
fi

echo "üîç –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–æ–≤..."
if [ -f ".env.production" ]; then
    cp .env.production .env
    log "‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω .env.production -> .env"
else
    log "‚ö†Ô∏è  .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env"
fi

# –≠—Ç–∞–ø 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "üõë –≠—Ç–∞–ø 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down 2>/dev/null || true

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö..."
sudo fuser -k 3000/tcp 2>/dev/null || true
sudo fuser -k 8000/tcp 2>/dev/null || true
sudo fuser -k 80/tcp 2>/dev/null || true

# –ü–∞—É–∑–∞
sleep 5

log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫
log "üê≥ –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"

echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker..."
docker system prune -f 2>/dev/null || true

echo "üî® –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
docker compose build --no-cache

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ (90 —Å–µ–∫—É–Ω–¥)..."
sleep 90

log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"

# –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞
log "üìä –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"

echo "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker compose ps

echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend
if curl -f -s --max-time 10 "http://$SERVER_IP:3000" >/dev/null 2>&1; then
    echo "  ‚úÖ Frontend (3000): –¥–æ—Å—Ç—É–ø–µ–Ω"
    FRONTEND_OK=true
else
    echo "  ‚ùå Frontend (3000): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    FRONTEND_OK=false
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend/Monolith
if curl -f -s --max-time 10 "http://$SERVER_IP:8000/health" >/dev/null 2>&1; then
    echo "  ‚úÖ Backend Monolith (8000): –¥–æ—Å—Ç—É–ø–µ–Ω"
    BACKEND_OK=true
elif curl -f -s --max-time 10 "http://$SERVER_IP:80/health" >/dev/null 2>&1; then
    echo "  ‚úÖ Backend Monolith (80): –¥–æ—Å—Ç—É–ø–µ–Ω"
    BACKEND_OK=true
    BACKEND_PORT=80
else
    echo "  ‚ùå Backend Monolith: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 8000 –∏ 80"
    BACKEND_OK=false
    BACKEND_PORT=8000
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth –≤ —Å–æ—Å—Ç–∞–≤–µ –º–æ–Ω–æ–ª–∏—Ç–∞
if [ "$BACKEND_OK" = true ]; then
    AUTH_URL="http://$SERVER_IP:${BACKEND_PORT:-8000}"
    if curl -f -s --max-time 10 "$AUTH_URL/api/auth/login" -X OPTIONS >/dev/null 2>&1; then
        echo "  ‚úÖ Auth Module: –¥–æ—Å—Ç—É–ø–µ–Ω"
        AUTH_OK=true
    else
        echo "  ‚ö†Ô∏è  Auth Module: –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å CORS"
        AUTH_OK=false
    fi
else
    AUTH_OK=false
fi

# –ë—ã—Å—Ç—Ä—ã–π CORS —Ç–µ—Å—Ç
if [ "$BACKEND_OK" = true ]; then
    echo ""
    echo "üåê –ë—ã—Å—Ç—Ä—ã–π CORS —Ç–µ—Å—Ç..."
    CORS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
        -H "Origin: http://$SERVER_IP:3000" \
        -H "Access-Control-Request-Method: POST" \
        -H "Access-Control-Request-Headers: Content-Type,Authorization" \
        -X OPTIONS \
        "http://$SERVER_IP:${BACKEND_PORT:-8000}/api/auth/login" 2>/dev/null || echo "000")
    
    if [ "$CORS_RESPONSE" = "200" ] || [ "$CORS_RESPONSE" = "204" ]; then
        echo "  ‚úÖ CORS: —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $CORS_RESPONSE)"
        CORS_OK=true
    else
        echo "  ‚ùå CORS: –ø—Ä–æ–±–ª–µ–º–∞ (HTTP $CORS_RESPONSE)"
        CORS_OK=false
    fi
else
    CORS_OK=false
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if [ "$BACKEND_OK" = true ] && [ "$CORS_OK" = true ]; then
    echo ""
    echo "üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
    if [ -f "./auth-verification.sh" ]; then
        if ./auth-verification.sh; then
            AUTH_TEST_OK=true
        else
            AUTH_TEST_OK=false
        fi
    else
        AUTH_TEST_OK=false
    fi
else
    AUTH_TEST_OK=false
fi

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢"
echo "=================="

if [ "$FRONTEND_OK" = true ] && [ "$BACKEND_OK" = true ] && [ "$CORS_OK" = true ]; then
    echo "üéâ –£–°–ü–ï–®–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï!"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URLs:"
    echo "   Frontend: http://$SERVER_IP:3000"
    echo "   Backend:  http://$SERVER_IP:${BACKEND_PORT:-8000}"
    
    if [ "$AUTH_TEST_OK" = true ]; then
        echo "   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é"
    else
        echo "   ‚ö†Ô∏è  –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    fi
    
    echo ""
    echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:"
    echo "   ‚Ä¢ CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è IP $SERVER_IP"
    echo "   ‚Ä¢ –ú–æ–Ω–æ–ª–∏—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ"
    echo "   ‚Ä¢ Frontend –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ backend"
    
    log "üéâ –£–°–ü–ï–®–ù–û–ï –ú–û–ù–û–õ–ò–¢–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï"
    
    echo ""
    echo "üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker compose down"
    echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker compose restart"
    echo "   –õ–æ–≥–∏: docker compose logs -f"
    echo "   –°—Ç–∞—Ç—É—Å: docker compose ps"
    
    exit 0
    
elif [ "$FRONTEND_OK" = true ] && [ "$BACKEND_OK" = true ]; then
    echo "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•. –°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å CORS."
    echo ""
    echo "üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs app"
    echo "   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env –µ—Å—Ç—å: ALLOWED_ORIGINS=http://$SERVER_IP:3000"
    echo "   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker compose restart app"
    
    log "‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–• - –ü—Ä–æ–±–ª–µ–º—ã —Å CORS"
    exit 1
    
else
    echo "üö® –û–®–ò–ë–ö–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø!"
    echo ""
    echo "‚ùå –ü—Ä–æ–±–ª–µ–º—ã:"
    [ "$FRONTEND_OK" = false ] && echo "   ‚Ä¢ Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    [ "$BACKEND_OK" = false ] && echo "   ‚Ä¢ Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    [ "$CORS_OK" = false ] && echo "   ‚Ä¢ CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    echo ""
    echo "üîß –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs"
    echo "   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç—ã: netstat -tulpn | grep -E ':(3000|8000|80)'"
    echo "   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: cat .env"
    echo "   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker compose restart"
    
    echo ""
    echo "üìã –§–∞–π–ª –ª–æ–≥–∞: $LOG_FILE"
    
    log "üö® –û–®–ò–ë–ö–ê –ú–û–ù–û–õ–ò–¢–ù–û–ì–û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø"
    exit 2
fi